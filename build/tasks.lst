ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"tasks.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.prvTaskIsTaskSuspended,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	prvTaskIsTaskSuspended:
  25              	.LFB16:
  26              		.file 1 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c"
   1:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Standard includes. */
  29:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <stdlib.h>
  30:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include <string.h>
  31:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Defining MPU_WRAPPERS_INCLUDED_FROM_API_FILE prevents task.h from redefining
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 2


  33:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** all the API functions to use the MPU wrappers.  That should only be done when
  34:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task.h is included from an application file. */
  35:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define MPU_WRAPPERS_INCLUDED_FROM_API_FILE
  36:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  37:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* FreeRTOS includes. */
  38:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "FreeRTOS.h"
  39:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "task.h"
  40:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "timers.h"
  41:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #include "stack_macros.h"
  42:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  43:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lint e961 and e750 are suppressed as a MISRA exception justified because the
  44:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** MPU ports require MPU_WRAPPERS_INCLUDED_FROM_API_FILE to be defined for the
  45:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** header files above, but not in this file, in order to generate the correct
  46:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** privileged Vs unprivileged linkage and placement. */
  47:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE /*lint !e961 !e750. */
  48:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  49:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Set configUSE_STATS_FORMATTING_FUNCTIONS to 2 to include the stats formatting
  50:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** functions but without including stdio.h here. */
  51:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_STATS_FORMATTING_FUNCTIONS == 1 )
  52:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* At the bottom of this file are two optional functions that can be used
  53:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to generate human readable text from the raw data generated by the
  54:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxTaskGetSystemState() function.  Note the formatting functions are provided
  55:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for convenience only, and are NOT considered part of the kernel. */
  56:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#include <stdio.h>
  57:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_STATS_FORMATTING_FUNCTIONS == 1 ) */
  58:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_PREEMPTION == 0 )
  60:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If the cooperative scheduler is being used then a yield should not be
  61:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed just because a higher priority task has been woken. */
  62:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION()
  63:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
  64:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskYIELD_IF_USING_PREEMPTION() portYIELD_WITHIN_API()
  65:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
  66:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  67:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Values that can be assigned to the ucNotifyState member of the TCB. */
  68:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOT_WAITING_NOTIFICATION	( ( uint8_t ) 0 )
  69:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskWAITING_NOTIFICATION		( ( uint8_t ) 1 )
  70:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskNOTIFICATION_RECEIVED		( ( uint8_t ) 2 )
  71:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
  73:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The value used to fill the stack of a task when the task is created.  This
  74:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is used purely for checking the high water mark for tasks.
  75:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
  76:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTACK_FILL_BYTE	( 0xa5U )
  77:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Sometimes the FreeRTOSConfig.h settings only allow a task to be created using
  79:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** dynamically allocated RAM, in which case when any task is deleted it is known
  80:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that both the task's stack and TCB need to be freed.  Sometimes the
  81:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** FreeRTOSConfig.h settings only allow a task to be created using statically
  82:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case when any task is deleted it is known that neither
  83:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the task's stack or TCB should be freed.  Sometimes the FreeRTOSConfig.h
  84:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** settings allow a task to be created using either statically or dynamically
  85:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** allocated RAM, in which case a member of the TCB is used to record whether the
  86:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** stack and/or TCB were allocated statically or dynamically, so when a task is
  87:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** deleted the RAM that was allocated dynamically is freed again and no attempt is
  88:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** made to free the RAM that was allocated statically.
  89:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is only true if it is possible for a
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 3


  90:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** task to be created using either statically or dynamically allocated RAM.  Note
  91:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** that if portUSING_MPU_WRAPPERS is 1 then a protected task can be created with
  92:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** a statically allocated stack and a dynamically allocated TCB.
  93:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** !!!NOTE!!! If the definition of tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE is
  94:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** changed then the definition of StaticTask_t must also be updated. */
  95:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE	( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( c
  96:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB 		( ( uint8_t ) 0 )
  97:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_ONLY 			( ( uint8_t ) 1 )
  98:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSTATICALLY_ALLOCATED_STACK_AND_TCB		( ( uint8_t ) 2 )
  99:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* If any of the following are set then task stacks are filled with a known
 101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** value so the high water mark can be determined.  If none of the following are
 102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** set then don't fill the stack so there is no unnecessary dependency on memset. */
 103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTas
 104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	1
 105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
 106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define tskSET_NEW_STACKS_TO_KNOWN_VALUE	0
 107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Macros used by vListTask to indicate which state a task is in.
 111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskRUNNING_CHAR		( 'X' )
 113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskBLOCKED_CHAR		( 'B' )
 114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskREADY_CHAR		( 'R' )
 115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskDELETED_CHAR		( 'D' )
 116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define tskSUSPENDED_CHAR	( 'S' )
 117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Some kernel aware debuggers require the data the debugger needs access to be
 120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * global, rather than file scope.
 121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef portREMOVE_STATIC_QUALIFIER
 123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define static
 124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The name allocated to the Idle task.  This can be overridden by defining
 127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** configIDLE_TASK_NAME in FreeRTOSConfig.h. */
 128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifndef configIDLE_TASK_NAME
 129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define configIDLE_TASK_NAME "IDLE"
 130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
 133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 0 then task selection is
 135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a generic way that is not optimised to any particular
 136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	microcontroller architecture. */
 137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* uxTopReadyPriority holds the priority of the highest priority ready
 139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	state task. */
 140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )														\
 141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority ) > uxTopReadyPriority )														\
 143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTopReadyPriority = ( uxPriority );														\
 145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskRECORD_READY_PRIORITY */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 4


 147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()															\
 151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority = uxTopReadyPriority;														\
 153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority queue that contains ready tasks. */								\
 155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopPriority ] ) ) )							\
 156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxTopPriority );																\
 158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			--uxTopPriority;																			\
 159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																										\
 161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* listGET_OWNER_OF_NEXT_ENTRY indexes through the list, so the tasks of						\
 162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	same priority get an equal share of the processor time. */									\
 163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );			\
 164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTopReadyPriority = uxTopPriority;																\
 165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK */
 166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Define away taskRESET_READY_PRIORITY() and portRESET_READY_PRIORITY() as
 170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	they are only required when a port optimised method of task selection is
 171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	being used. */
 172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )
 173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define portRESET_READY_PRIORITY( uxPriority, uxTopReadyPriority )
 174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If configUSE_PORT_OPTIMISED_TASK_SELECTION is 1 then task selection is
 178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	performed in a way that is tailored to the particular microcontroller
 179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	architecture being used. */
 180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided.  Call the port defined macros. */
 182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRECORD_READY_PRIORITY( uxPriority )	portRECORD_READY_PRIORITY( uxPriority, uxTopReadyP
 183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskSELECT_HIGHEST_PRIORITY_TASK()														\
 187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																								\
 188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTopPriority;																		\
 189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Find the highest priority list that contains ready tasks. */								\
 191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portGET_HIGHEST_PRIORITY( uxTopPriority, uxTopReadyPriority );								\
 192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ uxTopPriority ] ) ) > 0 );		\
 193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopPriority ] ) );		\
 194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /* taskSELECT_HIGHEST_PRIORITY_TASK() */
 195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*-----------------------------------------------------------*/
 197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A port optimised version is provided, call it only if the TCB being reset
 199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is being referenced from a ready list.  If it is referenced from a delayed
 200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	or suspended list then it won't be in a ready list. */
 201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskRESET_READY_PRIORITY( uxPriority )														\
 202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{																									\
 203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ ( uxPriority ) ] ) ) == ( UBaseType_t ) 0 )	\
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 5


 204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{																								\
 205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portRESET_READY_PRIORITY( ( uxPriority ), ( uxTopReadyPriority ) );							\
 206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}																								\
 207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* pxDelayedTaskList and pxOverflowDelayedTaskList are switched when the tick
 214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** count overflows. */
 215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define taskSWITCH_DELAYED_LISTS()																	\
 216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {																									\
 217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxTemp;																					\
 218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The delayed tasks list should be empty when the lists are switched. */						\
 220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );										\
 221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 																									\
 222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTemp = pxDelayedTaskList;																		\
 223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = pxOverflowDelayedTaskList;													\
 224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = pxTemp;																\
 225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xNumOfOverflows++;																				\
 226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvResetNextTaskUnblockTime();																	\
 227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Place the task represented by pxTCB into the appropriate ready list for
 233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task.  It is inserted at the end of the list.
 234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvAddTaskToReadyList( pxTCB )																\
 236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceMOVED_TASK_TO_READY_STATE( pxTCB );														\
 237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskRECORD_READY_PRIORITY( ( pxTCB )->uxPriority );												\
 238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( &( pxReadyTasksLists[ ( pxTCB )->uxPriority ] ), &( ( pxTCB )->xStateListItem ) );
 239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tracePOST_MOVED_TASK_TO_READY_STATE( pxTCB )
 240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Several functions take an TaskHandle_t parameter that can optionally be NULL,
 244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * where NULL is used to indicate that the handle of the currently executing
 245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * task should be used in place of the parameter.  This macro simply checks to
 246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * see if the parameter is NULL and returns a pointer to the appropriate TCB.
 247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #define prvGetTCBFromHandle( pxHandle ) ( ( ( pxHandle ) == NULL ) ? ( TCB_t * ) pxCurrentTCB : ( T
 249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The item value of the event list item is normally used to hold the priority
 251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** of the task to which it belongs (coded to allow it to be held in reverse
 252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** priority order).  However, it is occasionally borrowed for other purposes.  It
 253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** is important its value is not updated due to a task priority change while it is
 254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** being used for another purpose.  The following bit definition is used to inform
 255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** the scheduler that the value should not be changed - in which case it is the
 256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** responsibility of whichever module is using the value to ensure it gets set back
 257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** to its original value when it is released. */
 258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_16_BIT_TICKS == 1 )
 259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x8000U
 260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #else
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 6


 261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#define taskEVENT_LIST_ITEM_VALUE_IN_USE	0x80000000UL
 262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Task control block.  A task control block (TCB) is allocated for each task,
 266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and stores task state information, including a pointer to the task's context
 267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * (the task's run time environment, including register values)
 268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef struct tskTaskControlBlock
 270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile StackType_t	*pxTopOfStack;	/*< Points to the location of the last item placed on the task
 272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xMPU_SETTINGS	xMPUSettings;		/*< The MPU settings are defined as part of the port layer.  THIS MU
 275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xStateListItem;	/*< The list that the state list item of a task is reference from den
 278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	ListItem_t			xEventListItem;		/*< Used to reference a task from an event list. */
 279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t			uxPriority;			/*< The priority of the task.  0 is the lowest priority. */
 280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	StackType_t			*pxStack;			/*< Points to the start of the stack. */
 281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char				pcTaskName[ configMAX_TASK_NAME_LEN ];/*< Descriptive name given to the task when created.
 282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( ( portSTACK_GROWTH > 0 ) || ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
 284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t		*pxEndOfStack;		/*< Points to the highest valid address for the stack. */
 285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxCriticalNesting;	/*< Holds the critical section nesting depth for ports that do no
 289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TRACE_FACILITY == 1 )
 292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTCBNumber;		/*< Stores a number that increments each time a TCB is created.  It al
 293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxTaskNumber;		/*< Stores a number specifically for use by third party trace code. *
 294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxBasePriority;		/*< The priority last assigned to the task - used by the priority i
 298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		UBaseType_t		uxMutexesHeld;
 299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TaskHookFunction_t pxTaskTag;
 303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS > 0 )
 306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		void			*pvThreadLocalStoragePointers[ configNUM_THREAD_LOCAL_STORAGE_POINTERS ];
 307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configGENERATE_RUN_TIME_STATS == 1 )
 310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t		ulRunTimeCounter;	/*< Stores the amount of time the task has spent in the Running state
 311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate a Newlib reent structure that is specific to this task.
 315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Note Newlib support has been included by popular demand, but is not
 316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		used by the FreeRTOS maintainers themselves.  FreeRTOS is not
 317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		responsible for resulting newlib operation.  User must be familiar with
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 7


 318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		newlib and must provide system-wide implementations of the necessary
 319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		stubs. Be warned that (at the time of writing) the current newlib design
 320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		implements a system-wide malloc() that must be provided with locks. */
 321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		struct	_reent xNewLib_reent;
 322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TASK_NOTIFICATIONS == 1 )
 325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint32_t ulNotifiedValue;
 326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		volatile uint8_t ucNotifyState;
 327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* See the comments above the definition of
 330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE. */
 331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for
 332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t	ucStaticallyAllocated; 		/*< Set to pdTRUE if the task is a statically allocated to ensur
 333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint8_t ucDelayAborted;
 337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** } tskTCB;
 340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* The old tskTCB name is maintained above then typedefed to the new TCB_t name
 342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** below to enable the use of older kernel aware debuggers. */
 343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** typedef tskTCB TCB_t;
 344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -save -e956 A manual analysis and inspection has been used to determine
 346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** which static variables must be declared volatile. */
 347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA TCB_t * volatile pxCurrentTCB = NULL;
 349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Lists for ready and blocked tasks. --------------------*/
 351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t pxReadyTasksLists[ configMAX_PRIORITIES ] = {0};	/*< Prioritised read
 352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList1 = {0};								/*< Delayed tasks. */
 353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xDelayedTaskList2 = {0};								/*< Delayed tasks (two lists are used
 354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxDelayedTaskList = NULL;					/*< Points to the delayed ta
 355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t * volatile pxOverflowDelayedTaskList = NULL;			/*< Points to the dela
 356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static List_t xPendingReadyList = {0};								/*< Tasks that have been readied whil
 357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( INCLUDE_vTaskDelete == 1 )
 359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xTasksWaitingTermination = {0};					/*< Tasks that have been deleted
 361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static volatile UBaseType_t uxDeletedTasksWaitingCleanUp = ( UBaseType_t ) 0U;
 362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static List_t xSuspendedTaskList = {0};						/*< Tasks that are currently suspende
 368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Other file private variables. --------------------------------*/
 372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxCurrentNumberOfTasks 	= ( UBaseType_t ) 0U;
 373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xTickCount 				= ( TickType_t ) configINITIAL_TICK_COUNT
 374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxTopReadyPriority 		= tskIDLE_PRIORITY;
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 8


 375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xSchedulerRunning 		= pdFALSE;
 376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxPendedTicks 			= ( UBaseType_t ) 0U;
 377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xYieldPending 			= pdFALSE;
 378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile BaseType_t xNumOfOverflows 			= ( BaseType_t ) 0;
 379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static UBaseType_t uxTaskNumber 					= ( UBaseType_t ) 0U;
 380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile TickType_t xNextTaskUnblockTime		= ( TickType_t ) 0U; /* Initialise
 381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static TaskHandle_t xIdleTaskHandle					= NULL;			/*< Holds the handle of the idle 
 382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Context switches are held pending while the scheduler is suspended.  Also,
 384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** interrupts must not manipulate the xStateListItem of a TCB, or any of the
 385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** lists the xStateListItem can be referenced from, if the scheduler is suspended.
 386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** If an interrupt needs to unblock a task while the scheduler is suspended then it
 387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** moves the task's event list item into the xPendingReadyList, ready for the
 388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** kernel to move the task from the pending ready list into the real ready list
 389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** when the scheduler is unsuspended.  The pending ready list itself can only be
 390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** accessed from a critical section. */
 391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** PRIVILEGED_DATA static volatile UBaseType_t uxSchedulerSuspended	= ( UBaseType_t ) pdFALSE;
 392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configGENERATE_RUN_TIME_STATS == 1 )
 394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTaskSwitchedInTime = 0UL;	/*< Holds the value of a timer/counter
 396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	PRIVILEGED_DATA static uint32_t ulTotalRunTime = 0UL;		/*< Holds the total amount of execution tim
 397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*lint -restore */
 401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* Callback function prototypes. --------------------------*/
 405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if(  configCHECK_FOR_STACK_OVERFLOW > 0 )
 406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationStackOverflowHook( TaskHandle_t xTask, char *pcTaskName );
 407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICK_HOOK > 0 )
 410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationTickHook( void );
 411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	extern void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxI
 415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* File private functions. --------------------------------*/
 418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /**
 420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility task that simply returns pdTRUE if the task referenced by xTask is
 421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * currently in the Suspended state, or pdFALSE if the task referenced by xTask
 422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * is in any other state.
 423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
 425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask ) PRIVILEGED_FUNCTION;
 427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
 429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to ready all the lists used by the scheduler.  This is called
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 9


 432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * automatically upon the creation of the first task.
 433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void ) PRIVILEGED_FUNCTION;
 435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task, which as all tasks is implemented as a never ending loop.
 438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The idle task is automatically created and added to the ready lists upon
 439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * creation of the first user task.
 440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION_PROTO() macro is used to allow port/compiler specific
 442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
 443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
 445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION_PROTO( prvIdleTask, pvParameters );
 448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Utility to free all memory allocated by the scheduler to hold a TCB,
 451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * including the stack pointed to by the TCB.
 452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This does not free memory allocated by the task itself (i.e. memory
 454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * allocated by calls to pvPortMalloc from within the tasks application code).
 455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
 457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB ) PRIVILEGED_FUNCTION;
 459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Used only by the idle task.  This checks to see if anything has been placed
 464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * in the list of tasks waiting to be deleted.  If so the task is cleaned up
 465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * and its TCB deleted.
 466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void ) PRIVILEGED_FUNCTION;
 468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The currently executing task is entering the Blocked state.  Add the task to
 471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * either the current or the overflow delayed task list.
 472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
 474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Fills an TaskStatus_t structure with information on each task that is
 477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * referenced from the pxList list (which may be a ready list, a delayed list,
 478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * a suspended list, etc.).
 479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * THIS FUNCTION IS INTENDED FOR DEBUGGING ONLY, AND SHOULD NOT BE CALLED FROM
 481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * NORMAL APPLICATION CODE.
 482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
 484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
 486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 10


 489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Searches pxList for a task with name pcNameToQuery - returning a handle to
 491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * the task if it is found, or NULL if the task is not found.
 492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
 494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] ) PRIVI
 496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * When a task is created, the stack of the task is filled with a known value.
 501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This function determines the 'high water mark' of the task stack by
 502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * determining how much of the stack remains at the original preset value.
 503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
 505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte ) PRIVILEGED_FUNCTION;
 507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Return the amount of time, in ticks, that will pass before the kernel will
 512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * next move a task from the Blocked state to the Running state.
 513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
 514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This conditional compilation should use inequality to 0, not equality to 1.
 515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * This is to ensure portSUPPRESS_TICKS_AND_SLEEP() can be called when user
 516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * defined low power mode implementations require configUSE_TICKLESS_IDLE to be
 517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * set to a value other than 1.
 518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
 520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void ) PRIVILEGED_FUNCTION;
 522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Set xNextTaskUnblockTime to the time at which the next Blocked state task
 527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * will exit the Blocked state.
 528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void );
 530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
 532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/*
 534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * Helper function used to pad task names with spaces when printing out
 535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 * human readable tables of task information.
 536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	 */
 537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName ) PRIVILEGED_FUNCTION;
 538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a Task_t structure has been allocated either statically or
 543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * dynamically to fill in the structure's members.
 544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 11


 546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName, 		/*lint !e971 Unqualified char types are allowed for strings a
 547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions ) PRIVILEGED_FUNCTION;
 553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * Called after a new task has been created and initialised to place the task
 556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * under the control of the scheduler.
 557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB ) PRIVILEGED_FUNCTION;
 559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
 561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * freertos_tasks_c_additions_init() should only be called if the user definable
 562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is the only macro
 563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * called by the function.
 564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
 565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
 566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void freertos_tasks_c_additions_init( void ) PRIVILEGED_FUNCTION;
 568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif
 570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_STATIC_ALLOCATION == 1 )
 574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StackType_t * const puxStackBuffer,
 581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									StaticTask_t * const pxTaskBuffer )
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( puxStackBuffer != NULL );
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configASSERT_DEFINED == 1 )
 590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Sanity check that the size of the structure used to declare a
 592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable of type StaticTask_t equals the size of the real task
 593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure. */
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			volatile size_t xSize = sizeof( StaticTask_t );
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configASSERT_DEFINED */
 598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The memory used for the task's TCB and stack are passed into this
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 12


 603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function - use them. */
 604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are desig
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNe
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = NULL;
 621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* SUPPORT_STATIC_ALLOCATION */
 627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
 630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestrictedStatic( const TaskParameters_t * const pxTaskDefinition, TaskHandl
 632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer != NULL );
 637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->pxTaskBuffer != NULL );
 638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTaskDefinition->puxStackBuffer != NULL ) && ( pxTaskDefinition->pxTaskBuffer != NULL ) )
 640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pxTaskDefinition->pxTaskBuffer;
 645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Store the stack location in the TCB. */
 647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
 650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created statically in case the task is later deleted. */
 653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pcName,
 659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									( uint32_t ) pxTaskDefinition->usStackDepth,
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 13


 660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->pvParameters,
 661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->uxPriority,
 662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxCreatedTask, pxNewTCB,
 663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									pxTaskDefinition->xRegions );
 664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
 673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( portUSING_MPU_WRAPPERS == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )
 676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreateRestricted( const TaskParameters_t * const pxTaskDefinition, TaskHandle_t *p
 678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskDefinition->puxStackBuffer );
 683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskDefinition->puxStackBuffer != NULL )
 685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends
 687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			on the implementation of the port malloc function and whether or
 688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not static allocation is being used. */
 689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Store the stack location in the TCB. */
 694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configSUPPORT_STATIC_ALLOCATION == 1 )
 697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Tasks can be created statically or dynamically, so note
 699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task had a statically allocated stack in case it is
 700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					later deleted.  The TCB was allocated dynamically. */
 701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
 704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseNewTask(	pxTaskDefinition->pvTaskCode,
 706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pcName,
 707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										( uint32_t ) pxTaskDefinition->usStackDepth,
 708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->pvParameters,
 709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->uxPriority,
 710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxCreatedTask, pxNewTCB,
 711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										pxTaskDefinition->xRegions );
 712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddNewTaskToReadyList( pxNewTCB );
 714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 14


 717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
 722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
 725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCreate(	TaskFunction_t pxTaskCode,
 727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and 
 728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							const configSTACK_DEPTH_TYPE usStackDepth,
 729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							void * const pvParameters,
 730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							UBaseType_t uxPriority,
 731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							TaskHandle_t * const pxCreatedTask )
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the stack grows down then allocate the stack then the TCB so the stack
 737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		does not grow into the TCB.  Likewise if the stack grows up then allocate
 738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the TCB then the stack. */
 739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( portSTACK_GROWTH > 0 )
 740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the TCB.  Where the memory comes from depends on
 742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the implementation of the port malloc function and whether or not static
 743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allocation is being used. */
 744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxNewTCB != NULL )
 747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the stack used by the task being created.
 749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				The base of the stack memory stored in the TCB so the task can
 750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				be deleted later if required. */
 751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( Sta
 752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB->pxStack == NULL )
 754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Could not allocate the stack.  Delete the allocated TCB. */
 756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxNewTCB );
 757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB = NULL;
 758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else /* portSTACK_GROWTH */
 762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxStack;
 764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Allocate space for the stack used by the task being created. */
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) 
 767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxStack != NULL )
 769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Allocate space for the TCB. */
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the cas
 772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxNewTCB != NULL )
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 15


 774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Store the stack location in the TCB. */
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxNewTCB->pxStack = pxStack;
 777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
 779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The stack cannot be used as the TCB was not created.  Free
 781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it again. */
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vPortFree( pxStack );
 783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
 786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB = NULL;
 788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* portSTACK_GROWTH */
 791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxNewTCB != NULL )
 793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated f
 795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Tasks can be created statically or dynamically, so note this
 797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task was created dynamically in case it is later deleted. */
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif /* configSUPPORT_STATIC_ALLOCATION */
 801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, p
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
 815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings an
 819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const uint32_t ulStackDepth,
 820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									void * const pvParameters,
 821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									UBaseType_t uxPriority,
 822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TaskHandle_t * const pxCreatedTask,
 823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									TCB_t *pxNewTCB,
 824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 									const MemoryRegion_t * const xRegions )
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t x;
 828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Should the task be created in privileged mode? */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 16


 831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		BaseType_t xRunPrivileged;
 832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdTRUE;
 835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xRunPrivileged = pdFALSE;
 839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority &= ~portPRIVILEGE_BIT;
 841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS == 1 */
 842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Avoid dependency on memset() if it is not required. */
 844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
 845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Fill the stack with a known value to assist debugging. */
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof(
 848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* tskSET_NEW_STACKS_TO_KNOWN_VALUE */
 850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Calculate the top of stack address.  This depends on whether the stack
 852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	grows from high memory to low (as per the 80x86) or vice versa.
 853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portSTACK_GROWTH is used to make the result positive or negative as required
 854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	by the port. */
 855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portSTACK_GROWTH < 0 )
 856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the calculated top of stack is correct. */
 861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALI
 862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configRECORD_STACK_HIGH_ADDRESS == 1 )
 864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Also record the stack's high address, which may assist
 866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			debugging. */
 867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pxEndOfStack = pxTopOfStack;
 868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configRECORD_STACK_HIGH_ADDRESS */
 870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portSTACK_GROWTH */
 872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = pxNewTCB->pxStack;
 874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check the alignment of the stack buffer is correct. */
 876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYT
 877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The other extreme of the stack space is required if stack checking is
 879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		performed. */
 880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portSTACK_GROWTH */
 883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the task name in the TCB. */
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 17


 888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
 890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configMAX_TASK_NAME_LEN characters just in case the memory after the
 891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		string is not accessible (extremely unlikely). */
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pcName[ x ] == 0x00 )
 893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			break;
 895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
 897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
 899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure the name string is terminated in the case that the string length
 903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	was greater or equal to configMAX_TASK_NAME_LEN. */
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* This is used as an array index so must ensure it's not too large.  First
 907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	remove the privilege bit if one is present. */
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
 913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
 915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxNewTCB->uxPriority = uxPriority;
 918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxBasePriority = uxPriority;
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_MUTEXES */
 924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
 929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	back to	the containing TCB from a generic item in a list. */
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Event lists are always in priority order. */
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( Ti
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
 937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
 939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portCRITICAL_NESTING_IN_TCB */
 941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
 943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTaskTag = NULL;
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 18


 945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_APPLICATION_TASK_TAG */
 947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configGENERATE_RUN_TIME_STATS == 1 )
 949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulRunTimeCounter = 0UL;
 951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configGENERATE_RUN_TIME_STATS */
 953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( portUSING_MPU_WRAPPERS == 1 )
 955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth
 957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
 959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Avoid compiler warning about unreferenced parameter. */
 961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xRegions;
 962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
 966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
 975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ulNotifiedValue = 0;
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_NEWLIB_REENTRANT == 1 )
 982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Initialise this task's Newlib reent structure. */
 984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
 989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucDelayAborted = pdFALSE;
 991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
 993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Initialize the TCB stack to look as if the task was already running,
 995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	but had been interrupted by the scheduler.  The return address is set
 996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	to the start of the task function. Once the stack has been initialised
 997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the top of stack variable is updated. */
 998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( portUSING_MPU_WRAPPERS == 1 )
 999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivi
1001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 19


1002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else /* portUSING_MPU_WRAPPERS */
1003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* portUSING_MPU_WRAPPERS */
1007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( ( void * ) pxCreatedTask != NULL )
1009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pass the handle out in an anonymous way.  The handle can be used to
1011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		change the created task's priority, delete the created task, etc.*/
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
1024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	updated. */
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
1026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxCurrentNumberOfTasks++;
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
1029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are no other tasks, or all the other tasks are in
1031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the suspended state - make this the current task. */
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB = pxNewTCB;
1033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* This is the first task to be created so do the preliminary
1037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				initialisation required.  We will not recover if this call
1038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				fails, but we will report the failure. */
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvInitialiseTaskLists();
1040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the scheduler is not already running, make this task the
1049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			current task if it is the highest priority task to be created
1050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			so far. */
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning == pdFALSE )
1052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = pxNewTCB;
1056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 20


1059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxTaskNumber++;
1069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TRACE_FACILITY == 1 )
1071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add a counter into the TCB for tracing only. */
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxNewTCB->uxTCBNumber = uxTaskNumber;
1074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TRACE_FACILITY */
1076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_CREATE( pxNewTCB );
1077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxNewTCB );
1079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portSETUP_TCB( pxNewTCB );
1081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
1083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xSchedulerRunning != pdFALSE )
1085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the created task is of a higher priority than the current task
1087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then it should run now. */
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD_IF_USING_PREEMPTION();
1091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
1098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
1100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
1102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
1105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelete( TaskHandle_t xTaskToDelete )
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the calling task that is
1113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being deleted. */
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
1115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 21


1116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready list. */
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Increment the uxTaskNumber also so kernel aware debuggers can
1137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			detect that the task lists need re-generating.  This is done before
1138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
1139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			not return. */
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxTaskNumber++;
1141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task is deleting itself.  This cannot complete within the
1145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task itself, as a context switch to another task is required.
1146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Place the task in the termination list.  The idle task will
1147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the termination list and free up any memory allocated by
1148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the scheduler for the TCB and stack of the deleted task. */
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
1150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Increment the ucTasksDeleted variable so the idle task knows
1152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				there is a task that has been deleted and that it should therefore
1153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				check the xTasksWaitingTermination list. */
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				++uxDeletedTasksWaitingCleanUp;
1155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The pre-delete hook is primarily for the Windows simulator,
1157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in which Windows specific clean up operations are performed,
1158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				after which it is not possible to yield away from this task -
1159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				hence xYieldPending is used to latch that a context switch is
1160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				required. */
1161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
1162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
1167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Reset the next expected unblock time in case it referred to
1169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that has just been deleted. */
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 22


1173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_DELETE( pxTCB );
1174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if it is the currently running task that has just
1178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been deleted. */
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
1182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
1194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelayUntil == 1 )
1197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
1202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxPreviousWakeTime );
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
1206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
1208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Minor optimisation.  The tick count cannot change in this
1210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			block. */
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const TickType_t xConstTickCount = xTickCount;
1212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the tick time at which the task wants to wake. */
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
1215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xConstTickCount < *pxPreviousWakeTime )
1217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick count has overflowed since this function was
1219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lasted called.  In this case the only time we should ever
1220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				actually delay is if the wake time has also	overflowed,
1221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				and the wake time is greater than the tick time.  When this
1222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is the case it is as if neither time had overflowed. */
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
1224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 23


1230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The tick time has not overflowed.  In this case we will
1235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				delay if either the wake time has overflowed, and/or the
1236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				tick time is less than the wake time. */
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
1238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xShouldDelay = pdTRUE;
1240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Update the wake time ready for the next call. */
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxPreviousWakeTime = xTimeToWake;
1249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xShouldDelay != pdFALSE )
1251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY_UNTIL( xTimeToWake );
1253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* prvAddCurrentTaskToDelayedList() needs the block time, not
1255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the time to wake, so subtract the current tick count. */
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
1257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xAlreadyYielded = xTaskResumeAll();
1264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelayUntil */
1278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelay == 1 )
1281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskDelay( const TickType_t xTicksToDelay )
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
1285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A delay time of zero just forces a reschedule. */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 24


1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTicksToDelay > ( TickType_t ) 0U )
1288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( uxSchedulerSuspended == 0 );
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
1291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_DELAY();
1293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task that is removed from the event list while the
1295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended will not get placed in the ready
1296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list or removed from the blocked list until the scheduler
1297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is resumed.
1298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				This task cannot be in an event list as it is the currently
1300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				executing task. */
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xAlreadyYielded = xTaskResumeAll();
1304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Force a reschedule if xTaskResumeAll has not already done so, we may
1311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have put ourselves to sleep. */
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xAlreadyYielded == pdFALSE )
1313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			portYIELD_WITHIN_API();
1315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelay */
1323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) )
1326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eTaskGetState( TaskHandle_t xTask )
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
1330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	List_t *pxStateList;
1331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
1334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task calling this function is querying its own state. */
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eRunning;
1339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 25


1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
1345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
1349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task being queried is referenced from one of the Blocked
1351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				lists. */
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eBlocked;
1353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxStateList == &xSuspendedTaskList )
1357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the suspended
1359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list.  Is it genuinely suspended or is it block
1360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					indefinitely? */
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
1362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eSuspended;
1364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						eReturn = eBlocked;
1368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskDelete == 1 )
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
1374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task being queried is referenced from the deleted
1376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tasks list, or it is not referenced from any lists at
1377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					all. */
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					eReturn = eDeleted;
1379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
1383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is not in any other state, it must be in the
1385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				Ready (including pending ready) state. */
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eReady;
1387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
1392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_eTaskGetState */
1394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGet( TaskHandle_t xTask )
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 26


1401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
1402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the that
1406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			called uxTaskPriorityGet() that is being queried. */
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskPriorityGet == 1 )
1419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskPriorityGetFromISR( TaskHandle_t xTask )
1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn, uxSavedInterruptState;
1424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
1444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being queried. */
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
1449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
1451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskPriorityGet */
1456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 27


1458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskPrioritySet == 1 )
1459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
1467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Ensure the new priority is valid. */
1469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
1479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the priority of the calling
1481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is being changed. */
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTask );
1483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
1485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( configUSE_MUTEXES == 1 )
1487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxBasePriority;
1489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
1491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxCurrentBasePriority = pxTCB->uxPriority;
1493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentBasePriority != uxNewPriority )
1497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The priority change may have readied a task of higher
1499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority than the calling task. */
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxNewPriority > uxCurrentBasePriority )
1501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB != pxCurrentTCB )
1503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of a task other than the currently
1505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						running task is being raised.  Is the priority being
1506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						raised above that of the running task? */
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxNewPriority >= pxCurrentTCB->uxPriority )
1508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xYieldRequired = pdTRUE;
1510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
1511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
1512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
1513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
1514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 28


1515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The priority of the running task is being raised,
1519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but the running task must already be the highest
1520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority task able to run so no yield is required. */
1521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else if( pxTCB == pxCurrentTCB )
1524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of the running task down means
1526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					there may now be another task of higher priority that
1527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is ready to execute. */
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xYieldRequired = pdTRUE;
1529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Setting the priority of any other task down does not
1533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					require a yield as the running task must be above the
1534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new priority of the task being modified. */
1535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remember the ready list the task might be referenced from
1538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				before its uxPriority member is changed so the
1539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY() macro can function correctly. */
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityUsedOnEntry = pxTCB->uxPriority;
1541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configUSE_MUTEXES == 1 )
1543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only change the priority being used if the task is not
1545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					currently using an inherited priority. */
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
1547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->uxPriority = uxNewPriority;
1549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority gets set whatever. */
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxBasePriority = uxNewPriority;
1557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
1559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxNewPriority;
1561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
1563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only reset the event list item value if the value is not
1565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				being used for anything else. */
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE 
1567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - (
1569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 29


1572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task is in the blocked or suspended list we need do
1576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing more than change its priority variable. However, if
1577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task is in a ready list it needs to be removed and placed
1578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				in the list appropriate to its new priority. */
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateL
1580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is currently in its ready list - remove before
1582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					adding it to it's new ready list.  As we are in a critical
1583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section we can do this even if the scheduler is suspended. */
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is known that the task is in its ready list so
1587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						there is no need to check again and the port level
1588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						reset macro can be called directly. */
1589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
1590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldRequired != pdFALSE )
1603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
1605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove compiler warning about unused variables when the port
1612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				optimised task selection is not being used. */
1613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxPriorityUsedOnEntry;
1614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskPrioritySet */
1620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
1627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 30


1629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If null is passed in here then it is the running task that is
1631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			being suspended. */
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
1633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_SUSPEND( pxTCB );
1635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Remove task from the ready/delayed list and place in the
1637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			suspended list. */
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is the task waiting on an event also? */
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
1658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( configUSE_TASK_NOTIFICATIONS == 1 )
1660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
1662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task was blocked to wait for a notification, but is
1664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					now suspended, so no notification was received. */
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
1669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
1671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
1673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Reset the next expected unblock time in case it referred to the
1675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task that is now in the Suspended state. */
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvResetNextTaskUnblockTime();
1679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 31


1686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTCB == pxCurrentTCB )
1688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xSchedulerRunning != pdFALSE )
1690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The current task has just been suspended. */
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( uxSchedulerSuspended == 0 );
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
1694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The scheduler is not running, but the task that was pointed
1698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to by pxCurrentTCB has just been suspended and pxCurrentTCB
1699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be adjusted to point to a different task. */
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
1701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* No other tasks are ready, so set pxCurrentTCB back to
1703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					NULL so when the next task is created pxCurrentTCB will
1704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be set to point to it no matter what its relative priority
1705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is. */
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB = NULL;
1707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vTaskSwitchContext();
1711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
1726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
  27              		.loc 1 1726 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
1728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
1729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Accesses xPendingReadyList so must be called from a critical
1731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		section. */
1732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to check if the calling task is suspended. */
1734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTask );
  33              		.loc 1 1734 0
  34 0000 0246     		mov	r2, r0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 32


  35 0002 70B1     		cbz	r0, .L12
1735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Is the task being resumed actually in the suspended list? */
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
  36              		.loc 1 1737 0
  37 0004 4169     		ldr	r1, [r0, #20]
  38 0006 0F4B     		ldr	r3, .L15
  39 0008 9942     		cmp	r1, r3
  40 000a 13D0     		beq	.L13
  41 000c 0023     		movs	r3, #0
  42              	.L4:
  43              		.loc 1 1737 0 is_stmt 0 discriminator 4
  44 000e ABB1     		cbz	r3, .L8
1738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the task already been resumed from within an ISR? */
1740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
  45              		.loc 1 1740 0 is_stmt 1
  46 0010 926A     		ldr	r2, [r2, #40]
  47 0012 0D49     		ldr	r1, .L15+4
  48 0014 8A42     		cmp	r2, r1
  49 0016 13D0     		beq	.L9
1741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is it in the suspended list because it is in the	Suspended
1743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				state, or because is is blocked with no timeout? */
1744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The
  50              		.loc 1 1744 0
  51 0018 02B1     		cbz	r2, .L6
  52 001a 0023     		movs	r3, #0
  53              	.L6:
  54              		.loc 1 1744 0 is_stmt 0 discriminator 4
  55 001c 63B1     		cbz	r3, .L14
1745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
  56              		.loc 1 1746 0 is_stmt 1
  57 001e 0120     		movs	r0, #1
  58              	.LVL1:
1747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
1764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
  59              		.loc 1 1764 0
  60 0020 7047     		bx	lr
  61              	.LVL2:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 33


  62              	.L12:
  63              	.LBB113:
  64              	.LBB114:
  65              		.file 2 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h"
   1:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*
   2:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FreeRTOS Kernel V10.0.1
   3:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Copyright (C) 2017 Amazon.com, Inc. or its affiliates.  All Rights Reserved.
   4:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
   5:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Permission is hereby granted, free of charge, to any person obtaining a copy of
   6:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * this software and associated documentation files (the "Software"), to deal in
   7:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software without restriction, including without limitation the rights to
   8:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
   9:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * the Software, and to permit persons to whom the Software is furnished to do so,
  10:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * subject to the following conditions:
  11:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  12:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The above copyright notice and this permission notice shall be included in all
  13:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * copies or substantial portions of the Software.
  14:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  15:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  16:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
  17:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
  18:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
  19:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
  20:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  21:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  22:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://www.FreeRTOS.org
  23:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * http://aws.amazon.com/freertos
  24:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  25:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * 1 tab == 4 spaces!
  26:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  27:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  28:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  29:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef PORTMACRO_H
  30:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define PORTMACRO_H
  31:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  32:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef __cplusplus
  33:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern "C" {
  34:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  35:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  36:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------
  37:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * Port specific definitions.
  38:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  39:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * The settings in this file configure FreeRTOS correctly for the
  40:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * given hardware and compiler.
  41:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *
  42:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  * These settings should not be altered.
  43:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  *-----------------------------------------------------------
  44:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h ****  */
  45:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  46:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Type definitions. */
  47:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCHAR		char
  48:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portFLOAT		float
  49:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDOUBLE		double
  50:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portLONG		long
  51:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSHORT		short
  52:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_TYPE	uint32_t
  53:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBASE_TYPE	long
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 34


  54:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  55:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef portSTACK_TYPE StackType_t;
  56:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef long BaseType_t;
  57:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** typedef unsigned long UBaseType_t;
  58:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  59:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if( configUSE_16_BIT_TICKS == 1 )
  60:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint16_t TickType_t;
  61:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffff
  62:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #else
  63:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	typedef uint32_t TickType_t;
  64:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portMAX_DELAY ( TickType_t ) 0xffffffffUL
  65:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  66:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* 32-bit tick type on a 32-bit architecture, so reads of the tick count do
  67:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	not need to be guarded with a critical section. */
  68:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portTICK_TYPE_IS_ATOMIC 1
  69:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
  70:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  71:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  72:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specifics. */
  73:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSTACK_GROWTH			( -1 )
  74:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTICK_PERIOD_MS			( ( TickType_t ) 1000 / configTICK_RATE_HZ )
  75:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portBYTE_ALIGNMENT			8
  76:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  77:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  78:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Scheduler utilities. */
  79:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD() 															\
  80:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {																				\
  81:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Set a PendSV to request a context switch. */								\
  82:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;								\
  83:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 																				\
  84:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Barriers are normally not required but do ensure the code is completely	\
  85:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	within the specified behaviour for the architecture. */						\
  86:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "dsb" ::: "memory" );										\
  87:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "isb" );													\
  88:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
  89:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  90:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_INT_CTRL_REG		( * ( ( volatile uint32_t * ) 0xe000ed04 ) )
  91:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNVIC_PENDSVSET_BIT		( 1UL << 28UL )
  92:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEND_SWITCHING_ISR( xSwitchRequired ) if( xSwitchRequired != pdFALSE ) portYIELD()
  93:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portYIELD_FROM_ISR( x ) portEND_SWITCHING_ISR( x )
  94:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
  95:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
  96:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Critical section management. */
  97:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortEnterCritical( void );
  98:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** extern void vPortExitCritical( void );
  99:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portSET_INTERRUPT_MASK_FROM_ISR()		ulPortRaiseBASEPRI()
 100:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portCLEAR_INTERRUPT_MASK_FROM_ISR(x)	vPortSetBASEPRI(x)
 101:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portDISABLE_INTERRUPTS()				vPortRaiseBASEPRI()
 102:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENABLE_INTERRUPTS()					vPortSetBASEPRI(0)
 103:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portENTER_CRITICAL()					vPortEnterCritical()
 104:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portEXIT_CRITICAL()						vPortExitCritical()
 105:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 106:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 107:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 108:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Task function macros as described on the FreeRTOS.org WEB site.  These are
 109:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** not necessary for to use this port.  They are defined so the common demo files
 110:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** (which build with all the ports) will build. */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 35


 111:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION_PROTO( vFunction, pvParameters ) void vFunction( void *pvParameters )
 112:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portTASK_FUNCTION( vFunction, pvParameters ) void vFunction( void *pvParameters )
 113:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 114:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 115:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Tickless idle/low power functionality. */
 116:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portSUPPRESS_TICKS_AND_SLEEP
 117:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	extern void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime );
 118:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime ) vPortSuppressTicksAndSleep( xExpectedIdl
 119:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 120:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 121:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 122:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* Architecture specific optimisations. */
 123:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef configUSE_PORT_OPTIMISED_TASK_SELECTION
 124:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define configUSE_PORT_OPTIMISED_TASK_SELECTION 1
 125:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 126:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 127:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #if configUSE_PORT_OPTIMISED_TASK_SELECTION == 1
 128:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 129:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Generic helper function. */
 130:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitma
 131:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 132:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	uint8_t ucReturn;
 133:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 134:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 135:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		return ucReturn;
 136:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 137:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 138:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Check the configuration. */
 139:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#if( configMAX_PRIORITIES > 32 )
 140:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		#error configUSE_PORT_OPTIMISED_TASK_SELECTION can only be set to 1 when configMAX_PRIORITIES is 
 141:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#endif
 142:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 143:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Store/clear the ready priorities in a bit map. */
 144:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRECORD_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) |= ( 1UL 
 145:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portRESET_READY_PRIORITY( uxPriority, uxReadyPriorities ) ( uxReadyPriorities ) &= ~( 1UL 
 146:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 147:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/*-----------------------------------------------------------*/
 148:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 149:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portGET_HIGHEST_PRIORITY( uxTopPriority, uxReadyPriorities ) uxTopPriority = ( 31UL - ( ui
 150:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 151:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif /* configUSE_PORT_OPTIMISED_TASK_SELECTION */
 152:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 153:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 154:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 155:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifdef configASSERT
 156:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	void vPortValidateInterruptPriority( void );
 157:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portASSERT_IF_INTERRUPT_PRIORITY_INVALID() 	vPortValidateInterruptPriority()
 158:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
 159:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 160:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /* portNOP() is not required by this port. */
 161:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portNOP()
 162:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 163:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #define portINLINE	__inline
 164:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 165:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #ifndef portFORCE_INLINE
 166:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	#define portFORCE_INLINE inline __attribute__(( always_inline))
 167:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** #endif
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 36


 168:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 169:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static BaseType_t xPortIsInsideInterrupt( void )
 170:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 171:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulCurrentInterrupt;
 172:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** BaseType_t xReturn;
 173:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 174:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* Obtain the number of the currently executing interrupt. */
 175:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 176:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 177:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	if( ulCurrentInterrupt == 0 )
 178:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 179:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdFALSE;
 180:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 181:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	else
 182:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	{
 183:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		xReturn = pdTRUE;
 184:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	}
 185:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 186:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return xReturn;
 187:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 188:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 189:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 190:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 191:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortRaiseBASEPRI( void )
 192:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 193:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulNewBASEPRI;
 194:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
  66              		.loc 2 195 0
  67              		.syntax unified
  68              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
  69 0022 4FF05003 			mov r3, #80												
  70 0026 83F31188 		msr basepri, r3											
  71 002a BFF36F8F 		isb														
  72 002e BFF34F8F 		dsb														
  73              	
  74              	@ 0 "" 2
  75              	.LVL3:
  76              		.thumb
  77              		.syntax unified
  78              	.L3:
  79 0032 FEE7     		b	.L3
  80              	.L13:
  81              	.LBE114:
  82              	.LBE113:
1737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
  83              		.loc 1 1737 0
  84 0034 0123     		movs	r3, #1
  85 0036 EAE7     		b	.L4
  86              	.L14:
1727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const TCB_t * const pxTCB = ( TCB_t * ) xTask;
  87              		.loc 1 1727 0
  88 0038 0020     		movs	r0, #0
  89              	.LVL4:
  90 003a 7047     		bx	lr
  91              	.LVL5:
  92              	.L8:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 37


  93 003c 0020     		movs	r0, #0
  94              	.LVL6:
  95 003e 7047     		bx	lr
  96              	.LVL7:
  97              	.L9:
  98 0040 0020     		movs	r0, #0
  99              	.LVL8:
 100 0042 7047     		bx	lr
 101              	.L16:
 102              		.align	2
 103              	.L15:
 104 0044 00000000 		.word	.LANCHOR0
 105 0048 00000000 		.word	.LANCHOR1
 106              		.cfi_endproc
 107              	.LFE16:
 109              		.section	.text.prvTaskCheckFreeStackSpace,"ax",%progbits
 110              		.align	1
 111              		.syntax unified
 112              		.thumb
 113              		.thumb_func
 114              		.fpu fpv4-sp-d16
 116              	prvTaskCheckFreeStackSpace:
 117              	.LFB46:
1765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskSuspend == 1 )
1770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskResume( TaskHandle_t xTaskToResume )
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* It does not make sense to resume the calling task. */
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The parameter cannot be NULL as it is impossible to resume the
1779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		currently executing task. */
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
1781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
1783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_RESUME( pxTCB );
1787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The ready list can be accessed even if the scheduler is
1789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended because this is inside a critical section. */
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A higher priority task may have just been resumed. */
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* This yield may not cause the task just resumed to run,
1797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						but will leave the lists in the correct state for the
1798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						next yield. */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 38


1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskYIELD_IF_USING_PREEMPTION();
1800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
1809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
1812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskSuspend */
1820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )
1824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
1828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
1829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
1830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToResume );
1832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
1834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
1835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
1836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
1837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
1838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
1839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
1840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
1841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
1842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
1843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
1844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
1845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
1846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
1847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
1848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
1852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
1854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_RESUME_FROM_ISR( pxTCB );
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 39


1856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check the ready lists can be accessed. */
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Ready lists can be accessed so move the task from the
1861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					suspended list to the ready list directly. */
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldRequired = pdTRUE;
1865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
1867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
1868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
1869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
1870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
1873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
1875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
1876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed or ready lists cannot be accessed so the task
1877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					is held in the pending ready list until the scheduler is
1878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unsuspended. */
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
1880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
1881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
1883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
1884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
1885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
1886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
1888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xYieldRequired;
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
1893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
1894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskStartScheduler( void )
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
1897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
1898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Add the idle task at the lowest priority. */
1900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
1901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
1904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
1905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is created using user provided RAM - obtain the
1907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		address of the RAM then create the idle task. */
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
1911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												ulIdleTaskStackSize,
1912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 40


1913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskStackBuffer,
1915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant
1916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIdleTaskHandle != NULL )
1918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
1920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
1924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#else
1927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The Idle task is being created using dynamically allocated RAM. */
1929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTaskCreate(	prvIdleTask,
1930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configIDLE_TASK_NAME,
1931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								configMINIMAL_STACK_SIZE,
1932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( void * ) NULL,
1933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
1934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								&xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explic
1935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configSUPPORT_STATIC_ALLOCATION */
1937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_TIMERS == 1 )
1939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xReturn == pdPASS )
1941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTimerCreateTimerTask();
1943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
1947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
1949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_TIMERS */
1950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( xReturn == pdPASS )
1952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
1953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* freertos_tasks_c_additions_init() should only be called if the user
1954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		definable macro FREERTOS_TASKS_C_ADDITIONS_INIT() is defined, as that is
1955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the only macro called by the function. */
1956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#ifdef FREERTOS_TASKS_C_ADDITIONS_INIT
1957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			freertos_tasks_c_additions_init();
1959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
1961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Interrupts are turned off here, to ensure a tick does not occur
1963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		before or during the call to xPortStartScheduler().  The stacks of
1964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the created tasks contain a status word with interrupts switched on
1965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		so interrupts will automatically get re-enabled when the first task
1966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		starts to run. */
1967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
1968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 41


1970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
1972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to the task that will run first. */
1973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
1974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
1976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
1980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If configGENERATE_RUN_TIME_STATS is defined then the following
1982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		macro must be defined to configure the timer/counter used to generate
1983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
1984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is set to 0 and the following line fails to build then ensure you do not
1985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
1986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		FreeRTOSConfig.h file. */
1987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
1988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
1989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Setting up the timer tick is hardware specific and thus in the
1990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portable interface. */
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xPortStartScheduler() != pdFALSE )
1992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should not reach here as if the scheduler is running the
1994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function will not return. */
1995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
1996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
1997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
1998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Should only reach here if a task calls xTaskEndScheduler(). */
1999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This line will only be reached if the kernel could not be started,
2004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		because there was not enough FreeRTOS heap to create the idle task
2005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		or the timer task. */
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
2007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
2010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	meaning xIdleTaskHandle is not used anywhere else. */
2011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) xIdleTaskHandle;
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskEndScheduler( void )
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
2018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	routine so the original ISRs can be restored if necessary.  The port
2019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	layer must ensure interrupts enable	bit is left in the correct state. */
2020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portDISABLE_INTERRUPTS();
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xSchedulerRunning = pdFALSE;
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
2023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSuspendAll( void )
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 42


2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
2029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t.  Please read Richard Barry's reply in the following link to a
2030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	post in the FreeRTOS support forum before reporting this as a bug! -
2031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	http://goo.gl/wu4acr */
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	++uxSchedulerSuspended;
2033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TickType_t prvGetExpectedIdleTime( void )
2039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xReturn;
2041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
2042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxHigherPriorityReadyTasks takes care of the case where
2044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_PREEMPTION is 0, so there may be tasks above the idle priority
2045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		task that are in the Ready state, even though the idle task is
2046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		running. */
2047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_PORT_OPTIMISED_TASK_SELECTION == 0 )
2048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > tskIDLE_PRIORITY )
2050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
2055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
2057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When port optimised task selection is used the uxTopReadyPriority
2059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			variable is used as a bit map.  If bits other than the least
2060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			significant bit are set then there are tasks that have a priority
2061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			above the idle priority that are in the Ready state.  This takes
2062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			care of the case where the co-operative scheduler is in use. */
2063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxTopReadyPriority > uxLeastSignificantBit )
2064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxHigherPriorityReadyTasks = pdTRUE;
2066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
2071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
2075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are other idle priority tasks in the ready state.  If
2077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			time slicing is used then the very next tick interrupt must be
2078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			processed. */
2079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( uxHigherPriorityReadyTasks != pdFALSE )
2082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* There are tasks in the Ready state that have a priority above the
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 43


2084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			idle priority.  This path can only be reached if
2085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configUSE_PREEMPTION is 0. */
2086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = 0;
2087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xNextTaskUnblockTime - xTickCount;
2091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskResumeAll( void )
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xAlreadyYielded = pdFALSE;
2103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If uxSchedulerSuspended is zero then this function does not match a
2105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	previous call to vTaskSuspendAll(). */
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended );
2107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* It is possible that an ISR caused a task to be removed from an event
2109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list while the scheduler was suspended.  If this was the case then the
2110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	removed task will have been added to the xPendingReadyList.  Once the
2111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler has been resumed it is safe to move all the pending ready
2112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks from this list into their appropriate ready list. */
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
2114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		--uxSchedulerSuspended;
2116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
2120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Move any readied tasks from the pending list into the
2122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				appropriate ready list. */
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
2124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the moved task has a priority higher than the current
2131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					task then a yield must be performed. */
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 44


2141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task was unblocked while the scheduler was suspended,
2145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					which may have prevented the next unblock time from being
2146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					re-calculated, in which case re-calculate it now.  Mainly
2147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					important for low power tickless implementations, where
2148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this can prevent an unnecessary exit from low power
2149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
2151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If any ticks occurred while the scheduler was suspended then
2154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				they should be processed now.  This ensures the tick count does
2155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not	slip, and that any delayed tasks are resumed at the correct
2156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				time. */
2157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
2159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxPendedCounts > ( UBaseType_t ) 0U )
2161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						do
2163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( xTaskIncrementTick() != pdFALSE )
2165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								xYieldPending = pdTRUE;
2167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							else
2169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
2170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								mtCOVERAGE_TEST_MARKER();
2171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
2172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							--uxPendedCounts;
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						} while( uxPendedCounts > ( UBaseType_t ) 0U );
2174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						uxPendedTicks = 0;
2176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xYieldPending != pdFALSE )
2184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if( configUSE_PREEMPTION != 0 )
2186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xAlreadyYielded = pdTRUE;
2188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
2191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 45


2198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
2204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xAlreadyYielded;
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCount( void )
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
2212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Critical section required if running on a 16 bit processor. */
2214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_ENTER_CRITICAL();
2215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTicks = xTickCount;
2217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_EXIT_CRITICAL();
2219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xTicks;
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTaskGetTickCountFromISR( void )
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
2227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxSavedInterruptStatus;
2228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* RTOS ports that support interrupt nesting have the concept of a maximum
2230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call (or maximum API call) interrupt priority.  Interrupts that are
2231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	above the maximum system call priority are kept permanently enabled, even
2232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	when the RTOS kernel is in a critical section, but cannot make any calls to
2233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
2234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
2235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	failure if a FreeRTOS API function is called from an interrupt that has been
2236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	assigned a priority above the configured maximum system call priority.
2237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Only FreeRTOS functions that end in FromISR can be called from interrupts
2238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	that have been assigned a priority at or (logically) below the maximum
2239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
2240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	safe API to ensure interrupt entry is as fast and as simple as possible.
2241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	More information (albeit Cortex-M specific) is provided on the following
2242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
2244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
2246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = xTickCount;
2248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
2250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 46


2255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxTaskGetNumberOfTasks( void )
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
2258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t. */
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxCurrentNumberOfTasks;
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed fo
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
2266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* If null is passed in here then the name of the calling task is being
2268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queried. */
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
2271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
2278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
2280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t x;
2281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cNextChar;
2282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function is called with the scheduler suspended. */
2284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
2286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
2288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
2292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Check each character in the name looking for a match or
2294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mismatch. */
2295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
2296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					cNextChar = pxNextTCB->pcTaskName[ x ];
2298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( cNextChar != pcNameToQuery[ x ] )
2300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Characters didn't match. */
2302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else if( cNextChar == 0x00 )
2305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Both strings terminated, a match must have been
2307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						found. */
2308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxReturn = pxNextTCB;
2309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 47


2312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxReturn != NULL )
2318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The handle has been found. */
2320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
2324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxReturn;
2331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetHandle == 1 )
2337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are a
2339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxQueue = configMAX_PRIORITIES;
2341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t* pxTCB;
2342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
2344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
2345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the ready lists. */
2349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
2350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxQueue--;
2352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNam
2353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB != NULL )
2355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Found the handle. */
2357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts
2361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Search the delayed lists. */
2363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
2364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
2366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == NULL )
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 48


2369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery
2371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( INCLUDE_vTaskSuspend == 1 )
2374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the suspended list. */
2378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
2379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if( INCLUDE_vTaskDelete == 1 )
2384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB == NULL )
2386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Search the deleted list. */
2388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
2389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
2392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( TaskHandle_t ) pxTCB;
2396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetHandle */
2399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
2402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArra
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
2406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Is there a space in the array for each task in the system? */
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxArraySize >= uxCurrentNumberOfTasks )
2411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Ready state. */
2414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				do
2415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxQueue--;
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
2418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the cast
2420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Fill in an TaskStatus_t structure with information on each
2422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				task in the Blocked state. */
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelaye
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
2425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 49


2426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( INCLUDE_vTaskDelete == 1 )
2427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task that has been deleted but not yet cleaned up. */
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermin
2431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
2435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Fill in an TaskStatus_t structure with information on
2437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					each task in the Suspended state. */
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList,
2439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( configGENERATE_RUN_TIME_STATS == 1)
2443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
2448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
2449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
2451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pulTotalRunTime != NULL )
2456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pulTotalRunTime = 0;
2458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
2473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
2476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetIdleTaskHandle( void )
2478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
2480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		started, then xIdleTaskHandle will be NULL. */
2481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xIdleTaskHandle != NULL ) );
2482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xIdleTaskHandle;
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 50


2483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskGetIdleTaskHandle */
2486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /* This conditional compilation should use inequality to 0, not equality to 1.
2489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** This is to ensure vTaskStepTick() is available when user defined low power mode
2490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** implementations require configUSE_TICKLESS_IDLE to be set to a value other than
2491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 1. */
2492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TICKLESS_IDLE != 0 )
2493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskStepTick( const TickType_t xTicksToJump )
2495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Correct the tick count value after a period during which the tick
2497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		was suppressed.  Note this does *not* call the tick hook function for
2498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		each stepped tick. */
2499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
2500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount += xTicksToJump;
2501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceINCREASE_TICK_COUNT( xTicksToJump );
2502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
2505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_xTaskAbortDelay == 1 )
2508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskAbortDelay( TaskHandle_t xTask )
2510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB = ( TCB_t * ) xTask;
2512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTCB );
2515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vTaskSuspendAll();
2517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only be prematurely removed from the Blocked state if
2519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			it is actually in the Blocked state. */
2520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( eTaskGetState( xTask ) == eBlocked )
2521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
2523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Remove the reference to the task from the blocked list.  An
2525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				interrupt won't touch the xStateListItem because the
2526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				scheduler is suspended. */
2527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Is the task waiting on an event also?  If so remove it from
2530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the event list too.  Interrupts can touch the event list item,
2531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				even though the scheduler is suspended, so a critical section
2532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
2533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskENTER_CRITICAL();
2534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ucDelayAborted = pdTRUE;
2539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 51


2540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskEXIT_CRITICAL();
2546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Place the unblocked task into the appropriate ready list. */
2548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
2549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A task being unblocked cannot cause an immediate context
2551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch if preemption is turned off. */
2552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if (  configUSE_PREEMPTION == 1 )
2553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Preemption is on, but a context switch should only be
2555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					performed if the unblocked task has a priority that is
2556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					equal to or higher than the currently executing task. */
2557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
2558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Pend the yield to be performed when the scheduler
2560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						is unsuspended. */
2561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
2562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* configUSE_PREEMPTION */
2569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
2573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) xTaskResumeAll();
2576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_xTaskAbortDelay */
2581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
2582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskIncrementTick( void )
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
2586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xItemValue;
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xSwitchRequired = pdFALSE;
2588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Called by the portable layer each time a tick interrupt occurs.
2590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	Increments the tick then checks to see if the new tick value will cause any
2591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	tasks to be unblocked. */
2592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	traceTASK_INCREMENT_TICK( xTickCount );
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
2594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this
2596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		block. */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 52


2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
2598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Increment the RTOS tick, switching the delayed and overflowed
2600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		delayed lists if it wraps to 0. */
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = xConstTickCount;
2602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as
2604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskSWITCH_DELAYED_LISTS();
2606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if this tick has made a timeout expire.  Tasks are stored in
2613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the	queue in the order of their wake time - meaning once one task
2614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		has been found whose block time has not expired there is no need to
2615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		look any further down the list. */
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xConstTickCount >= xNextTaskUnblockTime )
2617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( ;; )
2619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
2621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is empty.  Set xNextTaskUnblockTime
2623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					to the maximum possible value so it is extremely
2624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					unlikely that the
2625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xTickCount >= xNextTaskUnblockTime ) test will pass
2626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					next time through. */
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redun
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
2629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed list is not empty, get the value of the
2633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					item at the head of the delayed list.  This is the time
2634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					at which the task at the head of the delayed list must
2635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be removed from the Blocked state. */
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
2638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xConstTickCount < xItemValue )
2640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* It is not time to unblock this item yet, but the
2642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						item value is the time at which the task at the head
2643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						of the blocked list must be removed from the Blocked
2644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						state -	so record the item value in
2645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime. */
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xNextTaskUnblockTime = xItemValue;
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
2648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 53


2654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* It is time to remove the item from the Blocked state. */
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
2656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Is the task waiting on an event also?  If so remove
2658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it from the event list. */
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
2660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
2662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
2664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
2666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Place the unblocked task into the appropriate ready
2669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					list. */
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
2671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task being unblocked cannot cause an immediate
2673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					context switch if preemption is turned off. */
2674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#if (  configUSE_PREEMPTION == 1 )
2675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
2676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Preemption is on, but a context switch should
2677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						only be performed if the unblocked task has a
2678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						priority that is equal to or higher than the
2679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						currently executing task. */
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
2681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							xSwitchRequired = pdTRUE;
2683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
2685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
2686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
2687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
2688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
2689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					#endif /* configUSE_PREEMPTION */
2690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Tasks of equal priority to the currently running task will share
2695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		processing time (time slice) if preemption is on, and the application
2696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		writer has not explicitly turned time slicing off. */
2697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
2698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_
2700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xSwitchRequired = pdTRUE;
2702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
2709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 54


2711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Guard against the tick hook being called when the pended tick
2713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			count is being unwound (when the scheduler is being unlocked). */
2714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxPendedTicks == ( UBaseType_t ) 0U )
2715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vApplicationTickHook();
2717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
2719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
2720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
2721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
2722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICK_HOOK */
2724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		++uxPendedTicks;
2728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The tick hook gets called at regular intervals, even if the
2730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler is locked. */
2731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICK_HOOK == 1 )
2732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationTickHook();
2734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
2736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_PREEMPTION == 1 )
2739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xYieldPending != pdFALSE )
2741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xSwitchRequired = pdTRUE;
2743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
2747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* configUSE_PREEMPTION */
2750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xSwitchRequired;
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
2758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then it is the task hook of the calling task that is
2762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		getting set. */
2763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 55


2768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB->pxTaskTag = pxHookFunction;
2776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xTaskGetApplicationTaskTag( TaskHandle_t xTask )
2785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHookFunction_t xReturn;
2788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are setting our own task hook. */
2790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Save the hook function in the TCB.  A critical section is required as
2800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the value can be accessed from an interrupt. */
2801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
2802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag;
2804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
2806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_APPLICATION_TASK_TAG == 1 )
2814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
2816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *xTCB;
2818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
2819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xTask is NULL then we are calling our own task hook. */
2821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask == NULL )
2822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) pxCurrentTCB;
2824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 56


2825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTCB = ( TCB_t * ) xTask;
2828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTCB->pxTaskTag != NULL )
2831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = xTCB->pxTaskTag( pvParameter );
2833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
2835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFAIL;
2837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
2840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_APPLICATION_TASK_TAG */
2843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSwitchContext( void )
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
2848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The scheduler is currently suspended - do not allow a context
2850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		switch. */
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
2852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
2854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdFALSE;
2856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
2857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
2859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
2861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
2862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#else
2863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
2864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
2865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Add the amount of time the task has been running to the
2867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				accumulated time so far.  The time the task started running was
2868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				stored in ulTaskSwitchedInTime.  Note that there is no overflow
2869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				protection here so count values are only valid until the timer
2870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				overflows.  The guard against negative values is to protect
2871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				against suspect run time stat counter implementations - which
2872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				are provided by the application, not the kernel. */
2873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ulTotalRunTime > ulTaskSwitchedInTime )
2874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
2876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
2878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
2879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
2880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
2881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				ulTaskSwitchedInTime = ulTotalRunTime;
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 57


2882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configGENERATE_RUN_TIME_STATS */
2884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Check for stack overflow, if configured. */
2886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskCHECK_FOR_STACK_OVERFLOW();
2887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Select a new task to run using either the generic C or port
2889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		optimised asm code. */
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskSELECT_HIGHEST_PRIORITY_TASK();
2891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
2892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
2894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Switch Newlib's _impure_ptr variable to point to the _reent
2896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			structure specific to this task. */
2897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
2898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
2900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
2909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
2910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB in the appropriate event list.
2912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This is placed in the list in priority order so the highest priority task
2913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	is the first to be woken by the event.  The queue that contains the event
2914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list is locked, preventing simultaneous access from interrupts. */
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickT
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
2924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
2926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event groups implementation. */
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != 0 );
2928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the item value in the event list item.  It is safe to access the
2930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event list item here as interrupts won't access the event list item of a
2931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	task that is not in the Blocked state. */
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE
2933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Place the event list item of the TCB at the end of the appropriate event
2935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	list.  It is safe to access the event list here because it is part of an
2936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event group implementation - and interrupts don't access event groups
2937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	directly (instead they access them indirectly by pending function calls to
2938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the task level). */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 58


2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
2942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
2943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TIMERS == 1 )
2946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const B
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
2950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This function should not be called by application code hence the
2952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		'Restricted' in its name.  It is not part of the public API.  It is
2953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		designed for use by kernel code, and has special calling requirements -
2954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should be called with the scheduler suspended. */
2955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Place the event list item of the TCB in the appropriate event list.
2958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		In this case it is assume that this is the only task that is going to
2959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		be waiting on this event list, so the faster vListInsertEnd() function
2960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		can be used in place of vListInsert. */
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
2962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the task should block indefinitely then set the block time to a
2964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value that will be recognised as an indefinite delay inside the
2965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList() function. */
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xWaitIndefinitely != pdFALSE )
2967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTicksToWait = portMAX_DELAY;
2969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
2970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
2973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
2974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TIMERS */
2976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
2977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
2980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
2981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
2982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
2984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	called from a critical section within an ISR. */
2985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The event list is sorted in priority order, so the first in the list can
2987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	be removed as it is known to be the highest priority.  Remove the TCB from
2988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the delayed list, and add it to the ready list.
2989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	If an event is for a queue that is locked then this function will never
2991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	get called - the lock count on the queue will get modified instead.  This
2992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	means exclusive access to the event list is guaranteed here.
2993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
2994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	This function assumes that a check has already been made to ensure that
2995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxEventList is not empty. */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 59


2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
2999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
3004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The delayed and ready lists cannot be accessed, so hold this task
3008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pending until the scheduler is resumed. */
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
3010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return true if the task removed from the event list has a higher
3015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority than the calling task.  This allows the calling task to know if
3016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		it should force a context switch now. */
3017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdTRUE;
3018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Mark that a yield is pending in case the user is not using the
3020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pdFALSE;
3026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( configUSE_TICKLESS_IDLE != 0 )
3029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
3031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		might be set to the blocked task's time out time.  If the task is
3032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		unblocked for a reason other than a timeout xNextTaskUnblockTime is
3033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		normally left unchanged, because it is automatically reset to a new
3034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value when the tick count equals xNextTaskUnblockTime.  However if
3035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		tickless idling is used it might be more important to enter sleep mode
3036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		at the earliest possible time - so reset xNextTaskUnblockTime here to
3037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ensure it is updated at the earliest possible time. */
3038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvResetNextTaskUnblockTime();
3039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
3041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
3049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
3051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the event flags implementation. */
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( uxSchedulerSuspended != pdFALSE );
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 60


3053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Store the new item value in the event list. */
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
3056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the event list form the event flag.  Interrupts do not access
3058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	event flags. */
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
3062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the delayed list and add it to the ready list.  The
3064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	scheduler is suspended so interrupts will not be accessing the ready
3065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	lists. */
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
3068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
3070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The unblocked task has a priority above that of the calling task, so
3072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		a context switch is required.  This function is called with the
3073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		scheduler suspended so xYieldPending is set so the context switch
3074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		occurs immediately that the scheduler is resumed (unsuspended). */
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xYieldPending = pdTRUE;
3076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xOverflowCount = xNumOfOverflows;
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
3087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xOverflowCount = xNumOfOverflows;
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
3097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
3103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
3106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
3108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Minor optimisation.  The tick count cannot change in this block. */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 61


3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xConstTickCount = xTickCount;
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
3112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( INCLUDE_xTaskAbortDelay == 1 )
3114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
3115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The delay was aborted, which is not the same as a time out,
3117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				but has the same result. */
3118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucDelayAborted = pdFALSE;
3119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( INCLUDE_vTaskSuspend == 1 )
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( *pxTicksToWait == portMAX_DELAY )
3126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
3128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				specified is the maximum block time then the task should block
3129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				indefinitely, and therefore never time out. */
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
3131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEn
3136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The tick count is greater than the time at which
3138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeout() was called, but has also overflowed since
3139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSetTimeOut() was called.  It must have wrapped all the way
3140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			around and gone past again. This passed since vTaskSetTimeout()
3141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			was called. */
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with som
3145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Not a genuine timeout. Adjust parameters for time remaining. */
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait -= xElapsedTime;
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
3150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			*pxTicksToWait = 0;
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
3155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskEXIT_CRITICAL();
3158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return xReturn;
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** void vTaskMissedYield( void )
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
3166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 62


3167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetTaskNumber( TaskHandle_t xTask )
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxTaskNumber;
3180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = 0U;
3184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetTaskNumber( TaskHandle_t xTask, const UBaseType_t uxHandle )
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTask != NULL )
3199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = ( TCB_t * ) xTask;
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->uxTaskNumber = uxHandle;
3202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*
3208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * -----------------------------------------------------------
3209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The Idle task.
3210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * ----------------------------------------------------------
3211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * The portTASK_FUNCTION() macro is used to allow port/compiler specific
3213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * language extensions.  The equivalent prototype for this function is:
3214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  * void prvIdleTask( void *pvParameters );
3216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  *
3217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c ****  */
3218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static portTASK_FUNCTION( prvIdleTask, pvParameters )
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
3221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) pvParameters;
3222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 63


3224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	SCHEDULER IS STARTED. **/
3225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* In case a task that has a secure context deletes itself, in which case
3227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	the idle task is responsible for deleting the task's secure context, if
3228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	any. */
3229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	portTASK_CALLS_SECURE_FUNCTIONS();
3230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( ;; )
3232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* See if any tasks have deleted themselves - if so then the idle task
3234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is responsible for freeing the deleted task's TCB and stack. */
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvCheckTasksWaitingTermination();
3236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_PREEMPTION == 0 )
3238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If we are not using preemption we keep forcing a task switch to
3240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			see if any other task has become available.  If we are using
3241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			preemption we don't need to do this as any task becoming available
3242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			will automatically get the processor anyway. */
3243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskYIELD();
3244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_PREEMPTION */
3246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
3248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* When using preemption tasks of equal priority will be
3250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timesliced.  If a task that is sharing the idle priority is ready
3251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			to run then the idle task should yield before the end of the
3252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			timeslice.
3253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			A critical region is not required here as we are just reading from
3255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the list, and an occasional incorrect value will not matter.  If
3256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the ready list at the idle priority contains more than one task
3257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then a task other than the idle task is ready to execute. */
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
3259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				taskYIELD();
3261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
3268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_IDLE_HOOK == 1 )
3270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			extern void vApplicationIdleHook( void );
3272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Call the user defined function from within the idle task.  This
3274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			allows the application designer to add background functionality
3275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			without the overhead of a separate task.
3276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
3277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			CALL A FUNCTION THAT MIGHT BLOCK. */
3278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vApplicationIdleHook();
3279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_IDLE_HOOK */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 64


3281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This conditional compilation should use inequality to 0, not equality
3283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
3284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		user defined low power mode	implementations require
3285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
3286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_TICKLESS_IDLE != 0 )
3287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TickType_t xExpectedIdleTime;
3289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* It is not desirable to suspend then resume the scheduler on
3291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			each iteration of the idle task.  Therefore, a preliminary
3292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			test of the expected idle time is performed without the
3293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			scheduler suspended.  The result here is not necessarily
3294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			valid. */
3295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xExpectedIdleTime = prvGetExpectedIdleTime();
3296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskSuspendAll();
3300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Now the scheduler is suspended, the expected idle
3302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					time can be sampled again, and this time its value can
3303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					be used. */
3304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( xNextTaskUnblockTime >= xTickCount );
3305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xExpectedIdleTime = prvGetExpectedIdleTime();
3306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Define the following macro to set xExpectedIdleTime to 0
3308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if the application does not want
3309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
3310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );
3311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
3313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_BEGIN();
3315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
3316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						traceLOW_POWER_IDLE_END();
3317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) xTaskResumeAll();
3324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_TICKLESS_IDLE */
3331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TICKLESS_IDLE != 0 )
3336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 65


3338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* The idle task exists in addition to the application tasks. */
3340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxNonApplicationTasks = 1;
3341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eSleepModeStatus eReturn = eStandardSleep;
3342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
3344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task was made ready while the scheduler was suspended. */
3346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else if( xYieldPending != pdFALSE )
3349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A yield was pended while the scheduler was suspended. */
3351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			eReturn = eAbortSleep;
3352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If all the tasks are in the suspended list (which might mean they
3356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			have an infinite block time rather than actually being suspended)
3357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			then it is safe to turn all clocks off and just wait for external
3358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupts. */
3359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicatio
3360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				eReturn = eNoTasksWaitingTimeout;
3362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return eReturn;
3370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TICKLESS_IDLE */
3373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue 
3378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToSet );
3384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
3385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
3392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
3394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 66


3395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvReturn = NULL;
3396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
3399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
3401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
3402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pvReturn = NULL;
3406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pvReturn;
3409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configNUM_THREAD_LOCAL_STORAGE_POINTERS */
3412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portUSING_MPU_WRAPPERS == 1 )
3415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify, const MemoryRegion_t * const xRegions )
3417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then we are modifying the MPU settings of
3421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the calling task. */
3422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTaskToModify );
3423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
3425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portUSING_MPU_WRAPPERS */
3428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvInitialiseTaskLists( void )
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
3433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriorit
3435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
3437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList1 );
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
3442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xTasksWaitingTermination );
3446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
3450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		vListInitialise( &xSuspendedTaskList );
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 67


3452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskSuspend */
3454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
3456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	using list2. */
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxDelayedTaskList = &xDelayedTaskList1;
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
3459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvCheckTasksWaitingTermination( void )
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
3464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/** THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK **/
3466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskDelete == 1 )
3468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		TCB_t *pxTCB;
3470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
3472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		being called too often in the idle task. */
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
3474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskENTER_CRITICAL();
3476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
3481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			taskEXIT_CRITICAL();
3483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvDeleteTCB( pxTCB );
3485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif /* INCLUDE_vTaskDelete */
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TRACE_FACILITY == 1 )
3492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, 
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* xTask is NULL then get the state of the calling task. */
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
3505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_MUTEXES == 1 )
3507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 68


3509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->uxBasePriority = 0;
3513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configGENERATE_RUN_TIME_STATS == 1 )
3517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
3519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->ulRunTimeCounter = 0;
3523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the task state is a little fiddly, so is only done if the
3527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		value of eState passed into this function is eInvalid - otherwise the
3528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		state is just set to whatever is passed in. */
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( eState != eInvalid )
3530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB == pxCurrentTCB )
3532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eRunning;
3534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->eCurrentState = eState;
3538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if ( INCLUDE_vTaskSuspend == 1 )
3540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the task is in the suspended list then there is a
3542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					chance it is actually just blocked indefinitely - so really
3543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					it should be reported as being in the Blocked state. */
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( eState == eSuspended )
3545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						vTaskSuspendAll();
3547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
3549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 								pxTaskStatus->eCurrentState = eBlocked;
3551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
3552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						( void ) xTaskResumeAll();
3554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif /* INCLUDE_vTaskSuspend */
3557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
3562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
3565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		parameter is provided to allow it to be skipped. */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 69


3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xGetFreeStackSpace != pdFALSE )
3567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#if ( portSTACK_GROWTH > 0 )
3569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfSt
3571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#else
3573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack )
3575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#endif
3577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatus->usStackHighWaterMark = 0;
3581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_TRACE_FACILITY == 1 )
3588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, 
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0;
3593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
3595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );
3597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Populate an TaskStatus_t structure within the
3599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTaskStatusArray array for each task that is referenced from
3600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxList.  See the definition of TaskStatus_t in task.h for the
3601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			meaning of each TaskStatus_t structure member. */
3602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			do
3603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList );
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
3608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxTask;
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TRACE_FACILITY */
3618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
3621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static uint16_t prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 70


3623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 118              		.loc 1 3623 0
 119              		.cfi_startproc
 120              		@ args = 0, pretend = 0, frame = 0
 121              		@ frame_needed = 0, uses_anonymous_args = 0
 122              		@ link register save eliminated.
 123              	.LVL9:
3624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulCount = 0U;
 124              		.loc 1 3624 0
 125 0000 0023     		movs	r3, #0
3625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 126              		.loc 1 3626 0
 127 0002 01E0     		b	.L18
 128              	.LVL10:
 129              	.L19:
3627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucStackByte -= portSTACK_GROWTH;
 130              		.loc 1 3628 0
 131 0004 0130     		adds	r0, r0, #1
 132              	.LVL11:
3629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulCount++;
 133              		.loc 1 3629 0
 134 0006 0133     		adds	r3, r3, #1
 135              	.LVL12:
 136              	.L18:
3626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 137              		.loc 1 3626 0
 138 0008 0278     		ldrb	r2, [r0]	@ zero_extendqisi2
 139 000a A52A     		cmp	r2, #165
 140 000c FAD0     		beq	.L19
 141              	.LVL13:
3630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller a
3633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ( uint16_t ) ulCount;
3635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 142              		.loc 1 3635 0
 143 000e C3F38F00 		ubfx	r0, r3, #2, #16
 144              	.LVL14:
 145 0012 7047     		bx	lr
 146              		.cfi_endproc
 147              	.LFE46:
 149              		.section	.text.prvResetNextTaskUnblockTime,"ax",%progbits
 150              		.align	1
 151              		.syntax unified
 152              		.thumb
 153              		.thumb_func
 154              		.fpu fpv4-sp-d16
 156              	prvResetNextTaskUnblockTime:
 157              	.LFB49:
3636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) */
3638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 71


3641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
3645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t *pucEndOfStack;
3646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
3647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
3649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if portSTACK_GROWTH < 0
3651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
3653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#else
3655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
3657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
3659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
3661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return uxReturn;
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_uxTaskGetStackHighWaterMark */
3666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( INCLUDE_vTaskDelete == 1 )
3669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static void prvDeleteTCB( TCB_t *pxTCB )
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
3673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		above the vPortFree() calls.  The call is also used by ports/demos that
3674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		want to allocate and clean RAM statically. */
3675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAN_UP_TCB( pxTCB );
3676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Free up the memory allocated by the scheduler for the task.  It is up
3678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		to the task to free any memory allocated at the application level. */
3679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if ( configUSE_NEWLIB_REENTRANT == 1 )
3680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
3682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configUSE_NEWLIB_REENTRANT */
3684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( p
3686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task can only have been allocated dynamically - free both
3688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the stack and TCB. */
3689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB->pxStack );
3690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTCB );
3691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated 
3693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The task could have been allocated statically or dynamically, so
3695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			check what was statically allocated before trying to free the
3696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			memory. */
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 72


3698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Both the stack and TCB were allocated dynamically, so both
3700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				must be freed. */
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB->pxStack );
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
3705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only the stack was statically allocated, so the TCB is the
3707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				only memory that must be freed. */
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
3709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Neither the stack nor the TCB were allocated dynamically, so
3713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				nothing needs to be freed. */
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
3715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
3719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* INCLUDE_vTaskDelete */
3722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvResetNextTaskUnblockTime( void )
3725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 158              		.loc 1 3725 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
3726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
3727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 163              		.loc 1 3728 0
 164 0000 0A4B     		ldr	r3, .L26
 165 0002 1B68     		ldr	r3, [r3]
 166 0004 1B68     		ldr	r3, [r3]
 167 0006 4BB9     		cbnz	r3, .L24
 168 0008 0123     		movs	r3, #1
 169              	.L21:
 170              		.loc 1 3728 0 is_stmt 0 discriminator 4
 171 000a 4BB9     		cbnz	r3, .L25
3729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
3731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the maximum possible value so it is	extremely unlikely that the
3732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
3733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		there is an item in the delayed list. */
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = portMAX_DELAY;
3735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
3737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The new current delayed list is not empty, get the value of
3739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		the item at the head of the delayed list.  This is the time at
3740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		which the task at the head of the delayed list should be removed
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 73


3741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from the Blocked state. */
3742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 172              		.loc 1 3742 0 is_stmt 1
 173 000c 074B     		ldr	r3, .L26
 174 000e 1B68     		ldr	r3, [r3]
 175 0010 DB68     		ldr	r3, [r3, #12]
 176 0012 DB68     		ldr	r3, [r3, #12]
 177              	.LVL15:
3743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 178              		.loc 1 3743 0
 179 0014 5A68     		ldr	r2, [r3, #4]
 180 0016 064B     		ldr	r3, .L26+4
 181              	.LVL16:
 182 0018 1A60     		str	r2, [r3]
 183 001a 7047     		bx	lr
 184              	.L24:
3728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 185              		.loc 1 3728 0
 186 001c 0023     		movs	r3, #0
 187 001e F4E7     		b	.L21
 188              	.L25:
3734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 189              		.loc 1 3734 0
 190 0020 4FF0FF32 		mov	r2, #-1
 191 0024 024B     		ldr	r3, .L26+4
 192 0026 1A60     		str	r2, [r3]
 193 0028 7047     		bx	lr
 194              	.L27:
 195 002a 00BF     		.align	2
 196              	.L26:
 197 002c 00000000 		.word	.LANCHOR2
 198 0030 00000000 		.word	.LANCHOR3
 199              		.cfi_endproc
 200              	.LFE49:
 202              		.section	.text.prvInitialiseNewTask,"ax",%progbits
 203              		.align	1
 204              		.syntax unified
 205              		.thumb
 206              		.thumb_func
 207              		.fpu fpv4-sp-d16
 209              	prvInitialiseNewTask:
 210              	.LFB6:
 825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** StackType_t *pxTopOfStack;
 211              		.loc 1 825 0
 212              		.cfi_startproc
 213              		@ args = 16, pretend = 0, frame = 0
 214              		@ frame_needed = 0, uses_anonymous_args = 0
 215              	.LVL17:
 216 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 217              	.LCFI0:
 218              		.cfi_def_cfa_offset 32
 219              		.cfi_offset 4, -32
 220              		.cfi_offset 5, -28
 221              		.cfi_offset 6, -24
 222              		.cfi_offset 7, -20
 223              		.cfi_offset 8, -16
 224              		.cfi_offset 9, -12
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 74


 225              		.cfi_offset 10, -8
 226              		.cfi_offset 14, -4
 227 0004 8146     		mov	r9, r0
 228 0006 0D46     		mov	r5, r1
 229 0008 1746     		mov	r7, r2
 230 000a 9A46     		mov	r10, r3
 231 000c 089E     		ldr	r6, [sp, #32]
 232 000e DDF82480 		ldr	r8, [sp, #36]
 233 0012 0A9C     		ldr	r4, [sp, #40]
 847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 234              		.loc 1 847 0
 235 0014 9200     		lsls	r2, r2, #2
 236              	.LVL18:
 237 0016 A521     		movs	r1, #165
 238              	.LVL19:
 239 0018 206B     		ldr	r0, [r4, #48]
 240              	.LVL20:
 241 001a FFF7FEFF 		bl	memset
 242              	.LVL21:
 857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTE
 243              		.loc 1 857 0
 244 001e 236B     		ldr	r3, [r4, #48]
 245 0020 07F18042 		add	r2, r7, #1073741824
 246 0024 013A     		subs	r2, r2, #1
 247 0026 03EB8207 		add	r7, r3, r2, lsl #2
 248              	.LVL22:
 858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 249              		.loc 1 858 0
 250 002a 27F00707 		bic	r7, r7, #7
 251              	.LVL23:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 252              		.loc 1 885 0
 253 002e 0023     		movs	r3, #0
 254              	.LVL24:
 255              	.L29:
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 256              		.loc 1 885 0 is_stmt 0 discriminator 1
 257 0030 0F2B     		cmp	r3, #15
 258 0032 07D8     		bhi	.L30
 887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 259              		.loc 1 887 0 is_stmt 1
 260 0034 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 261 0036 E218     		adds	r2, r4, r3
 262 0038 82F83410 		strb	r1, [r2, #52]
 892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 263              		.loc 1 892 0
 264 003c EA5C     		ldrb	r2, [r5, r3]	@ zero_extendqisi2
 265 003e 0AB1     		cbz	r2, .L30
 885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 266              		.loc 1 885 0 discriminator 2
 267 0040 0133     		adds	r3, r3, #1
 268              	.LVL25:
 269 0042 F5E7     		b	.L29
 270              	.L30:
 904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 271              		.loc 1 904 0
 272 0044 0023     		movs	r3, #0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 75


 273              	.LVL26:
 274 0046 84F84330 		strb	r3, [r4, #67]
 908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 275              		.loc 1 908 0
 276 004a 372E     		cmp	r6, #55
 277 004c 00D9     		bls	.L32
 910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 278              		.loc 1 910 0
 279 004e 3726     		movs	r6, #55
 280              	.L32:
 281              	.LVL27:
 917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( configUSE_MUTEXES == 1 )
 282              		.loc 1 917 0
 283 0050 E662     		str	r6, [r4, #44]
 920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->uxMutexesHeld = 0;
 284              		.loc 1 920 0
 285 0052 E664     		str	r6, [r4, #76]
 921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 286              		.loc 1 921 0
 287 0054 0025     		movs	r5, #0
 288              	.LVL28:
 289 0056 2565     		str	r5, [r4, #80]
 925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 290              		.loc 1 925 0
 291 0058 201D     		adds	r0, r4, #4
 292 005a FFF7FEFF 		bl	vListInitialiseItem
 293              	.LVL29:
 926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 294              		.loc 1 926 0
 295 005e 04F11800 		add	r0, r4, #24
 296 0062 FFF7FEFF 		bl	vListInitialiseItem
 297              	.LVL30:
 930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 298              		.loc 1 930 0
 299 0066 2461     		str	r4, [r4, #16]
 933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 300              		.loc 1 933 0
 301 0068 C6F13806 		rsb	r6, r6, #56
 302              	.LVL31:
 303 006c A661     		str	r6, [r4, #24]
 934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 304              		.loc 1 934 0
 305 006e 6462     		str	r4, [r4, #36]
 976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 306              		.loc 1 976 0
 307 0070 6565     		str	r5, [r4, #84]
 977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 308              		.loc 1 977 0
 309 0072 84F85850 		strb	r5, [r4, #88]
1004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 310              		.loc 1 1004 0
 311 0076 5246     		mov	r2, r10
 312 0078 4946     		mov	r1, r9
 313 007a 3846     		mov	r0, r7
 314 007c FFF7FEFF 		bl	pxPortInitialiseStack
 315              	.LVL32:
 316 0080 2060     		str	r0, [r4]
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 76


1008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 317              		.loc 1 1008 0
 318 0082 B8F1000F 		cmp	r8, #0
 319 0086 01D0     		beq	.L28
1012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 320              		.loc 1 1012 0
 321 0088 C8F80040 		str	r4, [r8]
 322              	.L28:
 323 008c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 324              		.cfi_endproc
 325              	.LFE6:
 327              		.section	.text.prvInitialiseTaskLists,"ax",%progbits
 328              		.align	1
 329              		.syntax unified
 330              		.thumb
 331              		.thumb_func
 332              		.fpu fpv4-sp-d16
 334              	prvInitialiseTaskLists:
 335              	.LFB42:
3431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** UBaseType_t uxPriority;
 336              		.loc 1 3431 0
 337              		.cfi_startproc
 338              		@ args = 0, pretend = 0, frame = 0
 339              		@ frame_needed = 0, uses_anonymous_args = 0
 340 0000 38B5     		push	{r3, r4, r5, lr}
 341              	.LCFI1:
 342              		.cfi_def_cfa_offset 16
 343              		.cfi_offset 3, -16
 344              		.cfi_offset 4, -12
 345              		.cfi_offset 5, -8
 346              		.cfi_offset 14, -4
 347              	.LVL33:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 348              		.loc 1 3434 0
 349 0002 0024     		movs	r4, #0
 350 0004 07E0     		b	.L37
 351              	.LVL34:
 352              	.L38:
3436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 353              		.loc 1 3436 0 discriminator 3
 354 0006 04EB8402 		add	r2, r4, r4, lsl #2
 355 000a 9300     		lsls	r3, r2, #2
 356 000c 0E48     		ldr	r0, .L40
 357 000e 1844     		add	r0, r0, r3
 358 0010 FFF7FEFF 		bl	vListInitialise
 359              	.LVL35:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 360              		.loc 1 3434 0 discriminator 3
 361 0014 0134     		adds	r4, r4, #1
 362              	.LVL36:
 363              	.L37:
3434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 364              		.loc 1 3434 0 is_stmt 0 discriminator 1
 365 0016 372C     		cmp	r4, #55
 366 0018 F5D9     		bls	.L38
3439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xDelayedTaskList2 );
 367              		.loc 1 3439 0 is_stmt 1
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 77


 368 001a 0C4D     		ldr	r5, .L40+4
 369 001c 2846     		mov	r0, r5
 370 001e FFF7FEFF 		bl	vListInitialise
 371              	.LVL37:
3440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vListInitialise( &xPendingReadyList );
 372              		.loc 1 3440 0
 373 0022 0B4C     		ldr	r4, .L40+8
 374              	.LVL38:
 375 0024 2046     		mov	r0, r4
 376 0026 FFF7FEFF 		bl	vListInitialise
 377              	.LVL39:
3441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 378              		.loc 1 3441 0
 379 002a 0A48     		ldr	r0, .L40+12
 380 002c FFF7FEFF 		bl	vListInitialise
 381              	.LVL40:
3445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 382              		.loc 1 3445 0
 383 0030 0948     		ldr	r0, .L40+16
 384 0032 FFF7FEFF 		bl	vListInitialise
 385              	.LVL41:
3451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 386              		.loc 1 3451 0
 387 0036 0948     		ldr	r0, .L40+20
 388 0038 FFF7FEFF 		bl	vListInitialise
 389              	.LVL42:
3457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 390              		.loc 1 3457 0
 391 003c 084B     		ldr	r3, .L40+24
 392 003e 1D60     		str	r5, [r3]
3458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 393              		.loc 1 3458 0
 394 0040 084B     		ldr	r3, .L40+28
 395 0042 1C60     		str	r4, [r3]
 396 0044 38BD     		pop	{r3, r4, r5, pc}
 397              	.L41:
 398 0046 00BF     		.align	2
 399              	.L40:
 400 0048 00000000 		.word	.LANCHOR4
 401 004c 00000000 		.word	.LANCHOR5
 402 0050 00000000 		.word	.LANCHOR6
 403 0054 00000000 		.word	.LANCHOR1
 404 0058 00000000 		.word	.LANCHOR7
 405 005c 00000000 		.word	.LANCHOR0
 406 0060 00000000 		.word	.LANCHOR2
 407 0064 00000000 		.word	.LANCHOR8
 408              		.cfi_endproc
 409              	.LFE42:
 411              		.section	.text.prvAddNewTaskToReadyList,"ax",%progbits
 412              		.align	1
 413              		.syntax unified
 414              		.thumb
 415              		.thumb_func
 416              		.fpu fpv4-sp-d16
 418              	prvAddNewTaskToReadyList:
 419              	.LFB7:
1022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Ensure interrupts don't access the task lists while the lists are being
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 78


 420              		.loc 1 1022 0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 0
 423              		@ frame_needed = 0, uses_anonymous_args = 0
 424              	.LVL43:
 425 0000 10B5     		push	{r4, lr}
 426              	.LCFI2:
 427              		.cfi_def_cfa_offset 8
 428              		.cfi_offset 4, -8
 429              		.cfi_offset 14, -4
 430 0002 0446     		mov	r4, r0
1025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 431              		.loc 1 1025 0
 432 0004 FFF7FEFF 		bl	vPortEnterCritical
 433              	.LVL44:
1027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB == NULL )
 434              		.loc 1 1027 0
 435 0008 214A     		ldr	r2, .L49
 436 000a 1368     		ldr	r3, [r2]
 437 000c 0133     		adds	r3, r3, #1
 438 000e 1360     		str	r3, [r2]
1028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 439              		.loc 1 1028 0
 440 0010 204B     		ldr	r3, .L49+4
 441 0012 1B68     		ldr	r3, [r3]
 442 0014 002B     		cmp	r3, #0
 443 0016 32D0     		beq	.L48
1051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 444              		.loc 1 1051 0
 445 0018 1F4B     		ldr	r3, .L49+8
 446 001a 1B68     		ldr	r3, [r3]
 447 001c 3BB9     		cbnz	r3, .L44
1053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 448              		.loc 1 1053 0
 449 001e 1D4B     		ldr	r3, .L49+4
 450 0020 1B68     		ldr	r3, [r3]
 451 0022 DA6A     		ldr	r2, [r3, #44]
 452 0024 E36A     		ldr	r3, [r4, #44]
 453 0026 9A42     		cmp	r2, r3
 454 0028 01D8     		bhi	.L44
1055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 455              		.loc 1 1055 0
 456 002a 1A4B     		ldr	r3, .L49+4
 457 002c 1C60     		str	r4, [r3]
 458              	.L44:
1068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 459              		.loc 1 1068 0
 460 002e 1B4A     		ldr	r2, .L49+12
 461 0030 1368     		ldr	r3, [r2]
 462 0032 0133     		adds	r3, r3, #1
 463 0034 1360     		str	r3, [r2]
1073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 464              		.loc 1 1073 0
 465 0036 6364     		str	r3, [r4, #68]
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 466              		.loc 1 1078 0
 467 0038 E36A     		ldr	r3, [r4, #44]
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 79


 468 003a 194A     		ldr	r2, .L49+16
 469 003c 1268     		ldr	r2, [r2]
 470 003e 9342     		cmp	r3, r2
 471 0040 01D9     		bls	.L45
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 472              		.loc 1 1078 0 is_stmt 0 discriminator 1
 473 0042 174A     		ldr	r2, .L49+16
 474 0044 1360     		str	r3, [r2]
 475              	.L45:
1078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 476              		.loc 1 1078 0 discriminator 3
 477 0046 03EB8303 		add	r3, r3, r3, lsl #2
 478 004a 9A00     		lsls	r2, r3, #2
 479 004c 211D     		adds	r1, r4, #4
 480 004e 1548     		ldr	r0, .L49+20
 481 0050 1044     		add	r0, r0, r2
 482 0052 FFF7FEFF 		bl	vListInsertEnd
 483              	.LVL45:
1082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 484              		.loc 1 1082 0 is_stmt 1 discriminator 3
 485 0056 FFF7FEFF 		bl	vPortExitCritical
 486              	.LVL46:
1084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 487              		.loc 1 1084 0 discriminator 3
 488 005a 0F4B     		ldr	r3, .L49+8
 489 005c 1B68     		ldr	r3, [r3]
 490 005e 6BB1     		cbz	r3, .L42
1088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 491              		.loc 1 1088 0
 492 0060 0C4B     		ldr	r3, .L49+4
 493 0062 1B68     		ldr	r3, [r3]
 494 0064 DA6A     		ldr	r2, [r3, #44]
 495 0066 E36A     		ldr	r3, [r4, #44]
 496 0068 9A42     		cmp	r2, r3
 497 006a 07D2     		bcs	.L42
1090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 498              		.loc 1 1090 0
 499 006c 4FF08052 		mov	r2, #268435456
 500 0070 0D4B     		ldr	r3, .L49+24
 501 0072 1A60     		str	r2, [r3]
 502              		.syntax unified
 503              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 504 0074 BFF34F8F 		dsb
 505              	@ 0 "" 2
 506              	@ 1090 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 507 0078 BFF36F8F 		isb
 508              	@ 0 "" 2
 509              		.thumb
 510              		.syntax unified
 511              	.L42:
 512 007c 10BD     		pop	{r4, pc}
 513              	.LVL47:
 514              	.L48:
1032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 515              		.loc 1 1032 0
 516 007e 054B     		ldr	r3, .L49+4
 517 0080 1C60     		str	r4, [r3]
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 80


1034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 518              		.loc 1 1034 0
 519 0082 1368     		ldr	r3, [r2]
 520 0084 012B     		cmp	r3, #1
 521 0086 D2D1     		bne	.L44
1039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 522              		.loc 1 1039 0
 523 0088 FFF7FEFF 		bl	prvInitialiseTaskLists
 524              	.LVL48:
 525 008c CFE7     		b	.L44
 526              	.L50:
 527 008e 00BF     		.align	2
 528              	.L49:
 529 0090 00000000 		.word	.LANCHOR9
 530 0094 00000000 		.word	.LANCHOR10
 531 0098 00000000 		.word	.LANCHOR11
 532 009c 00000000 		.word	.LANCHOR12
 533 00a0 00000000 		.word	.LANCHOR13
 534 00a4 00000000 		.word	.LANCHOR4
 535 00a8 04ED00E0 		.word	-536810236
 536              		.cfi_endproc
 537              	.LFE7:
 539              		.section	.text.prvDeleteTCB,"ax",%progbits
 540              		.align	1
 541              		.syntax unified
 542              		.thumb
 543              		.thumb_func
 544              		.fpu fpv4-sp-d16
 546              	prvDeleteTCB:
 547              	.LFB48:
3671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* This call is required specifically for the TriCore port.  It must be
 548              		.loc 1 3671 0
 549              		.cfi_startproc
 550              		@ args = 0, pretend = 0, frame = 0
 551              		@ frame_needed = 0, uses_anonymous_args = 0
 552              	.LVL49:
 553 0000 10B5     		push	{r4, lr}
 554              	.LCFI3:
 555              		.cfi_def_cfa_offset 8
 556              		.cfi_offset 4, -8
 557              		.cfi_offset 14, -4
 558 0002 0446     		mov	r4, r0
3697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 559              		.loc 1 3697 0
 560 0004 90F85930 		ldrb	r3, [r0, #89]	@ zero_extendqisi2
 561 0008 63B1     		cbz	r3, .L57
3704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 562              		.loc 1 3704 0
 563 000a 012B     		cmp	r3, #1
 564 000c 11D0     		beq	.L58
3714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
 565              		.loc 1 3714 0
 566 000e 022B     		cmp	r3, #2
 567 0010 12D0     		beq	.L51
 568              	.LBB115:
 569              	.LBB116:
 570              		.loc 2 195 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 81


 571              		.syntax unified
 572              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 573 0012 4FF05003 			mov r3, #80												
 574 0016 83F31188 		msr basepri, r3											
 575 001a BFF36F8F 		isb														
 576 001e BFF34F8F 		dsb														
 577              	
 578              	@ 0 "" 2
 579              	.LVL50:
 580              		.thumb
 581              		.syntax unified
 582              	.L55:
 583 0022 FEE7     		b	.L55
 584              	.L57:
 585              	.LBE116:
 586              	.LBE115:
3701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vPortFree( pxTCB );
 587              		.loc 1 3701 0
 588 0024 006B     		ldr	r0, [r0, #48]
 589              	.LVL51:
 590 0026 FFF7FEFF 		bl	vPortFree
 591              	.LVL52:
3702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 592              		.loc 1 3702 0
 593 002a 2046     		mov	r0, r4
 594 002c FFF7FEFF 		bl	vPortFree
 595              	.LVL53:
 596 0030 10BD     		pop	{r4, pc}
 597              	.LVL54:
 598              	.L58:
3708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 599              		.loc 1 3708 0
 600 0032 FFF7FEFF 		bl	vPortFree
 601              	.LVL55:
 602 0036 10BD     		pop	{r4, pc}
 603              	.LVL56:
 604              	.L51:
 605 0038 10BD     		pop	{r4, pc}
 606              		.cfi_endproc
 607              	.LFE48:
 609              		.section	.text.prvCheckTasksWaitingTermination,"ax",%progbits
 610              		.align	1
 611              		.syntax unified
 612              		.thumb
 613              		.thumb_func
 614              		.fpu fpv4-sp-d16
 616              	prvCheckTasksWaitingTermination:
 617              	.LFB43:
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 618              		.loc 1 3463 0
 619              		.cfi_startproc
 620              		@ args = 0, pretend = 0, frame = 0
 621              		@ frame_needed = 0, uses_anonymous_args = 0
 622              	.LBB117:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 623              		.loc 1 3473 0
 624 0000 0F4B     		ldr	r3, .L66
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 82


 625 0002 1B68     		ldr	r3, [r3]
 626 0004 D3B1     		cbz	r3, .L65
 627              	.LBE117:
3463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 628              		.loc 1 3463 0
 629 0006 10B5     		push	{r4, lr}
 630              	.LCFI4:
 631              		.cfi_def_cfa_offset 8
 632              		.cfi_offset 4, -8
 633              		.cfi_offset 14, -4
 634              	.L61:
 635              	.LBB118:
3475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 636              		.loc 1 3475 0
 637 0008 FFF7FEFF 		bl	vPortEnterCritical
 638              	.LVL57:
3477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 639              		.loc 1 3477 0
 640 000c 0D4B     		ldr	r3, .L66+4
 641 000e DB68     		ldr	r3, [r3, #12]
 642 0010 DC68     		ldr	r4, [r3, #12]
 643              	.LVL58:
3478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxCurrentNumberOfTasks;
 644              		.loc 1 3478 0
 645 0012 201D     		adds	r0, r4, #4
 646 0014 FFF7FEFF 		bl	uxListRemove
 647              	.LVL59:
3479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				--uxDeletedTasksWaitingCleanUp;
 648              		.loc 1 3479 0
 649 0018 0B4A     		ldr	r2, .L66+8
 650 001a 1368     		ldr	r3, [r2]
 651 001c 013B     		subs	r3, r3, #1
 652 001e 1360     		str	r3, [r2]
3480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 653              		.loc 1 3480 0
 654 0020 074A     		ldr	r2, .L66
 655 0022 1368     		ldr	r3, [r2]
 656 0024 013B     		subs	r3, r3, #1
 657 0026 1360     		str	r3, [r2]
3482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 658              		.loc 1 3482 0
 659 0028 FFF7FEFF 		bl	vPortExitCritical
 660              	.LVL60:
3484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 661              		.loc 1 3484 0
 662 002c 2046     		mov	r0, r4
 663 002e FFF7FEFF 		bl	prvDeleteTCB
 664              	.LVL61:
3473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 665              		.loc 1 3473 0
 666 0032 034B     		ldr	r3, .L66
 667 0034 1B68     		ldr	r3, [r3]
 668 0036 002B     		cmp	r3, #0
 669 0038 E6D1     		bne	.L61
 670              	.LBE118:
3488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 671              		.loc 1 3488 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 83


 672 003a 10BD     		pop	{r4, pc}
 673              	.LVL62:
 674              	.L65:
 675              	.LCFI5:
 676              		.cfi_def_cfa_offset 0
 677              		.cfi_restore 4
 678              		.cfi_restore 14
 679 003c 7047     		bx	lr
 680              	.L67:
 681 003e 00BF     		.align	2
 682              	.L66:
 683 0040 00000000 		.word	.LANCHOR14
 684 0044 00000000 		.word	.LANCHOR7
 685 0048 00000000 		.word	.LANCHOR9
 686              		.cfi_endproc
 687              	.LFE43:
 689              		.section	.text.prvIdleTask,"ax",%progbits
 690              		.align	1
 691              		.syntax unified
 692              		.thumb
 693              		.thumb_func
 694              		.fpu fpv4-sp-d16
 696              	prvIdleTask:
 697              	.LFB41:
3219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop warnings. */
 698              		.loc 1 3219 0
 699              		.cfi_startproc
 700              		@ Volatile: function does not return.
 701              		@ args = 0, pretend = 0, frame = 0
 702              		@ frame_needed = 0, uses_anonymous_args = 0
 703              	.LVL63:
 704 0000 08B5     		push	{r3, lr}
 705              	.LCFI6:
 706              		.cfi_def_cfa_offset 8
 707              		.cfi_offset 3, -8
 708              		.cfi_offset 14, -4
 709              	.LVL64:
 710              	.L69:
3235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 711              		.loc 1 3235 0
 712 0002 FFF7FEFF 		bl	prvCheckTasksWaitingTermination
 713              	.LVL65:
3258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 714              		.loc 1 3258 0
 715 0006 064B     		ldr	r3, .L72
 716 0008 1B68     		ldr	r3, [r3]
 717 000a 012B     		cmp	r3, #1
 718 000c F9D9     		bls	.L69
3260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 719              		.loc 1 3260 0
 720 000e 4FF08052 		mov	r2, #268435456
 721 0012 044B     		ldr	r3, .L72+4
 722 0014 1A60     		str	r2, [r3]
 723              		.syntax unified
 724              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 725 0016 BFF34F8F 		dsb
 726              	@ 0 "" 2
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 84


 727              	@ 3260 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 728 001a BFF36F8F 		isb
 729              	@ 0 "" 2
 730              		.thumb
 731              		.syntax unified
 732 001e F0E7     		b	.L69
 733              	.L73:
 734              		.align	2
 735              	.L72:
 736 0020 00000000 		.word	.LANCHOR4
 737 0024 04ED00E0 		.word	-536810236
 738              		.cfi_endproc
 739              	.LFE41:
 741              		.section	.text.prvAddCurrentTaskToDelayedList,"ax",%progbits
 742              		.align	1
 743              		.syntax unified
 744              		.thumb
 745              		.thumb_func
 746              		.fpu fpv4-sp-d16
 748              	prvAddCurrentTaskToDelayedList:
 749              	.LFB63:
3744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
3746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )
3749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xTaskGetCurrentTaskHandle( void )
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
3753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* A critical section is not required as this is not called from
3755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		an interrupt and the current TCB will always be the same for any
3756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		individual execution thread. */
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xReturn = pxCurrentTCB;
3758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) */
3763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
3766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGetSchedulerState( void )
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
3770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning == pdFALSE )
3772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = taskSCHEDULER_NOT_STARTED;
3774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
3778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_RUNNING;
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 85


3780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = taskSCHEDULER_SUSPENDED;
3784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) ) */
3791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If the mutex was given back by an interrupt while the queue was
3801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		locked then the mutex holder might now be NULL.  _RB_ Is this still
3802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		needed as interrupts can no longer use mutexes? */
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the holder of the mutex has a priority below the priority of
3806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			the task attempting to obtain the mutex then it will temporarily
3807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			inherit the priority of the task attempting to obtain the mutex. */
3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
3809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Adjust the mutex holder state to account for its new
3811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				priority.  Only reset the event list item value if the value is
3812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				not being used for anything else. */
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VA
3814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIOR
3816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task being modified is in the ready state it will need
3823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				to be moved into a new list. */
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutex
3825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
3829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Inherit the priority before being moved into the new list. */
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 86


3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
3838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Just inherit the priority. */
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
3843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
3846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Inheritance occurred. */
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
3849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
3853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The base priority of the mutex holder is lower than the
3855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex, but the
3856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					current priority of the mutex holder is not lower than the
3857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority of the task attempting to take the mutex.
3858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Therefore the mutex holder must have already inherited a
3859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority, but inheritance would have occurred if that had
3860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					not been the case. */
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdFALSE;
3886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* A task can only have an inherited priority if it holds the mutex.
3890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			If the mutex is held by a task then it cannot be given from an
3891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt, and if a mutex is given by the holding task then it must
3892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			be the running state task. */
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB == pxCurrentTCB );
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 87


3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
3896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Has the holder of the mutex inherited the priority of another
3898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task? */
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
3900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held. */
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
3903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* A task can only have an inherited priority if it holds
3905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the mutex.  If the mutex is held by a task then it cannot be
3906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					given from an interrupt, and if a mutex is given by the
3907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					holding task then it must be the running state task.  Remove
3908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the holding task from the ready list. */
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
3910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
3912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
3914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
3915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
3916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
3917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority before adding the task into the
3919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					new	ready list. */
3920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = pxTCB->uxBasePriority;
3922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Reset the event list item value.  It cannot be in use for
3924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					any other purpose if this task is running, and it must be
3925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					running to give back the mutex. */
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( T
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
3928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Return true to indicate that a context switch is required.
3930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This is only actually required in the corner case whereby
3931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					multiple mutexes were held and the mutexes were given back
3932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					in an order different to that in which they were taken.
3933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					If a context switch did not occur when the first mutex was
3934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					returned, even if a task was waiting on it, then a context
3935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					switch should occur when the last mutex is returned whether
3936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a task is waiting on it or not. */
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xReturn = pdTRUE;
3938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
3940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
3942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
3943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
3947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
3950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 88


3951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
3952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
3953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
3956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
3958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
3959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
3961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestP
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
3964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
3965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
3966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
3967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxMutexHolder != NULL )
3969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
3970:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If pxMutexHolder is not NULL then the holder must hold at least
3971:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			one mutex. */
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
3973:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3974:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Determine the priority to which the priority of the task that
3975:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holds the mutex should be set.  This will be the greater of the
3976:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			holding task's base priority and the priority of the highest
3977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			priority task that is waiting to obtain the mutex. */
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
3979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = uxHighestPriorityWaitingTask;
3981:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3982:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
3983:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3984:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxPriorityToUse = pxTCB->uxBasePriority;
3985:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
3986:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
3987:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Does the priority need to change? */
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->uxPriority != uxPriorityToUse )
3989:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
3990:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Only disinherit if no other mutexes are held.  This is a
3991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				simplification in the priority inheritance implementation.  If
3992:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the task that holds the mutex is also holding other mutexes then
3993:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				the other mutexes may have caused the priority inheritance. */
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
3995:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
3996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task has timed out because it already holds the
3997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mutex it was trying to obtain then it cannot of inherited
3998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					its own priority. */
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					configASSERT( pxTCB != pxCurrentTCB );
4000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4001:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Disinherit the priority, remembering the previous
4002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					priority to facilitate determining the subject task's
4003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					state. */
4004:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
4005:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxPriorityUsedOnEntry = pxTCB->uxPriority;
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->uxPriority = uxPriorityToUse;
4007:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 89


4008:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Only reset the event list item value if the value is not
4009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					being used for anything else. */
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE
4011:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( 
4013:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4014:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4015:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4017:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4018:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4019:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If the running task is not the task that holds the mutex
4020:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					then the task that holds the mutex could be in either the
4021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready, Blocked or Suspended states.  Only remove the task
4022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					from its current state list if it is in the Ready state as
4023:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the task's priority is going to change and there is one
4024:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					Ready list per priority. */
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xState
4026:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
4028:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4029:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
4030:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4031:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						else
4032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4033:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							mtCOVERAGE_TEST_MARKER();
4034:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4035:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						prvAddTaskToReadyList( pxTCB );
4037:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4038:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4039:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4040:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						mtCOVERAGE_TEST_MARKER();
4041:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4042:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4044:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4045:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4046:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4048:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4049:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4050:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4051:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4053:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4054:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4056:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4058:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4062:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4063:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4064:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskEnterCritical( void )
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 90


4065:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portDISABLE_INTERRUPTS();
4067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4068:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4070:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxCriticalNesting )++;
4071:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4072:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* This is not the interrupt safe version of the enter critical
4073:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			function so	assert() if it is being called from an interrupt
4074:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			context.  Only API functions that end in "FromISR" can be used in an
4075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			interrupt.  Only assert if the critical nesting count is 1 to
4076:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			protect against recursive calls if the assert function also uses a
4077:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			critical section. */
4078:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting == 1 )
4079:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4080:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portASSERT_IF_IN_ISR();
4081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4084:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4087:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4089:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4090:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4091:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4092:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( portCRITICAL_NESTING_IN_TCB == 1 )
4093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4094:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskExitCritical( void )
4095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( xSchedulerRunning != pdFALSE )
4097:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4098:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->uxCriticalNesting > 0U )
4099:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( pxCurrentTCB->uxCriticalNesting )--;
4101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxCurrentTCB->uxCriticalNesting == 0U )
4103:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portENABLE_INTERRUPTS();
4105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4108:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4109:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4112:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4116:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4118:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4120:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4121:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 91


4122:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* portCRITICAL_NESTING_IN_TCB */
4123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4124:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )
4126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
4128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	size_t x;
4130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4131:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Start by copying the entire string. */
4132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		strcpy( pcBuffer, pcTaskName );
4133:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Pad the end of the string with spaces to ensure columns line up when
4135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		printed out. */
4136:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
4137:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4138:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pcBuffer[ x ] = ' ';
4139:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4141:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Terminate. */
4142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pcBuffer[ x ] = 0x00;
4143:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Return the new end of string. */
4145:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return &( pcBuffer[ x ] );
4146:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) */
4149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4151:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( config
4152:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskList( char * pcWriteBuffer )
4154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4155:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4156:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	char cStatus;
4158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4159:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4161:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4162:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4163:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() calls uxTaskGetSystemState(), then formats part of the
4167:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * uxTaskGetSystemState() output into a human readable table that
4168:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays task names, states and stack usage.
4169:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskList() has a dependency on the sprintf() C library function that
4171:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * might bloat the code size, use a lot of stack, and provide different
4172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * results on different platforms.  An alternative, tiny, third party,
4173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * and limited functionality implementation of sprintf() is provided in
4174:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * many of the FreeRTOS/Demo sub-directories in a file called
4175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * printf-stdarg.c (note printf-stdarg.c does not provide a full
4176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * snprintf() implementation!).
4177:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4178:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 92


4179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4180:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskList().
4181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4182:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4185:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4186:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4188:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
4189:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  if
4192:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4193:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4194:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4196:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4197:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
4200:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Create a human readable table from the binary data. */
4202:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			for( x = 0; x < uxArraySize; x++ )
4203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				switch( pxTaskStatusArray[ x ].eCurrentState )
4205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eRunning:		cStatus = tskRUNNING_CHAR;
4207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4208:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4209:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eReady:		cStatus = tskREADY_CHAR;
4210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4212:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eBlocked:		cStatus = tskBLOCKED_CHAR;
4213:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4215:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
4216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4217:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4218:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					case eDeleted:		cStatus = tskDELETED_CHAR;
4219:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4220:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					default:			/* Should not get here, but it is included
4222:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										to prevent static checking errors. */
4223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										cStatus = 0x00;
4224:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 										break;
4225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4226:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4227:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the task name to the string, padding with spaces so it
4228:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				can be printed in tabular form more easily. */
4229:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4230:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4231:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Write the rest of the string. */
4232:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x 
4233:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pcWriteBuffer += strlen( pcWriteBuffer );
4234:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4235:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 93


4236:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4238:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4240:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4241:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4242:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4244:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4245:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4246:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( 
4247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*----------------------------------------------------------*/
4248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4249:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( c
4250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4251:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskGetRunTimeStats( char *pcWriteBuffer )
4252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4253:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskStatus_t *pxTaskStatusArray;
4254:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	volatile UBaseType_t uxArraySize, x;
4255:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTotalTime, ulStatsAsPercentage;
4256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4257:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#if( configUSE_TRACE_FACILITY != 1 )
4258:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			#error configUSE_TRACE_FACILITY must also be set to 1 in FreeRTOSConfig.h to use vTaskGetRunTime
4260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4261:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		#endif
4262:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/*
4264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * PLEASE NOTE:
4265:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4266:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * This function is provided for convenience only, and is used by many
4267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the demo applications.  Do not consider it to be part of the
4268:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * scheduler.
4269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() calls uxTaskGetSystemState(), then formats part
4271:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * of the uxTaskGetSystemState() output into a human readable table that
4272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * displays the amount of time each task has spent in the Running state
4273:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * in both absolute and percentage terms.
4274:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4275:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * vTaskGetRunTimeStats() has a dependency on the sprintf() C library
4276:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * function that might bloat the code size, use a lot of stack, and
4277:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * provide different results on different platforms.  An alternative,
4278:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * tiny, third party, and limited functionality implementation of
4279:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * sprintf() is provided in many of the FreeRTOS/Demo sub-directories in
4280:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a file called printf-stdarg.c (note printf-stdarg.c does not provide
4281:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * a full snprintf() implementation!).
4282:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 *
4283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * It is recommended that production systems call uxTaskGetSystemState()
4284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * directly to get access to raw stats data, rather than indirectly
4285:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 * through a call to vTaskGetRunTimeStats().
4286:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		 */
4287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4288:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Make sure the write buffer does not contain a string. */
4289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		*pcWriteBuffer = 0x00;
4290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4291:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Take a snapshot of the number of tasks in case it changes while this
4292:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		function is executing. */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 94


4293:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxArraySize = uxCurrentNumberOfTasks;
4294:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4295:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* Allocate an array index for each task.  NOTE!  If
4296:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
4297:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		equate to NULL. */
4298:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) );
4299:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4300:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxTaskStatusArray != NULL )
4301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4302:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Generate the (binary) data. */
4303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
4304:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4305:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* For percentage calculations. */
4306:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulTotalTime /= 100UL;
4307:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4308:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Avoid divide by zero errors. */
4309:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulTotalTime > 0 )
4310:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4311:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Create a human readable table from the binary data. */
4312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				for( x = 0; x < uxArraySize; x++ )
4313:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* What percentage of the total run time has the task used?
4315:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					This will always be rounded down to the nearest integer.
4316:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulTotalRunTimeDiv100 has already been divided by 100. */
4317:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
4318:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4319:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* Write the task name to the string, padding with
4320:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					spaces so it can be printed in tabular form more
4321:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					easily. */
4322:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
4323:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4324:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ulStatsAsPercentage > 0UL )
4325:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4326:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4327:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t%lu%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter, ulSta
4329:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4330:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4331:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4332:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
4334:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4336:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4337:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4339:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4340:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* If the percentage is zero here then the task has
4341:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						consumed less than 1% of the total run time. */
4342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
4343:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%lu\t\t<1%%\r\n", pxTaskStatusArray[ x ].ulRunTimeCounter );
4345:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#else
4347:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
4348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							/* sizeof( int ) == sizeof( long ) so a smaller
4349:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							printf() library can be used. */
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 95


4350:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTim
4351:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
4352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						#endif
4353:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4354:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4355:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pcWriteBuffer += strlen( pcWriteBuffer );
4356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4357:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4358:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4359:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4360:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4362:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
4364:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			is 0 then vPortFree() will be #defined to nothing. */
4365:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vPortFree( pxTaskStatusArray );
4366:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4368:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4369:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			mtCOVERAGE_TEST_MARKER();
4370:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4371:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4372:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) 
4374:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4375:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4376:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxTaskResetEventItemValue( void )
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
4378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
4379:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
4381:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4382:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Reset the event list item to its normal value - so it can be used with
4383:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	queues and semaphores. */
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES 
4385:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return uxReturn;
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
4388:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4389:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4390:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if ( configUSE_MUTEXES == 1 )
4391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4392:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void *pvTaskIncrementMutexHeldCount( void )
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4394:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
4395:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		then pxCurrentTCB will be NULL. */
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( pxCurrentTCB != NULL )
4397:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxCurrentTCB->uxMutexesHeld )++;
4399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4400:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return pxCurrentTCB;
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_MUTEXES */
4405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4406:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 96


4407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4409:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4411:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
4412:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4414:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4415:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if the notification count is not already non-zero. */
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ulNotifiedValue == 0UL )
4417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4418:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4420:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4422:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
4425:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4426:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4427:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4428:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4429:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4431:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4432:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4433:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4434:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4435:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4436:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4437:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4439:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4440:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4443:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4445:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4446:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_TAKE();
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ulReturn = pxCurrentTCB->ulNotifiedValue;
4448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ulReturn != 0UL )
4450:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xClearCountOnExit != pdFALSE )
4452:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = 0UL;
4454:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4456:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
4458:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4459:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4460:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4462:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4463:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 97


4464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4468:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4469:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return ulReturn;
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4471:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4472:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4473:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4474:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4475:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4476:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4477:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t 
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4479:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4480:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4483:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Only block if a notification is not already pending. */
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4485:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4486:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Clear bits in the task's notification value as bits may get
4487:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				set	by the notifying task or interrupt.  This can be used to
4488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				clear the value to zero. */
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
4490:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4491:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Mark this task as waiting for a notification. */
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
4493:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTicksToWait > ( TickType_t ) 0 )
4495:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
4497:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
4498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4499:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* All ports are written to allow a yield in a critical
4500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					section (some will yield immediately, others wait until the
4501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					critical section exits) - but it is not something that
4502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					application code should ever do. */
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					portYIELD_WITHIN_API();
4504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4505:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4506:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4510:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4511:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4512:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4513:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4514:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4516:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4518:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4519:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_WAIT();
4520:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 98


4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulNotificationValue != NULL )
4522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Output the current notification value, which may or may not
4524:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				have changed. */
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
4526:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4527:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If ucNotifyValue is set then either the task never entered the
4529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			blocked state (because a notification was already pending) or the
4530:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			task unblocked because of a notification.  Otherwise the task
4531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			unblocked because of a timeout. */
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
4533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4534:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was not received. */
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFALSE;
4536:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4538:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4539:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* A notification was already pending or a notification was
4540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				received while the task was waiting. */
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
4543:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4549:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4551:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4552:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4554:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4555:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4557:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4559:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4562:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4564:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4565:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4567:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4569:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4571:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4572:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4576:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 99


4578:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4581:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4583:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4591:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4598:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4600:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction:
4604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4608:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4609:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY();
4610:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4612:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4614:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
4617:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4618:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4621:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#if( configUSE_TICKLESS_IDLE != 0 )
4622:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4623:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* If a task is blocked waiting for a notification then
4624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime might be set to the blocked task's time
4625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					out time.  If the task is unblocked for a reason other than
4626:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					a timeout xNextTaskUnblockTime is normally left unchanged,
4627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					because it will automatically get reset to a new value when
4628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					the tick count equals xNextTaskUnblockTime.  However if
4629:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					tickless idling is used it might be more important to enter
4630:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					sleep mode at the earliest possible time - so reset
4631:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime here to ensure it is updated at the
4632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					earliest possible time. */
4633:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvResetNextTaskUnblockTime();
4634:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 100


4635:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				#endif
4636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4640:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					taskYIELD_IF_USING_PREEMPTION();
4642:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4644:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4645:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4649:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				mtCOVERAGE_TEST_MARKER();
4651:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4652:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4654:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4658:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4662:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction 
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4666:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn = pdPASS;
4668:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4669:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4671:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4673:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4674:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4675:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4677:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4679:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4681:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
4683:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4684:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4685:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4686:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4690:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4691:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 101


4692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pulPreviousNotificationValue != NULL )
4695:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
4697:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4698:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			switch( eAction )
4703:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4704:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetBits	:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue |= ulValue;
4706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4707:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4708:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eIncrement	:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( pxTCB->ulNotifiedValue )++;
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4711:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4712:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithOverwrite	:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					pxTCB->ulNotifiedValue = ulValue;
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4715:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4716:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eSetValueWithoutOverwrite :
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
4718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						pxTCB->ulNotifiedValue = ulValue;
4720:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4721:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4722:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4723:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* The value could not be written to the task. */
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xReturn = pdFAIL;
4725:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4726:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4728:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				case eNoAction :
4729:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The task is being notified without its notify value being
4730:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					updated. */
4731:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
4732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4733:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4734:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_FROM_ISR();
4735:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4736:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4737:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4739:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4744:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4747:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4748:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 102


4749:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4750:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4753:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4754:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4756:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4758:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4762:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4763:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4764:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4765:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter to an ISR
4767:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4769:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4770:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4774:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4775:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4778:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4781:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4785:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4786:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4789:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
4790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
4791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
4792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( xTaskToNotify );
4794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4795:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* RTOS ports that support interrupt nesting have the concept of a
4796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		maximum	system call (or maximum API call) interrupt priority.
4797:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		Interrupts that are	above the maximum system call priority are keep
4798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		permanently enabled, even when the RTOS kernel is in a critical section,
4799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
4800:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		is defined in FreeRTOSConfig.h then
4801:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
4802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		failure if a FreeRTOS API function is called from an interrupt that has
4803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		been assigned a priority above the configured maximum system call
4804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		priority.  Only FreeRTOS functions that end in FromISR can be called
4805:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		from interrupts	that have been assigned a priority at or (logically)
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 103


4806:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		below the maximum system call interrupt priority.  FreeRTOS maintains a
4807:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		separate interrupt safe API to ensure interrupt entry is as fast and as
4808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		simple as possible.  More information (albeit Cortex-M specific) is
4809:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		provided on the following link:
4810:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
4812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
4814:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
4816:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			ucOriginalNotifyState = pxTCB->ucNotifyState;
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
4819:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4820:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* 'Giving' is equivalent to incrementing a count in a counting
4821:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			semaphore. */
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->ulNotifiedValue )++;
4823:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			traceTASK_NOTIFY_GIVE_FROM_ISR();
4825:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* If the task is in the blocked state specifically to wait for a
4827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			notification then unblock it now. */
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
4829:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4830:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The task should not have been on an event list. */
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
4832:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
4834:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
4837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4838:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4839:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4840:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The delayed and ready lists cannot be accessed, so hold
4841:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					this task pending until the scheduler is resumed. */
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
4843:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4844:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
4846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					/* The notified task has a priority above the currently
4848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					executing task so a yield is required. */
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					if( pxHigherPriorityTaskWoken != NULL )
4850:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						*pxHigherPriorityTaskWoken = pdTRUE;
4852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					else
4854:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
4855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						/* Mark that a yield is pending in case the user is not
4856:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						using the "xHigherPriorityTaskWoken" parameter in an ISR
4857:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						safe FreeRTOS function. */
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						xYieldPending = pdTRUE;
4859:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
4860:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				else
4862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 104


4863:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					mtCOVERAGE_TEST_MARKER();
4864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
4865:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4866:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4867:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
4868:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4869:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4870:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4873:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4874:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #if( configUSE_TASK_NOTIFICATIONS == 1 )
4875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4876:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4878:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
4879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
4880:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4881:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If null is passed in here then it is the calling task that is having
4882:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		its notification state cleared. */
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = prvGetTCBFromHandle( xTask );
4884:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskENTER_CRITICAL();
4886:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
4888:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
4891:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4892:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdFAIL;
4895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		taskEXIT_CRITICAL();
4898:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		return xReturn;
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** #endif /* configUSE_TASK_NOTIFICATIONS */
4903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
4904:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockInde
4907:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** {
 750              		.loc 1 4907 0
 751              		.cfi_startproc
 752              		@ args = 0, pretend = 0, frame = 0
 753              		@ frame_needed = 0, uses_anonymous_args = 0
 754              	.LVL66:
 755 0000 70B5     		push	{r4, r5, r6, lr}
 756              	.LCFI7:
 757              		.cfi_def_cfa_offset 16
 758              		.cfi_offset 4, -16
 759              		.cfi_offset 5, -12
 760              		.cfi_offset 6, -8
 761              		.cfi_offset 14, -4
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 105


 762 0002 0446     		mov	r4, r0
 763 0004 0E46     		mov	r6, r1
4908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTimeToWake;
4909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** const TickType_t xConstTickCount = xTickCount;
 764              		.loc 1 4909 0
 765 0006 174B     		ldr	r3, .L81
 766 0008 1D68     		ldr	r5, [r3]
 767              	.LVL67:
4910:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4911:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if( INCLUDE_xTaskAbortDelay == 1 )
4912:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4913:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
4914:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		reset to pdFALSE so it can be detected as having been set to pdTRUE
4915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		when the task leaves the Blocked state. */
4916:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxCurrentTCB->ucDelayAborted = pdFALSE;
4917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4918:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#endif
4919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4920:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Remove the task from the ready list before adding it to the blocked list
4921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	as the same list item is used for both lists. */
4922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 768              		.loc 1 4922 0
 769 000a 174B     		ldr	r3, .L81+4
 770 000c 1868     		ldr	r0, [r3]
 771              	.LVL68:
 772 000e 0430     		adds	r0, r0, #4
 773 0010 FFF7FEFF 		bl	uxListRemove
 774              	.LVL69:
4923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4924:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* The current task must be in a ready list, so there is no need to
4925:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		check, and the port reset macro can be called directly. */
4926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
4927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4928:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	else
4929:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4930:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		mtCOVERAGE_TEST_MARKER();
4931:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
4932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4933:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	#if ( INCLUDE_vTaskSuspend == 1 )
4934:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 775              		.loc 1 4935 0
 776 0014 B4F1FF3F 		cmp	r4, #-1
 777 0018 13D0     		beq	.L79
 778              	.L75:
4936:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Add the task to the suspended task list instead of a delayed task
4938:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			list to ensure it is not woken by a timing event.  It will block
4939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			indefinitely. */
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
4941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
4942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		else
4943:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
4944:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* Calculate the time at which the task should be woken if the event
4945:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			does not occur.  This may overflow but this doesn't matter, the
4946:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			kernel will manage it correctly. */
4947:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xTimeToWake = xConstTickCount + xTicksToWait;
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 106


 779              		.loc 1 4947 0
 780 001a 2C44     		add	r4, r4, r5
 781              	.LVL70:
4948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			/* The list item will be inserted in wake time order. */
4950:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 782              		.loc 1 4950 0
 783 001c 124B     		ldr	r3, .L81+4
 784 001e 1B68     		ldr	r3, [r3]
 785 0020 5C60     		str	r4, [r3, #4]
4951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4952:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			if( xTimeToWake < xConstTickCount )
 786              		.loc 1 4952 0
 787 0022 A542     		cmp	r5, r4
 788 0024 16D8     		bhi	.L80
4953:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4954:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* Wake time has overflowed.  Place this item in the overflow
4955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				list. */
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
4957:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
4958:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			else
4959:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
4960:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* The wake time has not overflowed, so the current block list
4961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				is used. */
4962:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 789              		.loc 1 4962 0
 790 0026 114B     		ldr	r3, .L81+8
 791 0028 1868     		ldr	r0, [r3]
 792 002a 0F4B     		ldr	r3, .L81+4
 793 002c 1968     		ldr	r1, [r3]
 794 002e 0431     		adds	r1, r1, #4
 795 0030 FFF7FEFF 		bl	vListInsert
 796              	.LVL71:
4963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
4964:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				/* If the task entering the blocked state was placed at the
4965:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				head of the list of blocked tasks then xNextTaskUnblockTime
4966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				needs to be updated too. */
4967:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				if( xTimeToWake < xNextTaskUnblockTime )
 797              		.loc 1 4967 0
 798 0034 0E4B     		ldr	r3, .L81+12
 799 0036 1B68     		ldr	r3, [r3]
 800 0038 9C42     		cmp	r4, r3
 801 003a 01D2     		bcs	.L74
4968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
4969:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xNextTaskUnblockTime = xTimeToWake;
 802              		.loc 1 4969 0
 803 003c 0C4B     		ldr	r3, .L81+12
 804 003e 1C60     		str	r4, [r3]
 805              	.L74:
 806 0040 70BD     		pop	{r4, r5, r6, pc}
 807              	.LVL72:
 808              	.L79:
4935:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 809              		.loc 1 4935 0 discriminator 1
 810 0042 002E     		cmp	r6, #0
 811 0044 E9D0     		beq	.L75
4940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 107


 812              		.loc 1 4940 0
 813 0046 084B     		ldr	r3, .L81+4
 814 0048 1968     		ldr	r1, [r3]
 815 004a 0431     		adds	r1, r1, #4
 816 004c 0948     		ldr	r0, .L81+16
 817 004e FFF7FEFF 		bl	vListInsertEnd
 818              	.LVL73:
 819 0052 70BD     		pop	{r4, r5, r6, pc}
 820              	.LVL74:
 821              	.L80:
4956:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 822              		.loc 1 4956 0
 823 0054 084B     		ldr	r3, .L81+20
 824 0056 1868     		ldr	r0, [r3]
 825 0058 034B     		ldr	r3, .L81+4
 826 005a 1968     		ldr	r1, [r3]
 827 005c 0431     		adds	r1, r1, #4
 828 005e FFF7FEFF 		bl	vListInsert
 829              	.LVL75:
 830 0062 70BD     		pop	{r4, r5, r6, pc}
 831              	.LVL76:
 832              	.L82:
 833              		.align	2
 834              	.L81:
 835 0064 00000000 		.word	.LANCHOR15
 836 0068 00000000 		.word	.LANCHOR10
 837 006c 00000000 		.word	.LANCHOR2
 838 0070 00000000 		.word	.LANCHOR3
 839 0074 00000000 		.word	.LANCHOR0
 840 0078 00000000 		.word	.LANCHOR8
 841              		.cfi_endproc
 842              	.LFE63:
 844              		.section	.text.xTaskCreateStatic,"ax",%progbits
 845              		.align	1
 846              		.global	xTaskCreateStatic
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 850              		.fpu fpv4-sp-d16
 852              	xTaskCreateStatic:
 853              	.LFB4:
 582:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 854              		.loc 1 582 0
 855              		.cfi_startproc
 856              		@ args = 12, pretend = 0, frame = 8
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              	.LVL77:
 859 0000 70B5     		push	{r4, r5, r6, lr}
 860              	.LCFI8:
 861              		.cfi_def_cfa_offset 16
 862              		.cfi_offset 4, -16
 863              		.cfi_offset 5, -12
 864              		.cfi_offset 6, -8
 865              		.cfi_offset 14, -4
 866 0002 86B0     		sub	sp, sp, #24
 867              	.LCFI9:
 868              		.cfi_def_cfa_offset 40
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 108


 869 0004 0B9D     		ldr	r5, [sp, #44]
 870 0006 0C9C     		ldr	r4, [sp, #48]
 586:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxTaskBuffer != NULL );
 871              		.loc 1 586 0
 872 0008 75B1     		cbz	r5, .L91
 587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 873              		.loc 1 587 0
 874 000a B4B1     		cbz	r4, .L92
 875              	.LBB119:
 594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( xSize == sizeof( TCB_t ) );
 876              		.loc 1 594 0
 877 000c 5C26     		movs	r6, #92
 878 000e 0496     		str	r6, [sp, #16]
 595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 879              		.loc 1 595 0
 880 0010 049E     		ldr	r6, [sp, #16]
 881 0012 5C2E     		cmp	r6, #92
 882 0014 1AD0     		beq	.L88
 883              	.LBB120:
 884              	.LBB121:
 885              		.loc 2 195 0
 886              		.syntax unified
 887              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 888 0016 4FF05003 			mov r3, #80												
 889 001a 83F31188 		msr basepri, r3											
 890 001e BFF36F8F 		isb														
 891 0022 BFF34F8F 		dsb														
 892              	
 893              	@ 0 "" 2
 894              	.LVL78:
 895              		.thumb
 896              		.syntax unified
 897              	.L89:
 898 0026 FEE7     		b	.L89
 899              	.LVL79:
 900              	.L91:
 901              	.LBE121:
 902              	.LBE120:
 903              	.LBE119:
 904              	.LBB122:
 905              	.LBB123:
 906              		.syntax unified
 907              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 908 0028 4FF05003 			mov r3, #80												
 909 002c 83F31188 		msr basepri, r3											
 910 0030 BFF36F8F 		isb														
 911 0034 BFF34F8F 		dsb														
 912              	
 913              	@ 0 "" 2
 914              	.LVL80:
 915              		.thumb
 916              		.syntax unified
 917              	.L85:
 918 0038 FEE7     		b	.L85
 919              	.LVL81:
 920              	.L92:
 921              	.LBE123:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 109


 922              	.LBE122:
 923              	.LBB124:
 924              	.LBB125:
 925              		.syntax unified
 926              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 927 003a 4FF05003 			mov r3, #80												
 928 003e 83F31188 		msr basepri, r3											
 929 0042 BFF36F8F 		isb														
 930 0046 BFF34F8F 		dsb														
 931              	
 932              	@ 0 "" 2
 933              	.LVL82:
 934              		.thumb
 935              		.syntax unified
 936              	.L87:
 937 004a FEE7     		b	.L87
 938              	.LVL83:
 939              	.L88:
 940              	.LBE125:
 941              	.LBE124:
 605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 942              		.loc 1 605 0
 943 004c 2563     		str	r5, [r4, #48]
 611:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 944              		.loc 1 611 0
 945 004e 0225     		movs	r5, #2
 946 0050 84F85950 		strb	r5, [r4, #89]
 615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 947              		.loc 1 615 0
 948 0054 0025     		movs	r5, #0
 949 0056 0395     		str	r5, [sp, #12]
 950 0058 0294     		str	r4, [sp, #8]
 951 005a 05AD     		add	r5, sp, #20
 952 005c 0195     		str	r5, [sp, #4]
 953 005e 0A9D     		ldr	r5, [sp, #40]
 954 0060 0095     		str	r5, [sp]
 955 0062 FFF7FEFF 		bl	prvInitialiseNewTask
 956              	.LVL84:
 616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 957              		.loc 1 616 0
 958 0066 2046     		mov	r0, r4
 959 0068 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 960              	.LVL85:
 624:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 961              		.loc 1 624 0
 962 006c 0598     		ldr	r0, [sp, #20]
 963 006e 06B0     		add	sp, sp, #24
 964              	.LCFI10:
 965              		.cfi_def_cfa_offset 16
 966              		@ sp needed
 967 0070 70BD     		pop	{r4, r5, r6, pc}
 968              		.cfi_endproc
 969              	.LFE4:
 971              		.section	.text.xTaskCreate,"ax",%progbits
 972              		.align	1
 973              		.global	xTaskCreate
 974              		.syntax unified
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 110


 975              		.thumb
 976              		.thumb_func
 977              		.fpu fpv4-sp-d16
 979              	xTaskCreate:
 980              	.LFB5:
 732:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxNewTCB;
 981              		.loc 1 732 0
 982              		.cfi_startproc
 983              		@ args = 8, pretend = 0, frame = 0
 984              		@ frame_needed = 0, uses_anonymous_args = 0
 985              	.LVL86:
 986 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 987              	.LCFI11:
 988              		.cfi_def_cfa_offset 28
 989              		.cfi_offset 4, -28
 990              		.cfi_offset 5, -24
 991              		.cfi_offset 6, -20
 992              		.cfi_offset 7, -16
 993              		.cfi_offset 8, -12
 994              		.cfi_offset 9, -8
 995              		.cfi_offset 14, -4
 996 0004 85B0     		sub	sp, sp, #20
 997              	.LCFI12:
 998              		.cfi_def_cfa_offset 48
 999 0006 0646     		mov	r6, r0
 1000 0008 0F46     		mov	r7, r1
 1001 000a 1546     		mov	r5, r2
 1002 000c 9846     		mov	r8, r3
 1003              	.LBB126:
 766:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1004              		.loc 1 766 0
 1005 000e 9000     		lsls	r0, r2, #2
 1006              	.LVL87:
 1007 0010 FFF7FEFF 		bl	pvPortMalloc
 1008              	.LVL88:
 768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1009              		.loc 1 768 0
 1010 0014 10B3     		cbz	r0, .L97
 1011 0016 8146     		mov	r9, r0
 771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1012              		.loc 1 771 0
 1013 0018 5C20     		movs	r0, #92
 1014              	.LVL89:
 1015 001a FFF7FEFF 		bl	pvPortMalloc
 1016              	.LVL90:
 773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1017              		.loc 1 773 0
 1018 001e 0446     		mov	r4, r0
 1019 0020 C0B1     		cbz	r0, .L95
 776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1020              		.loc 1 776 0
 1021 0022 C0F83090 		str	r9, [r0, #48]
 1022              	.LVL91:
 1023              	.L94:
 1024              	.LBE126:
 792:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1025              		.loc 1 792 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 111


 1026 0026 DCB1     		cbz	r4, .L98
 798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1027              		.loc 1 798 0
 1028 0028 0023     		movs	r3, #0
 1029 002a 84F85930 		strb	r3, [r4, #89]
 802:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			prvAddNewTaskToReadyList( pxNewTCB );
 1030              		.loc 1 802 0
 1031 002e 0393     		str	r3, [sp, #12]
 1032 0030 0294     		str	r4, [sp, #8]
 1033 0032 0D9B     		ldr	r3, [sp, #52]
 1034 0034 0193     		str	r3, [sp, #4]
 1035 0036 0C9B     		ldr	r3, [sp, #48]
 1036 0038 0093     		str	r3, [sp]
 1037 003a 4346     		mov	r3, r8
 1038 003c 2A46     		mov	r2, r5
 1039 003e 3946     		mov	r1, r7
 1040 0040 3046     		mov	r0, r6
 1041 0042 FFF7FEFF 		bl	prvInitialiseNewTask
 1042              	.LVL92:
 803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdPASS;
 1043              		.loc 1 803 0
 1044 0046 2046     		mov	r0, r4
 1045 0048 FFF7FEFF 		bl	prvAddNewTaskToReadyList
 1046              	.LVL93:
 804:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1047              		.loc 1 804 0
 1048 004c 0120     		movs	r0, #1
 1049              	.LVL94:
 1050              	.L93:
 812:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1051              		.loc 1 812 0
 1052 004e 05B0     		add	sp, sp, #20
 1053              	.LCFI13:
 1054              		.cfi_remember_state
 1055              		.cfi_def_cfa_offset 28
 1056              		@ sp needed
 1057 0050 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 1058              	.LVL95:
 1059              	.L95:
 1060              	.LCFI14:
 1061              		.cfi_restore_state
 1062              	.LBB127:
 782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1063              		.loc 1 782 0
 1064 0054 4846     		mov	r0, r9
 1065              	.LVL96:
 1066 0056 FFF7FEFF 		bl	vPortFree
 1067              	.LVL97:
 1068 005a E4E7     		b	.L94
 1069              	.LVL98:
 1070              	.L97:
 787:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1071              		.loc 1 787 0
 1072 005c 0024     		movs	r4, #0
 1073 005e E2E7     		b	.L94
 1074              	.LVL99:
 1075              	.L98:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 112


 1076              	.LBE127:
 808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1077              		.loc 1 808 0
 1078 0060 4FF0FF30 		mov	r0, #-1
 1079              	.LVL100:
 811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1080              		.loc 1 811 0
 1081 0064 F3E7     		b	.L93
 1082              		.cfi_endproc
 1083              	.LFE5:
 1085              		.section	.text.vTaskDelete,"ax",%progbits
 1086              		.align	1
 1087              		.global	vTaskDelete
 1088              		.syntax unified
 1089              		.thumb
 1090              		.thumb_func
 1091              		.fpu fpv4-sp-d16
 1093              	vTaskDelete:
 1094              	.LFB8:
1107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1095              		.loc 1 1107 0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              	.LVL101:
 1100 0000 38B5     		push	{r3, r4, r5, lr}
 1101              	.LCFI15:
 1102              		.cfi_def_cfa_offset 16
 1103              		.cfi_offset 3, -16
 1104              		.cfi_offset 4, -12
 1105              		.cfi_offset 5, -8
 1106              		.cfi_offset 14, -4
 1107 0002 0446     		mov	r4, r0
1110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1108              		.loc 1 1110 0
 1109 0004 FFF7FEFF 		bl	vPortEnterCritical
 1110              	.LVL102:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1111              		.loc 1 1114 0
 1112 0008 24B3     		cbz	r4, .L110
 1113              	.LVL103:
 1114              	.L101:
1117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1115              		.loc 1 1117 0 discriminator 4
 1116 000a 251D     		adds	r5, r4, #4
 1117 000c 2846     		mov	r0, r5
 1118 000e FFF7FEFF 		bl	uxListRemove
 1119              	.LVL104:
1127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1120              		.loc 1 1127 0 discriminator 4
 1121 0012 A36A     		ldr	r3, [r4, #40]
 1122 0014 1BB1     		cbz	r3, .L102
1129:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1123              		.loc 1 1129 0
 1124 0016 04F11800 		add	r0, r4, #24
 1125 001a FFF7FEFF 		bl	uxListRemove
 1126              	.LVL105:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 113


 1127              	.L102:
1140:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1128              		.loc 1 1140 0
 1129 001e 1E4A     		ldr	r2, .L113
 1130 0020 1368     		ldr	r3, [r2]
 1131 0022 0133     		adds	r3, r3, #1
 1132 0024 1360     		str	r3, [r2]
1142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1133              		.loc 1 1142 0
 1134 0026 1D4B     		ldr	r3, .L113+4
 1135 0028 1B68     		ldr	r3, [r3]
 1136 002a 9C42     		cmp	r4, r3
 1137 002c 15D0     		beq	.L111
1165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvDeleteTCB( pxTCB );
 1138              		.loc 1 1165 0
 1139 002e 1C4A     		ldr	r2, .L113+8
 1140 0030 1368     		ldr	r3, [r2]
 1141 0032 013B     		subs	r3, r3, #1
 1142 0034 1360     		str	r3, [r2]
1166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1143              		.loc 1 1166 0
 1144 0036 2046     		mov	r0, r4
 1145 0038 FFF7FEFF 		bl	prvDeleteTCB
 1146              	.LVL106:
1170:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1147              		.loc 1 1170 0
 1148 003c FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 1149              	.LVL107:
 1150              	.L104:
1175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1151              		.loc 1 1175 0
 1152 0040 FFF7FEFF 		bl	vPortExitCritical
 1153              	.LVL108:
1179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1154              		.loc 1 1179 0
 1155 0044 174B     		ldr	r3, .L113+12
 1156 0046 1B68     		ldr	r3, [r3]
 1157 0048 1BB1     		cbz	r3, .L100
1181:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1158              		.loc 1 1181 0
 1159 004a 144B     		ldr	r3, .L113+4
 1160 004c 1B68     		ldr	r3, [r3]
 1161 004e 9C42     		cmp	r4, r3
 1162 0050 0CD0     		beq	.L112
 1163              	.L100:
 1164 0052 38BD     		pop	{r3, r4, r5, pc}
 1165              	.LVL109:
 1166              	.L110:
1114:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1167              		.loc 1 1114 0 discriminator 1
 1168 0054 114B     		ldr	r3, .L113+4
 1169 0056 1C68     		ldr	r4, [r3]
 1170              	.LVL110:
 1171 0058 D7E7     		b	.L101
 1172              	.LVL111:
 1173              	.L111:
1149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 114


 1174              		.loc 1 1149 0
 1175 005a 2946     		mov	r1, r5
 1176 005c 1248     		ldr	r0, .L113+16
 1177 005e FFF7FEFF 		bl	vListInsertEnd
 1178              	.LVL112:
1154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1179              		.loc 1 1154 0
 1180 0062 124A     		ldr	r2, .L113+20
 1181 0064 1368     		ldr	r3, [r2]
 1182 0066 0133     		adds	r3, r3, #1
 1183 0068 1360     		str	r3, [r2]
 1184 006a E9E7     		b	.L104
 1185              	.L112:
1183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 1186              		.loc 1 1183 0
 1187 006c 104B     		ldr	r3, .L113+24
 1188 006e 1B68     		ldr	r3, [r3]
 1189 0070 43B1     		cbz	r3, .L106
 1190              	.LBB128:
 1191              	.LBB129:
 1192              		.loc 2 195 0
 1193              		.syntax unified
 1194              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1195 0072 4FF05003 			mov r3, #80												
 1196 0076 83F31188 		msr basepri, r3											
 1197 007a BFF36F8F 		isb														
 1198 007e BFF34F8F 		dsb														
 1199              	
 1200              	@ 0 "" 2
 1201              	.LVL113:
 1202              		.thumb
 1203              		.syntax unified
 1204              	.L107:
 1205 0082 FEE7     		b	.L107
 1206              	.L106:
 1207              	.LBE129:
 1208              	.LBE128:
1184:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1209              		.loc 1 1184 0
 1210 0084 4FF08052 		mov	r2, #268435456
 1211 0088 0A4B     		ldr	r3, .L113+28
 1212 008a 1A60     		str	r2, [r3]
 1213              		.syntax unified
 1214              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1215 008c BFF34F8F 		dsb
 1216              	@ 0 "" 2
 1217              	@ 1184 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1218 0090 BFF36F8F 		isb
 1219              	@ 0 "" 2
1191:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1220              		.loc 1 1191 0
 1221              		.thumb
 1222              		.syntax unified
 1223 0094 DDE7     		b	.L100
 1224              	.L114:
 1225 0096 00BF     		.align	2
 1226              	.L113:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 115


 1227 0098 00000000 		.word	.LANCHOR12
 1228 009c 00000000 		.word	.LANCHOR10
 1229 00a0 00000000 		.word	.LANCHOR9
 1230 00a4 00000000 		.word	.LANCHOR11
 1231 00a8 00000000 		.word	.LANCHOR7
 1232 00ac 00000000 		.word	.LANCHOR14
 1233 00b0 00000000 		.word	.LANCHOR16
 1234 00b4 04ED00E0 		.word	-536810236
 1235              		.cfi_endproc
 1236              	.LFE8:
 1238              		.section	.text.eTaskGetState,"ax",%progbits
 1239              		.align	1
 1240              		.global	eTaskGetState
 1241              		.syntax unified
 1242              		.thumb
 1243              		.thumb_func
 1244              		.fpu fpv4-sp-d16
 1246              	eTaskGetState:
 1247              	.LFB11:
1328:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	eTaskState eReturn;
 1248              		.loc 1 1328 0
 1249              		.cfi_startproc
 1250              		@ args = 0, pretend = 0, frame = 0
 1251              		@ frame_needed = 0, uses_anonymous_args = 0
 1252              	.LVL114:
 1253 0000 38B5     		push	{r3, r4, r5, lr}
 1254              	.LCFI16:
 1255              		.cfi_def_cfa_offset 16
 1256              		.cfi_offset 3, -16
 1257              		.cfi_offset 4, -12
 1258              		.cfi_offset 5, -8
 1259              		.cfi_offset 14, -4
 1260              	.LVL115:
1333:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1261              		.loc 1 1333 0
 1262 0002 D0B1     		cbz	r0, .L127
 1263 0004 0546     		mov	r5, r0
1335:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1264              		.loc 1 1335 0
 1265 0006 194B     		ldr	r3, .L129
 1266 0008 1B68     		ldr	r3, [r3]
 1267 000a 9842     		cmp	r0, r3
 1268 000c 22D0     		beq	.L120
1342:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1269              		.loc 1 1342 0
 1270 000e FFF7FEFF 		bl	vPortEnterCritical
 1271              	.LVL116:
1344:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1272              		.loc 1 1344 0
 1273 0012 6C69     		ldr	r4, [r5, #20]
 1274              	.LVL117:
1346:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1275              		.loc 1 1346 0
 1276 0014 FFF7FEFF 		bl	vPortExitCritical
 1277              	.LVL118:
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1278              		.loc 1 1348 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 116


 1279 0018 154B     		ldr	r3, .L129+4
 1280 001a 1B68     		ldr	r3, [r3]
 1281 001c 9C42     		cmp	r4, r3
 1282 001e 1BD0     		beq	.L121
1348:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1283              		.loc 1 1348 0 is_stmt 0 discriminator 1
 1284 0020 144B     		ldr	r3, .L129+8
 1285 0022 1B68     		ldr	r3, [r3]
 1286 0024 9C42     		cmp	r4, r3
 1287 0026 19D0     		beq	.L122
1356:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1288              		.loc 1 1356 0 is_stmt 1
 1289 0028 134B     		ldr	r3, .L129+12
 1290 002a 9C42     		cmp	r4, r3
 1291 002c 0ED0     		beq	.L128
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1292              		.loc 1 1373 0
 1293 002e 134B     		ldr	r3, .L129+16
 1294 0030 9C42     		cmp	r4, r3
 1295 0032 17D0     		beq	.L124
1373:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1296              		.loc 1 1373 0 is_stmt 0 discriminator 1
 1297 0034 C4B9     		cbnz	r4, .L125
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1298              		.loc 1 1378 0 is_stmt 1
 1299 0036 0420     		movs	r0, #4
 1300 0038 38BD     		pop	{r3, r4, r5, pc}
 1301              	.LVL119:
 1302              	.L127:
 1303              	.LBB130:
 1304              	.LBB131:
 1305              		.loc 2 195 0
 1306              		.syntax unified
 1307              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1308 003a 4FF05003 			mov r3, #80												
 1309 003e 83F31188 		msr basepri, r3											
 1310 0042 BFF36F8F 		isb														
 1311 0046 BFF34F8F 		dsb														
 1312              	
 1313              	@ 0 "" 2
 1314              	.LVL120:
 1315              		.thumb
 1316              		.syntax unified
 1317              	.L117:
 1318 004a FEE7     		b	.L117
 1319              	.LVL121:
 1320              	.L128:
 1321              	.LBE131:
 1322              	.LBE130:
1361:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1323              		.loc 1 1361 0
 1324 004c AB6A     		ldr	r3, [r5, #40]
 1325 004e 3BB9     		cbnz	r3, .L123
1363:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1326              		.loc 1 1363 0
 1327 0050 0320     		movs	r0, #3
 1328 0052 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 117


 1329              	.LVL122:
 1330              	.L120:
1338:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1331              		.loc 1 1338 0
 1332 0054 0020     		movs	r0, #0
 1333              	.LVL123:
 1334 0056 38BD     		pop	{r3, r4, r5, pc}
 1335              	.LVL124:
 1336              	.L121:
1352:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1337              		.loc 1 1352 0
 1338 0058 0220     		movs	r0, #2
 1339 005a 38BD     		pop	{r3, r4, r5, pc}
 1340              	.LVL125:
 1341              	.L122:
 1342 005c 0220     		movs	r0, #2
 1343 005e 38BD     		pop	{r3, r4, r5, pc}
 1344              	.LVL126:
 1345              	.L123:
1367:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1346              		.loc 1 1367 0
 1347 0060 0220     		movs	r0, #2
 1348 0062 38BD     		pop	{r3, r4, r5, pc}
 1349              	.LVL127:
 1350              	.L124:
1378:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1351              		.loc 1 1378 0
 1352 0064 0420     		movs	r0, #4
 1353 0066 38BD     		pop	{r3, r4, r5, pc}
 1354              	.LVL128:
 1355              	.L125:
1386:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1356              		.loc 1 1386 0
 1357 0068 0120     		movs	r0, #1
 1358              	.LVL129:
1391:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1359              		.loc 1 1391 0
 1360 006a 38BD     		pop	{r3, r4, r5, pc}
 1361              	.LVL130:
 1362              	.L130:
 1363              		.align	2
 1364              	.L129:
 1365 006c 00000000 		.word	.LANCHOR10
 1366 0070 00000000 		.word	.LANCHOR2
 1367 0074 00000000 		.word	.LANCHOR8
 1368 0078 00000000 		.word	.LANCHOR0
 1369 007c 00000000 		.word	.LANCHOR7
 1370              		.cfi_endproc
 1371              	.LFE11:
 1373              		.section	.text.uxTaskPriorityGet,"ax",%progbits
 1374              		.align	1
 1375              		.global	uxTaskPriorityGet
 1376              		.syntax unified
 1377              		.thumb
 1378              		.thumb_func
 1379              		.fpu fpv4-sp-d16
 1381              	uxTaskPriorityGet:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 118


 1382              	.LFB12:
1399:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1383              		.loc 1 1399 0
 1384              		.cfi_startproc
 1385              		@ args = 0, pretend = 0, frame = 0
 1386              		@ frame_needed = 0, uses_anonymous_args = 0
 1387              	.LVL131:
 1388 0000 10B5     		push	{r4, lr}
 1389              	.LCFI17:
 1390              		.cfi_def_cfa_offset 8
 1391              		.cfi_offset 4, -8
 1392              		.cfi_offset 14, -4
 1393 0002 0446     		mov	r4, r0
1403:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1394              		.loc 1 1403 0
 1395 0004 FFF7FEFF 		bl	vPortEnterCritical
 1396              	.LVL132:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1397              		.loc 1 1407 0
 1398 0008 24B1     		cbz	r4, .L135
 1399              	.LVL133:
 1400              	.L132:
1408:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1401              		.loc 1 1408 0 discriminator 4
 1402 000a E46A     		ldr	r4, [r4, #44]
 1403              	.LVL134:
1410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1404              		.loc 1 1410 0 discriminator 4
 1405 000c FFF7FEFF 		bl	vPortExitCritical
 1406              	.LVL135:
1413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1407              		.loc 1 1413 0 discriminator 4
 1408 0010 2046     		mov	r0, r4
 1409 0012 10BD     		pop	{r4, pc}
 1410              	.LVL136:
 1411              	.L135:
1407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1412              		.loc 1 1407 0 discriminator 1
 1413 0014 014B     		ldr	r3, .L136
 1414 0016 1C68     		ldr	r4, [r3]
 1415              	.LVL137:
 1416 0018 F7E7     		b	.L132
 1417              	.L137:
 1418 001a 00BF     		.align	2
 1419              	.L136:
 1420 001c 00000000 		.word	.LANCHOR10
 1421              		.cfi_endproc
 1422              	.LFE12:
 1424              		.section	.text.uxTaskPriorityGetFromISR,"ax",%progbits
 1425              		.align	1
 1426              		.global	uxTaskPriorityGetFromISR
 1427              		.syntax unified
 1428              		.thumb
 1429              		.thumb_func
 1430              		.fpu fpv4-sp-d16
 1432              	uxTaskPriorityGetFromISR:
 1433              	.LFB13:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 119


1421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1434              		.loc 1 1421 0
 1435              		.cfi_startproc
 1436              		@ args = 0, pretend = 0, frame = 0
 1437              		@ frame_needed = 0, uses_anonymous_args = 0
 1438              	.LVL138:
 1439 0000 10B5     		push	{r4, lr}
 1440              	.LCFI18:
 1441              		.cfi_def_cfa_offset 8
 1442              		.cfi_offset 4, -8
 1443              		.cfi_offset 14, -4
 1444 0002 0446     		mov	r4, r0
1441:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1445              		.loc 1 1441 0
 1446 0004 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1447              	.LVL139:
 1448              	.LBB132:
 1449              	.LBB133:
 196:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 197:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %0, %1												\n"	\
 198:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %0											\n" \
 199:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 200:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 201:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
 202:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 203:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 204:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 205:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 206:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 207:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
 208:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 209:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** uint32_t ulOriginalBASEPRI, ulNewBASEPRI;
 210:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1450              		.loc 2 211 0
 1451              		.syntax unified
 1452              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1453 0008 EFF31183 			mrs r3, basepri											
 1454 000c 4FF05002 		mov r2, #80												
 1455 0010 82F31188 		msr basepri, r2											
 1456 0014 BFF36F8F 		isb														
 1457 0018 BFF34F8F 		dsb														
 1458              	
 1459              	@ 0 "" 2
 1460              		.thumb
 1461              		.syntax unified
 1462              	.LBE133:
 1463              	.LBE132:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1464              		.loc 1 1447 0
 1465 001c 1CB1     		cbz	r4, .L142
 1466              	.LVL140:
 1467              	.L139:
1448:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1468              		.loc 1 1448 0 discriminator 4
 1469 001e E06A     		ldr	r0, [r4, #44]
 1470              	.LVL141:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 120


 1471              	.LBB134:
 1472              	.LBB135:
 212:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 213:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mrs %0, basepri											\n" \
 214:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	mov %1, %2												\n"	\
 215:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	msr basepri, %1											\n" \
 216:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	isb														\n" \
 217:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		"	dsb														\n" \
 218:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "
 219:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	);
 220:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 221:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	/* This return will not be reached but is necessary to prevent compiler
 222:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	warnings. */
 223:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	return ulOriginalBASEPRI;
 224:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** }
 225:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** /*-----------------------------------------------------------*/
 226:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 
 227:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
 228:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** {
 229:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	__asm volatile
 1473              		.loc 2 229 0 discriminator 4
 1474              		.syntax unified
 1475              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1476 0020 83F31188 			msr basepri, r3	
 1477              	@ 0 "" 2
 1478              	.LVL142:
 1479              		.thumb
 1480              		.syntax unified
 1481              	.LBE135:
 1482              	.LBE134:
1453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1483              		.loc 1 1453 0 discriminator 4
 1484 0024 10BD     		pop	{r4, pc}
 1485              	.LVL143:
 1486              	.L142:
1447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			uxReturn = pxTCB->uxPriority;
 1487              		.loc 1 1447 0 discriminator 1
 1488 0026 014A     		ldr	r2, .L143
 1489 0028 1468     		ldr	r4, [r2]
 1490              	.LVL144:
 1491 002a F8E7     		b	.L139
 1492              	.L144:
 1493              		.align	2
 1494              	.L143:
 1495 002c 00000000 		.word	.LANCHOR10
 1496              		.cfi_endproc
 1497              	.LFE13:
 1499              		.section	.text.vTaskPrioritySet,"ax",%progbits
 1500              		.align	1
 1501              		.global	vTaskPrioritySet
 1502              		.syntax unified
 1503              		.thumb
 1504              		.thumb_func
 1505              		.fpu fpv4-sp-d16
 1507              	vTaskPrioritySet:
 1508              	.LFB14:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 121


 1509              		.loc 1 1461 0
 1510              		.cfi_startproc
 1511              		@ args = 0, pretend = 0, frame = 0
 1512              		@ frame_needed = 0, uses_anonymous_args = 0
 1513              	.LVL145:
1466:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1514              		.loc 1 1466 0
 1515 0000 3729     		cmp	r1, #55
 1516 0002 08D9     		bls	.L146
 1517              	.LBB136:
 1518              	.LBB137:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1519              		.loc 2 195 0
 1520              		.syntax unified
 1521              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1522 0004 4FF05003 			mov r3, #80												
 1523 0008 83F31188 		msr basepri, r3											
 1524 000c BFF36F8F 		isb														
 1525 0010 BFF34F8F 		dsb														
 1526              	
 1527              	@ 0 "" 2
 1528              	.LVL146:
 1529              		.thumb
 1530              		.syntax unified
 1531              	.L147:
 1532 0014 FEE7     		b	.L147
 1533              	.L146:
 1534              	.LBE137:
 1535              	.LBE136:
1461:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 1536              		.loc 1 1461 0
 1537 0016 70B5     		push	{r4, r5, r6, lr}
 1538              	.LCFI19:
 1539              		.cfi_def_cfa_offset 16
 1540              		.cfi_offset 4, -16
 1541              		.cfi_offset 5, -12
 1542              		.cfi_offset 6, -8
 1543              		.cfi_offset 14, -4
 1544 0018 0D46     		mov	r5, r1
 1545 001a 0446     		mov	r4, r0
 1546              	.LVL147:
1478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1547              		.loc 1 1478 0
 1548 001c FFF7FEFF 		bl	vPortEnterCritical
 1549              	.LVL148:
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1550              		.loc 1 1482 0
 1551 0020 0CB9     		cbnz	r4, .L148
1482:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1552              		.loc 1 1482 0 is_stmt 0 discriminator 1
 1553 0022 294B     		ldr	r3, .L164
 1554 0024 1C68     		ldr	r4, [r3]
 1555              	.LVL149:
 1556              	.L148:
1488:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 1557              		.loc 1 1488 0 is_stmt 1 discriminator 4
 1558 0026 E26C     		ldr	r2, [r4, #76]
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 122


 1559              	.LVL150:
1496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1560              		.loc 1 1496 0 discriminator 4
 1561 0028 9542     		cmp	r5, r2
 1562 002a 3BD0     		beq	.L149
1500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1563              		.loc 1 1500 0
 1564 002c 3DD9     		bls	.L150
1502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1565              		.loc 1 1502 0
 1566 002e 264B     		ldr	r3, .L164
 1567 0030 1B68     		ldr	r3, [r3]
 1568 0032 9C42     		cmp	r4, r3
 1569 0034 3FD0     		beq	.L158
1507:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 1570              		.loc 1 1507 0
 1571 0036 244B     		ldr	r3, .L164
 1572 0038 1B68     		ldr	r3, [r3]
 1573 003a DB6A     		ldr	r3, [r3, #44]
 1574 003c 9D42     		cmp	r5, r3
 1575 003e 3CD2     		bcs	.L159
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1576              		.loc 1 1464 0
 1577 0040 0026     		movs	r6, #0
 1578              	.L151:
 1579              	.LVL151:
1540:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1580              		.loc 1 1540 0
 1581 0042 E36A     		ldr	r3, [r4, #44]
 1582              	.LVL152:
1546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1583              		.loc 1 1546 0
 1584 0044 9A42     		cmp	r2, r3
 1585 0046 00D1     		bne	.L152
1548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1586              		.loc 1 1548 0
 1587 0048 E562     		str	r5, [r4, #44]
 1588              	.L152:
1556:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1589              		.loc 1 1556 0
 1590 004a E564     		str	r5, [r4, #76]
1566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1591              		.loc 1 1566 0
 1592 004c A269     		ldr	r2, [r4, #24]
 1593              	.LVL153:
 1594 004e 002A     		cmp	r2, #0
 1595 0050 02DB     		blt	.L153
1568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1596              		.loc 1 1568 0
 1597 0052 C5F13805 		rsb	r5, r5, #56
 1598              	.LVL154:
 1599 0056 A561     		str	r5, [r4, #24]
 1600              	.L153:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1601              		.loc 1 1579 0
 1602 0058 6169     		ldr	r1, [r4, #20]
 1603 005a 03EB8303 		add	r3, r3, r3, lsl #2
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 123


 1604              	.LVL155:
 1605 005e 9A00     		lsls	r2, r3, #2
 1606 0060 1A4B     		ldr	r3, .L164+4
 1607 0062 1344     		add	r3, r3, r2
 1608 0064 9942     		cmp	r1, r3
 1609 0066 2CD1     		bne	.L161
 1610 0068 0123     		movs	r3, #1
 1611              	.L154:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1612              		.loc 1 1579 0 is_stmt 0 discriminator 4
 1613 006a 93B1     		cbz	r3, .L155
1584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1614              		.loc 1 1584 0 is_stmt 1
 1615 006c 251D     		adds	r5, r4, #4
 1616 006e 2846     		mov	r0, r5
 1617 0070 FFF7FEFF 		bl	uxListRemove
 1618              	.LVL156:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1619              		.loc 1 1595 0
 1620 0074 E36A     		ldr	r3, [r4, #44]
 1621 0076 164A     		ldr	r2, .L164+8
 1622 0078 1268     		ldr	r2, [r2]
 1623 007a 9342     		cmp	r3, r2
 1624 007c 01D9     		bls	.L156
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1625              		.loc 1 1595 0 is_stmt 0 discriminator 1
 1626 007e 144A     		ldr	r2, .L164+8
 1627 0080 1360     		str	r3, [r2]
 1628              	.L156:
1595:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1629              		.loc 1 1595 0 discriminator 3
 1630 0082 03EB8303 		add	r3, r3, r3, lsl #2
 1631 0086 9A00     		lsls	r2, r3, #2
 1632 0088 2946     		mov	r1, r5
 1633 008a 1048     		ldr	r0, .L164+4
 1634 008c 1044     		add	r0, r0, r2
 1635 008e FFF7FEFF 		bl	vListInsertEnd
 1636              	.LVL157:
 1637              	.L155:
1602:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1638              		.loc 1 1602 0 is_stmt 1
 1639 0092 3EB1     		cbz	r6, .L149
1604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1640              		.loc 1 1604 0
 1641 0094 4FF08052 		mov	r2, #268435456
 1642 0098 0E4B     		ldr	r3, .L164+12
 1643 009a 1A60     		str	r2, [r3]
 1644              		.syntax unified
 1645              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1646 009c BFF34F8F 		dsb
 1647              	@ 0 "" 2
 1648              	@ 1604 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1649 00a0 BFF36F8F 		isb
 1650              	@ 0 "" 2
 1651              	.LVL158:
 1652              		.thumb
 1653              		.syntax unified
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 124


 1654              	.L149:
1616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 1655              		.loc 1 1616 0
 1656 00a4 FFF7FEFF 		bl	vPortExitCritical
 1657              	.LVL159:
 1658 00a8 70BD     		pop	{r4, r5, r6, pc}
 1659              	.LVL160:
 1660              	.L150:
1523:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1661              		.loc 1 1523 0
 1662 00aa 074B     		ldr	r3, .L164
 1663 00ac 1B68     		ldr	r3, [r3]
 1664 00ae 9C42     		cmp	r4, r3
 1665 00b0 05D0     		beq	.L160
1464:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1666              		.loc 1 1464 0
 1667 00b2 0026     		movs	r6, #0
 1668 00b4 C5E7     		b	.L151
 1669              	.L158:
 1670 00b6 0026     		movs	r6, #0
 1671 00b8 C3E7     		b	.L151
 1672              	.L159:
1509:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 1673              		.loc 1 1509 0
 1674 00ba 0126     		movs	r6, #1
 1675 00bc C1E7     		b	.L151
 1676              	.L160:
1528:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1677              		.loc 1 1528 0
 1678 00be 0126     		movs	r6, #1
 1679 00c0 BFE7     		b	.L151
 1680              	.LVL161:
 1681              	.L161:
1579:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1682              		.loc 1 1579 0
 1683 00c2 0023     		movs	r3, #0
 1684 00c4 D1E7     		b	.L154
 1685              	.L165:
 1686 00c6 00BF     		.align	2
 1687              	.L164:
 1688 00c8 00000000 		.word	.LANCHOR10
 1689 00cc 00000000 		.word	.LANCHOR4
 1690 00d0 00000000 		.word	.LANCHOR13
 1691 00d4 04ED00E0 		.word	-536810236
 1692              		.cfi_endproc
 1693              	.LFE14:
 1695              		.section	.text.vTaskResume,"ax",%progbits
 1696              		.align	1
 1697              		.global	vTaskResume
 1698              		.syntax unified
 1699              		.thumb
 1700              		.thumb_func
 1701              		.fpu fpv4-sp-d16
 1703              	vTaskResume:
 1704              	.LFB17:
1772:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1705              		.loc 1 1772 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 125


 1706              		.cfi_startproc
 1707              		@ args = 0, pretend = 0, frame = 0
 1708              		@ frame_needed = 0, uses_anonymous_args = 0
 1709              	.LVL162:
 1710 0000 38B5     		push	{r3, r4, r5, lr}
 1711              	.LCFI20:
 1712              		.cfi_def_cfa_offset 16
 1713              		.cfi_offset 3, -16
 1714              		.cfi_offset 4, -12
 1715              		.cfi_offset 5, -8
 1716              		.cfi_offset 14, -4
 1717              	.LVL163:
1776:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1718              		.loc 1 1776 0
 1719 0002 68B1     		cbz	r0, .L173
 1720 0004 0446     		mov	r4, r0
1780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 1721              		.loc 1 1780 0 discriminator 1
 1722 0006 1C4B     		ldr	r3, .L175
 1723 0008 1B68     		ldr	r3, [r3]
 1724 000a 9842     		cmp	r0, r3
 1725 000c 07D0     		beq	.L166
1782:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1726              		.loc 1 1782 0
 1727 000e FFF7FEFF 		bl	vPortEnterCritical
 1728              	.LVL164:
1784:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1729              		.loc 1 1784 0
 1730 0012 2046     		mov	r0, r4
 1731 0014 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1732              	.LVL165:
 1733 0018 58B9     		cbnz	r0, .L174
 1734              	.L170:
1811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 1735              		.loc 1 1811 0
 1736 001a FFF7FEFF 		bl	vPortExitCritical
 1737              	.LVL166:
 1738              	.L166:
 1739 001e 38BD     		pop	{r3, r4, r5, pc}
 1740              	.LVL167:
 1741              	.L173:
 1742              	.LBB138:
 1743              	.LBB139:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1744              		.loc 2 195 0
 1745              		.syntax unified
 1746              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1747 0020 4FF05003 			mov r3, #80												
 1748 0024 83F31188 		msr basepri, r3											
 1749 0028 BFF36F8F 		isb														
 1750 002c BFF34F8F 		dsb														
 1751              	
 1752              	@ 0 "" 2
 1753              	.LVL168:
 1754              		.thumb
 1755              		.syntax unified
 1756              	.L168:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 126


 1757 0030 FEE7     		b	.L168
 1758              	.LVL169:
 1759              	.L174:
 1760              	.LBE139:
 1761              	.LBE138:
1790:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1762              		.loc 1 1790 0
 1763 0032 251D     		adds	r5, r4, #4
 1764 0034 2846     		mov	r0, r5
 1765 0036 FFF7FEFF 		bl	uxListRemove
 1766              	.LVL170:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1767              		.loc 1 1791 0
 1768 003a E36A     		ldr	r3, [r4, #44]
 1769 003c 0F4A     		ldr	r2, .L175+4
 1770 003e 1268     		ldr	r2, [r2]
 1771 0040 9342     		cmp	r3, r2
 1772 0042 01D9     		bls	.L171
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1773              		.loc 1 1791 0 is_stmt 0 discriminator 1
 1774 0044 0D4A     		ldr	r2, .L175+4
 1775 0046 1360     		str	r3, [r2]
 1776              	.L171:
1791:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1777              		.loc 1 1791 0 discriminator 3
 1778 0048 03EB8303 		add	r3, r3, r3, lsl #2
 1779 004c 9A00     		lsls	r2, r3, #2
 1780 004e 2946     		mov	r1, r5
 1781 0050 0B48     		ldr	r0, .L175+8
 1782 0052 1044     		add	r0, r0, r2
 1783 0054 FFF7FEFF 		bl	vListInsertEnd
 1784              	.LVL171:
1794:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1785              		.loc 1 1794 0 is_stmt 1 discriminator 3
 1786 0058 E26A     		ldr	r2, [r4, #44]
 1787 005a 074B     		ldr	r3, .L175
 1788 005c 1B68     		ldr	r3, [r3]
 1789 005e DB6A     		ldr	r3, [r3, #44]
 1790 0060 9A42     		cmp	r2, r3
 1791 0062 DAD3     		bcc	.L170
1799:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1792              		.loc 1 1799 0
 1793 0064 4FF08052 		mov	r2, #268435456
 1794 0068 064B     		ldr	r3, .L175+12
 1795 006a 1A60     		str	r2, [r3]
 1796              		.syntax unified
 1797              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1798 006c BFF34F8F 		dsb
 1799              	@ 0 "" 2
 1800              	@ 1799 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 1801 0070 BFF36F8F 		isb
 1802              	@ 0 "" 2
 1803              		.thumb
 1804              		.syntax unified
 1805 0074 D1E7     		b	.L170
 1806              	.L176:
 1807 0076 00BF     		.align	2
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 127


 1808              	.L175:
 1809 0078 00000000 		.word	.LANCHOR10
 1810 007c 00000000 		.word	.LANCHOR13
 1811 0080 00000000 		.word	.LANCHOR4
 1812 0084 04ED00E0 		.word	-536810236
 1813              		.cfi_endproc
 1814              	.LFE17:
 1816              		.section	.text.xTaskResumeFromISR,"ax",%progbits
 1817              		.align	1
 1818              		.global	xTaskResumeFromISR
 1819              		.syntax unified
 1820              		.thumb
 1821              		.thumb_func
 1822              		.fpu fpv4-sp-d16
 1824              	xTaskResumeFromISR:
 1825              	.LFB18:
1826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xYieldRequired = pdFALSE;
 1826              		.loc 1 1826 0
 1827              		.cfi_startproc
 1828              		@ args = 0, pretend = 0, frame = 0
 1829              		@ frame_needed = 0, uses_anonymous_args = 0
 1830              	.LVL172:
 1831 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1832              	.LCFI21:
 1833              		.cfi_def_cfa_offset 24
 1834              		.cfi_offset 3, -24
 1835              		.cfi_offset 4, -20
 1836              		.cfi_offset 5, -16
 1837              		.cfi_offset 6, -12
 1838              		.cfi_offset 7, -8
 1839              		.cfi_offset 14, -4
 1840              	.LVL173:
1831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1841              		.loc 1 1831 0
 1842 0002 0028     		cmp	r0, #0
 1843 0004 32D0     		beq	.L187
 1844 0006 0446     		mov	r4, r0
1849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1845              		.loc 1 1849 0
 1846 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 1847              	.LVL174:
 1848              	.LBB140:
 1849              	.LBB141:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1850              		.loc 2 211 0
 1851              		.syntax unified
 1852              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1853 000c EFF31187 			mrs r7, basepri											
 1854 0010 4FF05003 		mov r3, #80												
 1855 0014 83F31188 		msr basepri, r3											
 1856 0018 BFF36F8F 		isb														
 1857 001c BFF34F8F 		dsb														
 1858              	
 1859              	@ 0 "" 2
 1860              		.thumb
 1861              		.syntax unified
 1862              	.LBE141:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 128


 1863              	.LBE140:
1853:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 1864              		.loc 1 1853 0
 1865 0020 2046     		mov	r0, r4
 1866 0022 FFF7FEFF 		bl	prvTaskIsTaskSuspended
 1867              	.LVL175:
 1868 0026 0028     		cmp	r0, #0
 1869 0028 32D0     		beq	.L184
1858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 1870              		.loc 1 1858 0
 1871 002a 1A4B     		ldr	r3, .L188
 1872 002c 1B68     		ldr	r3, [r3]
 1873 002e 43BB     		cbnz	r3, .L181
1862:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 1874              		.loc 1 1862 0
 1875 0030 E26A     		ldr	r2, [r4, #44]
 1876 0032 194B     		ldr	r3, .L188+4
 1877 0034 1B68     		ldr	r3, [r3]
 1878 0036 DB6A     		ldr	r3, [r3, #44]
 1879 0038 9A42     		cmp	r2, r3
 1880 003a 20D2     		bcs	.L185
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1881              		.loc 1 1827 0
 1882 003c 0025     		movs	r5, #0
 1883              	.L182:
 1884              	.LVL176:
1871:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 1885              		.loc 1 1871 0
 1886 003e 261D     		adds	r6, r4, #4
 1887 0040 3046     		mov	r0, r6
 1888 0042 FFF7FEFF 		bl	uxListRemove
 1889              	.LVL177:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1890              		.loc 1 1872 0
 1891 0046 E36A     		ldr	r3, [r4, #44]
 1892 0048 144A     		ldr	r2, .L188+8
 1893 004a 1268     		ldr	r2, [r2]
 1894 004c 9342     		cmp	r3, r2
 1895 004e 01D9     		bls	.L183
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1896              		.loc 1 1872 0 is_stmt 0 discriminator 1
 1897 0050 124A     		ldr	r2, .L188+8
 1898 0052 1360     		str	r3, [r2]
 1899              	.L183:
1872:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1900              		.loc 1 1872 0 discriminator 3
 1901 0054 03EB8303 		add	r3, r3, r3, lsl #2
 1902 0058 9A00     		lsls	r2, r3, #2
 1903 005a 3146     		mov	r1, r6
 1904 005c 1048     		ldr	r0, .L188+12
 1905 005e 1044     		add	r0, r0, r2
 1906 0060 FFF7FEFF 		bl	vListInsertEnd
 1907              	.LVL178:
 1908              	.L180:
 1909              	.LBB142:
 1910              	.LBB143:
 1911              		.loc 2 229 0 is_stmt 1
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 129


 1912              		.syntax unified
 1913              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1914 0064 87F31188 			msr basepri, r7	
 1915              	@ 0 "" 2
 1916              	.LVL179:
 1917              		.thumb
 1918              		.syntax unified
 1919              	.LBE143:
 1920              	.LBE142:
1890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 1921              		.loc 1 1890 0
 1922 0068 2846     		mov	r0, r5
 1923 006a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1924              	.LVL180:
 1925              	.L187:
 1926              	.LBB144:
 1927              	.LBB145:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 1928              		.loc 2 195 0
 1929              		.syntax unified
 1930              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 1931 006c 4FF05003 			mov r3, #80												
 1932 0070 83F31188 		msr basepri, r3											
 1933 0074 BFF36F8F 		isb														
 1934 0078 BFF34F8F 		dsb														
 1935              	
 1936              	@ 0 "" 2
 1937              	.LVL181:
 1938              		.thumb
 1939              		.syntax unified
 1940              	.L179:
 1941 007c FEE7     		b	.L179
 1942              	.LVL182:
 1943              	.L185:
 1944              	.LBE145:
 1945              	.LBE144:
1864:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 1946              		.loc 1 1864 0
 1947 007e 0125     		movs	r5, #1
 1948 0080 DDE7     		b	.L182
 1949              	.L181:
1879:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 1950              		.loc 1 1879 0
 1951 0082 04F11801 		add	r1, r4, #24
 1952 0086 0748     		ldr	r0, .L188+16
 1953 0088 FFF7FEFF 		bl	vListInsertEnd
 1954              	.LVL183:
1827:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) xTaskToResume;
 1955              		.loc 1 1827 0
 1956 008c 0025     		movs	r5, #0
 1957 008e E9E7     		b	.L180
 1958              	.L184:
 1959 0090 0025     		movs	r5, #0
 1960 0092 E7E7     		b	.L180
 1961              	.L189:
 1962              		.align	2
 1963              	.L188:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 130


 1964 0094 00000000 		.word	.LANCHOR16
 1965 0098 00000000 		.word	.LANCHOR10
 1966 009c 00000000 		.word	.LANCHOR13
 1967 00a0 00000000 		.word	.LANCHOR4
 1968 00a4 00000000 		.word	.LANCHOR1
 1969              		.cfi_endproc
 1970              	.LFE18:
 1972              		.section	.text.vTaskStartScheduler,"ax",%progbits
 1973              		.align	1
 1974              		.global	vTaskStartScheduler
 1975              		.syntax unified
 1976              		.thumb
 1977              		.thumb_func
 1978              		.fpu fpv4-sp-d16
 1980              	vTaskStartScheduler:
 1981              	.LFB19:
1896:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 1982              		.loc 1 1896 0
 1983              		.cfi_startproc
 1984              		@ args = 0, pretend = 0, frame = 16
 1985              		@ frame_needed = 0, uses_anonymous_args = 0
 1986 0000 10B5     		push	{r4, lr}
 1987              	.LCFI22:
 1988              		.cfi_def_cfa_offset 8
 1989              		.cfi_offset 4, -8
 1990              		.cfi_offset 14, -4
 1991 0002 88B0     		sub	sp, sp, #32
 1992              	.LCFI23:
 1993              		.cfi_def_cfa_offset 40
 1994              	.LBB146:
1902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		StackType_t *pxIdleTaskStackBuffer = NULL;
 1995              		.loc 1 1902 0
 1996 0004 0024     		movs	r4, #0
 1997 0006 0594     		str	r4, [sp, #20]
1903:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		uint32_t ulIdleTaskStackSize;
 1998              		.loc 1 1903 0
 1999 0008 0694     		str	r4, [sp, #24]
1908:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 2000              		.loc 1 1908 0
 2001 000a 07AA     		add	r2, sp, #28
 2002 000c 06A9     		add	r1, sp, #24
 2003 000e 05A8     		add	r0, sp, #20
 2004 0010 FFF7FEFF 		bl	vApplicationGetIdleTaskMemory
 2005              	.LVL184:
1909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 												configIDLE_TASK_NAME,
 2006              		.loc 1 1909 0
 2007 0014 059B     		ldr	r3, [sp, #20]
 2008 0016 0293     		str	r3, [sp, #8]
 2009 0018 069B     		ldr	r3, [sp, #24]
 2010 001a 0193     		str	r3, [sp, #4]
 2011 001c 0094     		str	r4, [sp]
 2012 001e 2346     		mov	r3, r4
 2013 0020 079A     		ldr	r2, [sp, #28]
 2014 0022 1949     		ldr	r1, .L201
 2015 0024 1948     		ldr	r0, .L201+4
 2016 0026 FFF7FEFF 		bl	xTaskCreateStatic
 2017              	.LVL185:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 131


1917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2018              		.loc 1 1917 0
 2019 002a 48B1     		cbz	r0, .L196
1919:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2020              		.loc 1 1919 0
 2021 002c 0120     		movs	r0, #1
 2022              	.L191:
 2023              	.LVL186:
 2024              	.LBE146:
1940:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2025              		.loc 1 1940 0
 2026 002e 0128     		cmp	r0, #1
 2027 0030 08D0     		beq	.L198
 2028              	.L192:
1951:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2029              		.loc 1 1951 0
 2030 0032 0128     		cmp	r0, #1
 2031 0034 09D0     		beq	.L199
2006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2032              		.loc 1 2006 0
 2033 0036 B0F1FF3F 		cmp	r0, #-1
 2034 003a 1BD0     		beq	.L200
 2035              	.LVL187:
 2036              	.L190:
2012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2037              		.loc 1 2012 0
 2038 003c 08B0     		add	sp, sp, #32
 2039              	.LCFI24:
 2040              		.cfi_remember_state
 2041              		.cfi_def_cfa_offset 8
 2042              		@ sp needed
 2043 003e 10BD     		pop	{r4, pc}
 2044              	.L196:
 2045              	.LCFI25:
 2046              		.cfi_restore_state
 2047              	.LBB147:
1923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2048              		.loc 1 1923 0
 2049 0040 0020     		movs	r0, #0
 2050 0042 F4E7     		b	.L191
 2051              	.LVL188:
 2052              	.L198:
 2053              	.LBE147:
1942:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2054              		.loc 1 1942 0
 2055 0044 FFF7FEFF 		bl	xTimerCreateTimerTask
 2056              	.LVL189:
 2057 0048 F3E7     		b	.L192
 2058              	.L199:
 2059              	.LBB148:
 2060              	.LBB149:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2061              		.loc 2 195 0
 2062              		.syntax unified
 2063              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2064 004a 4FF05003 			mov r3, #80												
 2065 004e 83F31188 		msr basepri, r3											
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 132


 2066 0052 BFF36F8F 		isb														
 2067 0056 BFF34F8F 		dsb														
 2068              	
 2069              	@ 0 "" 2
 2070              		.thumb
 2071              		.syntax unified
 2072              	.LBE149:
 2073              	.LBE148:
1977:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xSchedulerRunning = pdTRUE;
 2074              		.loc 1 1977 0
 2075 005a 4FF0FF32 		mov	r2, #-1
 2076 005e 0C4B     		ldr	r3, .L201+8
 2077 0060 1A60     		str	r2, [r3]
1978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		xTickCount = ( TickType_t ) 0U;
 2078              		.loc 1 1978 0
 2079 0062 0122     		movs	r2, #1
 2080 0064 0B4B     		ldr	r3, .L201+12
 2081 0066 1A60     		str	r2, [r3]
1979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2082              		.loc 1 1979 0
 2083 0068 0022     		movs	r2, #0
 2084 006a 0B4B     		ldr	r3, .L201+16
 2085 006c 1A60     		str	r2, [r3]
1991:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2086              		.loc 1 1991 0
 2087 006e FFF7FEFF 		bl	xPortStartScheduler
 2088              	.LVL190:
 2089 0072 E3E7     		b	.L190
 2090              	.LVL191:
 2091              	.L200:
 2092              	.LBB150:
 2093              	.LBB151:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2094              		.loc 2 195 0
 2095              		.syntax unified
 2096              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2097 0074 4FF05003 			mov r3, #80												
 2098 0078 83F31188 		msr basepri, r3											
 2099 007c BFF36F8F 		isb														
 2100 0080 BFF34F8F 		dsb														
 2101              	
 2102              	@ 0 "" 2
 2103              	.LVL192:
 2104              		.thumb
 2105              		.syntax unified
 2106              	.L195:
 2107 0084 FEE7     		b	.L195
 2108              	.L202:
 2109 0086 00BF     		.align	2
 2110              	.L201:
 2111 0088 00000000 		.word	.LC0
 2112 008c 00000000 		.word	prvIdleTask
 2113 0090 00000000 		.word	.LANCHOR3
 2114 0094 00000000 		.word	.LANCHOR11
 2115 0098 00000000 		.word	.LANCHOR15
 2116              	.LBE151:
 2117              	.LBE150:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 133


 2118              		.cfi_endproc
 2119              	.LFE19:
 2121              		.section	.text.vTaskEndScheduler,"ax",%progbits
 2122              		.align	1
 2123              		.global	vTaskEndScheduler
 2124              		.syntax unified
 2125              		.thumb
 2126              		.thumb_func
 2127              		.fpu fpv4-sp-d16
 2129              	vTaskEndScheduler:
 2130              	.LFB20:
2016:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* Stop the scheduler interrupts and call the portable scheduler end
 2131              		.loc 1 2016 0
 2132              		.cfi_startproc
 2133              		@ args = 0, pretend = 0, frame = 0
 2134              		@ frame_needed = 0, uses_anonymous_args = 0
 2135 0000 08B5     		push	{r3, lr}
 2136              	.LCFI26:
 2137              		.cfi_def_cfa_offset 8
 2138              		.cfi_offset 3, -8
 2139              		.cfi_offset 14, -4
 2140              	.LBB152:
 2141              	.LBB153:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2142              		.loc 2 195 0
 2143              		.syntax unified
 2144              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2145 0002 4FF05003 			mov r3, #80												
 2146 0006 83F31188 		msr basepri, r3											
 2147 000a BFF36F8F 		isb														
 2148 000e BFF34F8F 		dsb														
 2149              	
 2150              	@ 0 "" 2
 2151              		.thumb
 2152              		.syntax unified
 2153              	.LBE153:
 2154              	.LBE152:
2021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	vPortEndScheduler();
 2155              		.loc 1 2021 0
 2156 0012 0022     		movs	r2, #0
 2157 0014 024B     		ldr	r3, .L205
 2158 0016 1A60     		str	r2, [r3]
2022:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2159              		.loc 1 2022 0
 2160 0018 FFF7FEFF 		bl	vPortEndScheduler
 2161              	.LVL193:
 2162 001c 08BD     		pop	{r3, pc}
 2163              	.L206:
 2164 001e 00BF     		.align	2
 2165              	.L205:
 2166 0020 00000000 		.word	.LANCHOR11
 2167              		.cfi_endproc
 2168              	.LFE20:
 2170              		.section	.text.vTaskSuspendAll,"ax",%progbits
 2171              		.align	1
 2172              		.global	vTaskSuspendAll
 2173              		.syntax unified
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 134


 2174              		.thumb
 2175              		.thumb_func
 2176              		.fpu fpv4-sp-d16
 2178              	vTaskSuspendAll:
 2179              	.LFB21:
2027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required as the variable is of type
 2180              		.loc 1 2027 0
 2181              		.cfi_startproc
 2182              		@ args = 0, pretend = 0, frame = 0
 2183              		@ frame_needed = 0, uses_anonymous_args = 0
 2184              		@ link register save eliminated.
2032:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2185              		.loc 1 2032 0
 2186 0000 024A     		ldr	r2, .L208
 2187 0002 1368     		ldr	r3, [r2]
 2188 0004 0133     		adds	r3, r3, #1
 2189 0006 1360     		str	r3, [r2]
 2190 0008 7047     		bx	lr
 2191              	.L209:
 2192 000a 00BF     		.align	2
 2193              	.L208:
 2194 000c 00000000 		.word	.LANCHOR16
 2195              		.cfi_endproc
 2196              	.LFE21:
 2198              		.section	.text.xTaskGetTickCount,"ax",%progbits
 2199              		.align	1
 2200              		.global	xTaskGetTickCount
 2201              		.syntax unified
 2202              		.thumb
 2203              		.thumb_func
 2204              		.fpu fpv4-sp-d16
 2206              	xTaskGetTickCount:
 2207              	.LFB23:
2210:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xTicks;
 2208              		.loc 1 2210 0
 2209              		.cfi_startproc
 2210              		@ args = 0, pretend = 0, frame = 0
 2211              		@ frame_needed = 0, uses_anonymous_args = 0
 2212              		@ link register save eliminated.
2216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2213              		.loc 1 2216 0
 2214 0000 014B     		ldr	r3, .L211
 2215 0002 1868     		ldr	r0, [r3]
 2216              	.LVL194:
2221:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2217              		.loc 1 2221 0
 2218 0004 7047     		bx	lr
 2219              	.L212:
 2220 0006 00BF     		.align	2
 2221              	.L211:
 2222 0008 00000000 		.word	.LANCHOR15
 2223              		.cfi_endproc
 2224              	.LFE23:
 2226              		.section	.text.xTaskGetTickCountFromISR,"ax",%progbits
 2227              		.align	1
 2228              		.global	xTaskGetTickCountFromISR
 2229              		.syntax unified
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 135


 2230              		.thumb
 2231              		.thumb_func
 2232              		.fpu fpv4-sp-d16
 2234              	xTaskGetTickCountFromISR:
 2235              	.LFB24:
2225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t xReturn;
 2236              		.loc 1 2225 0
 2237              		.cfi_startproc
 2238              		@ args = 0, pretend = 0, frame = 0
 2239              		@ frame_needed = 0, uses_anonymous_args = 0
 2240 0000 08B5     		push	{r3, lr}
 2241              	.LCFI27:
 2242              		.cfi_def_cfa_offset 8
 2243              		.cfi_offset 3, -8
 2244              		.cfi_offset 14, -4
2243:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2245              		.loc 1 2243 0
 2246 0002 FFF7FEFF 		bl	vPortValidateInterruptPriority
 2247              	.LVL195:
2247:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 2248              		.loc 1 2247 0
 2249 0006 014B     		ldr	r3, .L215
 2250 0008 1868     		ldr	r0, [r3]
 2251              	.LVL196:
2252:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2252              		.loc 1 2252 0
 2253 000a 08BD     		pop	{r3, pc}
 2254              	.L216:
 2255              		.align	2
 2256              	.L215:
 2257 000c 00000000 		.word	.LANCHOR15
 2258              		.cfi_endproc
 2259              	.LFE24:
 2261              		.section	.text.uxTaskGetNumberOfTasks,"ax",%progbits
 2262              		.align	1
 2263              		.global	uxTaskGetNumberOfTasks
 2264              		.syntax unified
 2265              		.thumb
 2266              		.thumb_func
 2267              		.fpu fpv4-sp-d16
 2269              	uxTaskGetNumberOfTasks:
 2270              	.LFB25:
2256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* A critical section is not required because the variables are of type
 2271              		.loc 1 2256 0
 2272              		.cfi_startproc
 2273              		@ args = 0, pretend = 0, frame = 0
 2274              		@ frame_needed = 0, uses_anonymous_args = 0
 2275              		@ link register save eliminated.
2259:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 2276              		.loc 1 2259 0
 2277 0000 014B     		ldr	r3, .L218
 2278 0002 1868     		ldr	r0, [r3]
2260:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2279              		.loc 1 2260 0
 2280 0004 7047     		bx	lr
 2281              	.L219:
 2282 0006 00BF     		.align	2
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 136


 2283              	.L218:
 2284 0008 00000000 		.word	.LANCHOR9
 2285              		.cfi_endproc
 2286              	.LFE25:
 2288              		.section	.text.pcTaskGetName,"ax",%progbits
 2289              		.align	1
 2290              		.global	pcTaskGetName
 2291              		.syntax unified
 2292              		.thumb
 2293              		.thumb_func
 2294              		.fpu fpv4-sp-d16
 2296              	pcTaskGetName:
 2297              	.LFB26:
2264:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB;
 2298              		.loc 1 2264 0
 2299              		.cfi_startproc
 2300              		@ args = 0, pretend = 0, frame = 0
 2301              		@ frame_needed = 0, uses_anonymous_args = 0
 2302              		@ link register save eliminated.
 2303              	.LVL197:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2304              		.loc 1 2269 0
 2305 0000 10B1     		cbz	r0, .L225
 2306              	.LVL198:
 2307              	.L221:
2270:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	return &( pxTCB->pcTaskName[ 0 ] );
 2308              		.loc 1 2270 0 discriminator 4
 2309 0002 20B1     		cbz	r0, .L226
2272:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2310              		.loc 1 2272 0
 2311 0004 3430     		adds	r0, r0, #52
 2312              	.LVL199:
 2313 0006 7047     		bx	lr
 2314              	.LVL200:
 2315              	.L225:
2269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTCB );
 2316              		.loc 1 2269 0 discriminator 1
 2317 0008 054B     		ldr	r3, .L227
 2318 000a 1868     		ldr	r0, [r3]
 2319              	.LVL201:
 2320 000c F9E7     		b	.L221
 2321              	.LVL202:
 2322              	.L226:
 2323              	.LBB154:
 2324              	.LBB155:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2325              		.loc 2 195 0
 2326              		.syntax unified
 2327              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2328 000e 4FF05003 			mov r3, #80												
 2329 0012 83F31188 		msr basepri, r3											
 2330 0016 BFF36F8F 		isb														
 2331 001a BFF34F8F 		dsb														
 2332              	
 2333              	@ 0 "" 2
 2334              	.LVL203:
 2335              		.thumb
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 137


 2336              		.syntax unified
 2337              	.L223:
 2338 001e FEE7     		b	.L223
 2339              	.L228:
 2340              		.align	2
 2341              	.L227:
 2342 0020 00000000 		.word	.LANCHOR10
 2343              	.LBE155:
 2344              	.LBE154:
 2345              		.cfi_endproc
 2346              	.LFE26:
 2348              		.section	.text.xTaskIncrementTick,"ax",%progbits
 2349              		.align	1
 2350              		.global	xTaskIncrementTick
 2351              		.syntax unified
 2352              		.thumb
 2353              		.thumb_func
 2354              		.fpu fpv4-sp-d16
 2356              	xTaskIncrementTick:
 2357              	.LFB28:
2584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t * pxTCB;
 2358              		.loc 1 2584 0
 2359              		.cfi_startproc
 2360              		@ args = 0, pretend = 0, frame = 0
 2361              		@ frame_needed = 0, uses_anonymous_args = 0
 2362 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2363              	.LCFI28:
 2364              		.cfi_def_cfa_offset 24
 2365              		.cfi_offset 3, -24
 2366              		.cfi_offset 4, -20
 2367              		.cfi_offset 5, -16
 2368              		.cfi_offset 6, -12
 2369              		.cfi_offset 7, -8
 2370              		.cfi_offset 14, -4
 2371              	.LVL204:
2593:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2372              		.loc 1 2593 0
 2373 0002 3C4B     		ldr	r3, .L254
 2374 0004 1B68     		ldr	r3, [r3]
 2375 0006 002B     		cmp	r3, #0
 2376 0008 68D1     		bne	.L230
 2377              	.LBB156:
2597:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2378              		.loc 1 2597 0
 2379 000a 3B4B     		ldr	r3, .L254+4
 2380 000c 1D68     		ldr	r5, [r3]
 2381 000e 0135     		adds	r5, r5, #1
 2382              	.LVL205:
2601:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2383              		.loc 1 2601 0
 2384 0010 1D60     		str	r5, [r3]
2603:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2385              		.loc 1 2603 0
 2386 0012 C5B9     		cbnz	r5, .L231
 2387              	.LBB157:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2388              		.loc 1 2605 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 138


 2389 0014 394B     		ldr	r3, .L254+8
 2390 0016 1B68     		ldr	r3, [r3]
 2391 0018 1B68     		ldr	r3, [r3]
 2392 001a 43B1     		cbz	r3, .L232
 2393              	.LBB158:
 2394              	.LBB159:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2395              		.loc 2 195 0
 2396              		.syntax unified
 2397              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2398 001c 4FF05003 			mov r3, #80												
 2399 0020 83F31188 		msr basepri, r3											
 2400 0024 BFF36F8F 		isb														
 2401 0028 BFF34F8F 		dsb														
 2402              	
 2403              	@ 0 "" 2
 2404              	.LVL206:
 2405              		.thumb
 2406              		.syntax unified
 2407              	.L233:
 2408 002c FEE7     		b	.L233
 2409              	.L232:
 2410              	.LBE159:
 2411              	.LBE158:
2605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2412              		.loc 1 2605 0 discriminator 2
 2413 002e 334A     		ldr	r2, .L254+8
 2414 0030 1168     		ldr	r1, [r2]
 2415              	.LVL207:
 2416 0032 334B     		ldr	r3, .L254+12
 2417 0034 1868     		ldr	r0, [r3]
 2418 0036 1060     		str	r0, [r2]
 2419 0038 1960     		str	r1, [r3]
 2420 003a 324A     		ldr	r2, .L254+16
 2421 003c 1368     		ldr	r3, [r2]
 2422 003e 0133     		adds	r3, r3, #1
 2423 0040 1360     		str	r3, [r2]
 2424 0042 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2425              	.LVL208:
 2426              	.L231:
 2427              	.LBE157:
2616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2428              		.loc 1 2616 0
 2429 0046 304B     		ldr	r3, .L254+20
 2430 0048 1B68     		ldr	r3, [r3]
 2431 004a 9D42     		cmp	r5, r3
 2432 004c 3AD2     		bcs	.L245
 2433              	.LBE156:
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2434              		.loc 1 2587 0
 2435 004e 0024     		movs	r4, #0
 2436              	.LVL209:
 2437              	.L235:
 2438              	.LBB160:
2699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2439              		.loc 1 2699 0
 2440 0050 2E4B     		ldr	r3, .L254+24
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 139


 2441 0052 1B68     		ldr	r3, [r3]
 2442 0054 DB6A     		ldr	r3, [r3, #44]
 2443 0056 03EB8303 		add	r3, r3, r3, lsl #2
 2444 005a 9A00     		lsls	r2, r3, #2
 2445 005c 2C4B     		ldr	r3, .L254+28
 2446 005e 9B58     		ldr	r3, [r3, r2]
 2447 0060 012B     		cmp	r3, #1
 2448 0062 40D9     		bls	.L243
2701:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2449              		.loc 1 2701 0
 2450 0064 0124     		movs	r4, #1
 2451              	.LVL210:
 2452 0066 3EE0     		b	.L243
 2453              	.LVL211:
 2454              	.L247:
2682:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						}
 2455              		.loc 1 2682 0
 2456 0068 0124     		movs	r4, #1
 2457              	.LVL212:
 2458              	.L234:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2459              		.loc 1 2620 0
 2460 006a 244B     		ldr	r3, .L254+8
 2461 006c 1B68     		ldr	r3, [r3]
 2462 006e 1B68     		ldr	r3, [r3]
 2463 0070 53B3     		cbz	r3, .L251
 2464 0072 0023     		movs	r3, #0
 2465              	.L236:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2466              		.loc 1 2620 0 is_stmt 0 discriminator 4
 2467 0074 53BB     		cbnz	r3, .L252
2636:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 2468              		.loc 1 2636 0 is_stmt 1
 2469 0076 214B     		ldr	r3, .L254+8
 2470 0078 1B68     		ldr	r3, [r3]
 2471 007a DB68     		ldr	r3, [r3, #12]
 2472 007c DE68     		ldr	r6, [r3, #12]
 2473              	.LVL213:
2637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2474              		.loc 1 2637 0
 2475 007e 7368     		ldr	r3, [r6, #4]
 2476              	.LVL214:
2639:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2477              		.loc 1 2639 0
 2478 0080 9D42     		cmp	r5, r3
 2479 0082 28D3     		bcc	.L253
2655:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2480              		.loc 1 2655 0
 2481 0084 371D     		adds	r7, r6, #4
 2482 0086 3846     		mov	r0, r7
 2483 0088 FFF7FEFF 		bl	uxListRemove
 2484              	.LVL215:
2659:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2485              		.loc 1 2659 0
 2486 008c B36A     		ldr	r3, [r6, #40]
 2487 008e 1BB1     		cbz	r3, .L239
2661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 140


 2488              		.loc 1 2661 0
 2489 0090 06F11800 		add	r0, r6, #24
 2490 0094 FFF7FEFF 		bl	uxListRemove
 2491              	.LVL216:
 2492              	.L239:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2493              		.loc 1 2670 0
 2494 0098 F36A     		ldr	r3, [r6, #44]
 2495 009a 1E4A     		ldr	r2, .L254+32
 2496 009c 1268     		ldr	r2, [r2]
 2497 009e 9342     		cmp	r3, r2
 2498 00a0 01D9     		bls	.L240
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2499              		.loc 1 2670 0 is_stmt 0 discriminator 1
 2500 00a2 1C4A     		ldr	r2, .L254+32
 2501 00a4 1360     		str	r3, [r2]
 2502              	.L240:
2670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2503              		.loc 1 2670 0 discriminator 3
 2504 00a6 03EB8303 		add	r3, r3, r3, lsl #2
 2505 00aa 9A00     		lsls	r2, r3, #2
 2506 00ac 3946     		mov	r1, r7
 2507 00ae 1848     		ldr	r0, .L254+28
 2508 00b0 1044     		add	r0, r0, r2
 2509 00b2 FFF7FEFF 		bl	vListInsertEnd
 2510              	.LVL217:
2680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 2511              		.loc 1 2680 0 is_stmt 1 discriminator 3
 2512 00b6 F26A     		ldr	r2, [r6, #44]
 2513 00b8 144B     		ldr	r3, .L254+24
 2514 00ba 1B68     		ldr	r3, [r3]
 2515 00bc DB6A     		ldr	r3, [r3, #44]
 2516 00be 9A42     		cmp	r2, r3
 2517 00c0 D2D2     		bcs	.L247
 2518 00c2 D2E7     		b	.L234
 2519              	.LVL218:
 2520              	.L245:
 2521 00c4 0024     		movs	r4, #0
 2522 00c6 D0E7     		b	.L234
 2523              	.LVL219:
 2524              	.L251:
2620:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2525              		.loc 1 2620 0
 2526 00c8 0123     		movs	r3, #1
 2527 00ca D3E7     		b	.L236
 2528              	.L252:
2627:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 2529              		.loc 1 2627 0
 2530 00cc 4FF0FF32 		mov	r2, #-1
 2531 00d0 0D4B     		ldr	r3, .L254+20
 2532 00d2 1A60     		str	r2, [r3]
2628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2533              		.loc 1 2628 0
 2534 00d4 BCE7     		b	.L235
 2535              	.LVL220:
 2536              	.L253:
2646:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						break;
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 141


 2537              		.loc 1 2646 0
 2538 00d6 0C4A     		ldr	r2, .L254+20
 2539 00d8 1360     		str	r3, [r2]
2647:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2540              		.loc 1 2647 0
 2541 00da B9E7     		b	.L235
 2542              	.LVL221:
 2543              	.L230:
 2544              	.LBE160:
2727:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2545              		.loc 1 2727 0
 2546 00dc 0E4A     		ldr	r2, .L254+36
 2547 00de 1368     		ldr	r3, [r2]
 2548 00e0 0133     		adds	r3, r3, #1
 2549 00e2 1360     		str	r3, [r2]
2587:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2550              		.loc 1 2587 0
 2551 00e4 0024     		movs	r4, #0
 2552              	.LVL222:
 2553              	.L243:
2740:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2554              		.loc 1 2740 0
 2555 00e6 0D4B     		ldr	r3, .L254+40
 2556 00e8 1B68     		ldr	r3, [r3]
 2557 00ea 03B1     		cbz	r3, .L229
2742:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2558              		.loc 1 2742 0
 2559 00ec 0124     		movs	r4, #1
 2560              	.LVL223:
 2561              	.L229:
2752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2562              		.loc 1 2752 0
 2563 00ee 2046     		mov	r0, r4
 2564 00f0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2565              	.L255:
 2566 00f2 00BF     		.align	2
 2567              	.L254:
 2568 00f4 00000000 		.word	.LANCHOR16
 2569 00f8 00000000 		.word	.LANCHOR15
 2570 00fc 00000000 		.word	.LANCHOR2
 2571 0100 00000000 		.word	.LANCHOR8
 2572 0104 00000000 		.word	.LANCHOR17
 2573 0108 00000000 		.word	.LANCHOR3
 2574 010c 00000000 		.word	.LANCHOR10
 2575 0110 00000000 		.word	.LANCHOR4
 2576 0114 00000000 		.word	.LANCHOR13
 2577 0118 00000000 		.word	.LANCHOR18
 2578 011c 00000000 		.word	.LANCHOR19
 2579              		.cfi_endproc
 2580              	.LFE28:
 2582              		.section	.text.xTaskResumeAll,"ax",%progbits
 2583              		.align	1
 2584              		.global	xTaskResumeAll
 2585              		.syntax unified
 2586              		.thumb
 2587              		.thumb_func
 2588              		.fpu fpv4-sp-d16
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 142


 2590              	xTaskResumeAll:
 2591              	.LFB22:
2100:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxTCB = NULL;
 2592              		.loc 1 2100 0
 2593              		.cfi_startproc
 2594              		@ args = 0, pretend = 0, frame = 0
 2595              		@ frame_needed = 0, uses_anonymous_args = 0
 2596 0000 38B5     		push	{r3, r4, r5, lr}
 2597              	.LCFI29:
 2598              		.cfi_def_cfa_offset 16
 2599              		.cfi_offset 3, -16
 2600              		.cfi_offset 4, -12
 2601              		.cfi_offset 5, -8
 2602              		.cfi_offset 14, -4
 2603              	.LVL224:
2106:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2604              		.loc 1 2106 0
 2605 0002 354B     		ldr	r3, .L274
 2606 0004 1B68     		ldr	r3, [r3]
 2607 0006 43B9     		cbnz	r3, .L257
 2608              	.LBB161:
 2609              	.LBB162:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2610              		.loc 2 195 0
 2611              		.syntax unified
 2612              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2613 0008 4FF05003 			mov r3, #80												
 2614 000c 83F31188 		msr basepri, r3											
 2615 0010 BFF36F8F 		isb														
 2616 0014 BFF34F8F 		dsb														
 2617              	
 2618              	@ 0 "" 2
 2619              	.LVL225:
 2620              		.thumb
 2621              		.syntax unified
 2622              	.L258:
 2623 0018 FEE7     		b	.L258
 2624              	.L257:
 2625              	.LBE162:
 2626              	.LBE161:
2113:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 2627              		.loc 1 2113 0
 2628 001a FFF7FEFF 		bl	vPortEnterCritical
 2629              	.LVL226:
2115:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2630              		.loc 1 2115 0
 2631 001e 2E4B     		ldr	r3, .L274
 2632 0020 1A68     		ldr	r2, [r3]
 2633 0022 013A     		subs	r2, r2, #1
 2634 0024 1A60     		str	r2, [r3]
2117:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2635              		.loc 1 2117 0
 2636 0026 1B68     		ldr	r3, [r3]
 2637 0028 002B     		cmp	r3, #0
 2638 002a 50D1     		bne	.L268
2119:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2639              		.loc 1 2119 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 143


 2640 002c 2B4B     		ldr	r3, .L274+4
 2641 002e 1B68     		ldr	r3, [r3]
 2642 0030 23B9     		cbnz	r3, .L269
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2643              		.loc 1 2102 0
 2644 0032 0024     		movs	r4, #0
 2645              	.LVL227:
 2646              	.L259:
2203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2647              		.loc 1 2203 0
 2648 0034 FFF7FEFF 		bl	vPortExitCritical
 2649              	.LVL228:
2206:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 2650              		.loc 1 2206 0
 2651 0038 2046     		mov	r0, r4
 2652 003a 38BD     		pop	{r3, r4, r5, pc}
 2653              	.LVL229:
 2654              	.L269:
 2655 003c 0024     		movs	r4, #0
 2656              	.LVL230:
 2657              	.L260:
2123:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2658              		.loc 1 2123 0
 2659 003e 284B     		ldr	r3, .L274+8
 2660 0040 1B68     		ldr	r3, [r3]
 2661 0042 1BB3     		cbz	r3, .L272
2125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 2662              		.loc 1 2125 0
 2663 0044 264B     		ldr	r3, .L274+8
 2664 0046 DB68     		ldr	r3, [r3, #12]
 2665 0048 DC68     		ldr	r4, [r3, #12]
 2666              	.LVL231:
2126:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 2667              		.loc 1 2126 0
 2668 004a 04F11800 		add	r0, r4, #24
 2669 004e FFF7FEFF 		bl	uxListRemove
 2670              	.LVL232:
2127:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 2671              		.loc 1 2127 0
 2672 0052 251D     		adds	r5, r4, #4
 2673 0054 2846     		mov	r0, r5
 2674 0056 FFF7FEFF 		bl	uxListRemove
 2675              	.LVL233:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2676              		.loc 1 2128 0
 2677 005a E36A     		ldr	r3, [r4, #44]
 2678 005c 214A     		ldr	r2, .L274+12
 2679 005e 1268     		ldr	r2, [r2]
 2680 0060 9342     		cmp	r3, r2
 2681 0062 01D9     		bls	.L261
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2682              		.loc 1 2128 0 is_stmt 0 discriminator 1
 2683 0064 1F4A     		ldr	r2, .L274+12
 2684 0066 1360     		str	r3, [r2]
 2685              	.L261:
2128:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2686              		.loc 1 2128 0 discriminator 3
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 144


 2687 0068 03EB8303 		add	r3, r3, r3, lsl #2
 2688 006c 9A00     		lsls	r2, r3, #2
 2689 006e 2946     		mov	r1, r5
 2690 0070 1D48     		ldr	r0, .L274+16
 2691 0072 1044     		add	r0, r0, r2
 2692 0074 FFF7FEFF 		bl	vListInsertEnd
 2693              	.LVL234:
2132:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2694              		.loc 1 2132 0 is_stmt 1 discriminator 3
 2695 0078 E26A     		ldr	r2, [r4, #44]
 2696 007a 1C4B     		ldr	r3, .L274+20
 2697 007c 1B68     		ldr	r3, [r3]
 2698 007e DB6A     		ldr	r3, [r3, #44]
 2699 0080 9A42     		cmp	r2, r3
 2700 0082 DCD3     		bcc	.L260
2134:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2701              		.loc 1 2134 0
 2702 0084 0122     		movs	r2, #1
 2703 0086 1A4B     		ldr	r3, .L274+24
 2704 0088 1A60     		str	r2, [r3]
 2705 008a D8E7     		b	.L260
 2706              	.L272:
2142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2707              		.loc 1 2142 0
 2708 008c 0CB1     		cbz	r4, .L264
2150:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2709              		.loc 1 2150 0
 2710 008e FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 2711              	.LVL235:
 2712              	.L264:
 2713              	.LBB163:
2158:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2714              		.loc 1 2158 0
 2715 0092 184B     		ldr	r3, .L274+28
 2716 0094 1C68     		ldr	r4, [r3]
 2717              	.LVL236:
2160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 2718              		.loc 1 2160 0
 2719 0096 74B9     		cbnz	r4, .L267
 2720              	.L265:
 2721              	.LBE163:
2183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2722              		.loc 1 2183 0
 2723 0098 154B     		ldr	r3, .L274+24
 2724 009a 1B68     		ldr	r3, [r3]
 2725 009c CBB1     		cbz	r3, .L270
 2726              	.LVL237:
2190:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2727              		.loc 1 2190 0
 2728 009e 4FF08052 		mov	r2, #268435456
 2729 00a2 154B     		ldr	r3, .L274+32
 2730 00a4 1A60     		str	r2, [r3]
 2731              		.syntax unified
 2732              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2733 00a6 BFF34F8F 		dsb
 2734              	@ 0 "" 2
 2735              	@ 2190 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 145


 2736 00aa BFF36F8F 		isb
 2737              	@ 0 "" 2
2187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2738              		.loc 1 2187 0
 2739              		.thumb
 2740              		.syntax unified
 2741 00ae 0124     		movs	r4, #1
 2742              	.LVL238:
 2743 00b0 C0E7     		b	.L259
 2744              	.LVL239:
 2745              	.L266:
 2746              	.LBB164:
2173:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2747              		.loc 1 2173 0
 2748 00b2 013C     		subs	r4, r4, #1
 2749              	.LVL240:
 2750 00b4 07D0     		beq	.L273
 2751              	.L267:
2164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 2752              		.loc 1 2164 0
 2753 00b6 FFF7FEFF 		bl	xTaskIncrementTick
 2754              	.LVL241:
 2755 00ba 0028     		cmp	r0, #0
 2756 00bc F9D0     		beq	.L266
2166:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 2757              		.loc 1 2166 0
 2758 00be 0122     		movs	r2, #1
 2759 00c0 0B4B     		ldr	r3, .L274+24
 2760 00c2 1A60     		str	r2, [r3]
 2761 00c4 F5E7     		b	.L266
 2762              	.L273:
2175:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 2763              		.loc 1 2175 0
 2764 00c6 0022     		movs	r2, #0
 2765 00c8 0A4B     		ldr	r3, .L274+28
 2766 00ca 1A60     		str	r2, [r3]
 2767 00cc E4E7     		b	.L265
 2768              	.LVL242:
 2769              	.L268:
 2770              	.LBE164:
2102:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2771              		.loc 1 2102 0
 2772 00ce 0024     		movs	r4, #0
 2773 00d0 B0E7     		b	.L259
 2774              	.LVL243:
 2775              	.L270:
 2776 00d2 0024     		movs	r4, #0
 2777              	.LVL244:
 2778 00d4 AEE7     		b	.L259
 2779              	.L275:
 2780 00d6 00BF     		.align	2
 2781              	.L274:
 2782 00d8 00000000 		.word	.LANCHOR16
 2783 00dc 00000000 		.word	.LANCHOR9
 2784 00e0 00000000 		.word	.LANCHOR1
 2785 00e4 00000000 		.word	.LANCHOR13
 2786 00e8 00000000 		.word	.LANCHOR4
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 146


 2787 00ec 00000000 		.word	.LANCHOR10
 2788 00f0 00000000 		.word	.LANCHOR19
 2789 00f4 00000000 		.word	.LANCHOR18
 2790 00f8 04ED00E0 		.word	-536810236
 2791              		.cfi_endproc
 2792              	.LFE22:
 2794              		.section	.text.vTaskDelayUntil,"ax",%progbits
 2795              		.align	1
 2796              		.global	vTaskDelayUntil
 2797              		.syntax unified
 2798              		.thumb
 2799              		.thumb_func
 2800              		.fpu fpv4-sp-d16
 2802              	vTaskDelayUntil:
 2803              	.LFB9:
1199:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TickType_t xTimeToWake;
 2804              		.loc 1 1199 0
 2805              		.cfi_startproc
 2806              		@ args = 0, pretend = 0, frame = 0
 2807              		@ frame_needed = 0, uses_anonymous_args = 0
 2808              	.LVL245:
 2809 0000 38B5     		push	{r3, r4, r5, lr}
 2810              	.LCFI30:
 2811              		.cfi_def_cfa_offset 16
 2812              		.cfi_offset 3, -16
 2813              		.cfi_offset 4, -12
 2814              		.cfi_offset 5, -8
 2815              		.cfi_offset 14, -4
 2816              	.LVL246:
1203:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( ( xTimeIncrement > 0U ) );
 2817              		.loc 1 1203 0
 2818 0002 50B1     		cbz	r0, .L292
 2819 0004 0546     		mov	r5, r0
1204:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( uxSchedulerSuspended == 0 );
 2820              		.loc 1 1204 0
 2821 0006 89B9     		cbnz	r1, .L279
 2822              	.LBB165:
 2823              	.LBB166:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2824              		.loc 2 195 0
 2825              		.syntax unified
 2826              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2827 0008 4FF05003 			mov r3, #80												
 2828 000c 83F31188 		msr basepri, r3											
 2829 0010 BFF36F8F 		isb														
 2830 0014 BFF34F8F 		dsb														
 2831              	
 2832              	@ 0 "" 2
 2833              	.LVL247:
 2834              		.thumb
 2835              		.syntax unified
 2836              	.L280:
 2837 0018 FEE7     		b	.L280
 2838              	.L292:
 2839              	.LBE166:
 2840              	.LBE165:
 2841              	.LBB167:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 147


 2842              	.LBB168:
 2843              		.syntax unified
 2844              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2845 001a 4FF05003 			mov r3, #80												
 2846 001e 83F31188 		msr basepri, r3											
 2847 0022 BFF36F8F 		isb														
 2848 0026 BFF34F8F 		dsb														
 2849              	
 2850              	@ 0 "" 2
 2851              	.LVL248:
 2852              		.thumb
 2853              		.syntax unified
 2854              	.L278:
 2855 002a FEE7     		b	.L278
 2856              	.L279:
 2857              	.LBE168:
 2858              	.LBE167:
1205:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2859              		.loc 1 1205 0
 2860 002c 1C4B     		ldr	r3, .L293
 2861 002e 1B68     		ldr	r3, [r3]
 2862 0030 43B1     		cbz	r3, .L281
 2863              	.LBB169:
 2864              	.LBB170:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 2865              		.loc 2 195 0
 2866              		.syntax unified
 2867              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 2868 0032 4FF05003 			mov r3, #80												
 2869 0036 83F31188 		msr basepri, r3											
 2870 003a BFF36F8F 		isb														
 2871 003e BFF34F8F 		dsb														
 2872              	
 2873              	@ 0 "" 2
 2874              	.LVL249:
 2875              		.thumb
 2876              		.syntax unified
 2877              	.L282:
 2878 0042 FEE7     		b	.L282
 2879              	.L281:
 2880 0044 0C46     		mov	r4, r1
 2881              	.LBE170:
 2882              	.LBE169:
1207:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2883              		.loc 1 1207 0
 2884 0046 FFF7FEFF 		bl	vTaskSuspendAll
 2885              	.LVL250:
 2886              	.LBB171:
1211:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2887              		.loc 1 1211 0
 2888 004a 164B     		ldr	r3, .L293+4
 2889 004c 1868     		ldr	r0, [r3]
 2890              	.LVL251:
1214:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2891              		.loc 1 1214 0
 2892 004e 2A68     		ldr	r2, [r5]
 2893 0050 1444     		add	r4, r4, r2
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 148


 2894              	.LVL252:
1216:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2895              		.loc 1 1216 0
 2896 0052 9042     		cmp	r0, r2
 2897 0054 16D2     		bcs	.L283
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2898              		.loc 1 1223 0
 2899 0056 A242     		cmp	r2, r4
 2900 0058 1AD9     		bls	.L287
1223:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2901              		.loc 1 1223 0 is_stmt 0 discriminator 1
 2902 005a A042     		cmp	r0, r4
 2903 005c 1AD3     		bcc	.L288
 2904              	.LBE171:
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2905              		.loc 1 1201 0 is_stmt 1
 2906 005e 0022     		movs	r2, #0
 2907              	.L284:
 2908              	.LVL253:
 2909              	.LBB172:
1248:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2910              		.loc 1 1248 0
 2911 0060 2C60     		str	r4, [r5]
1250:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 2912              		.loc 1 1250 0
 2913 0062 1AB1     		cbz	r2, .L285
1256:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 2914              		.loc 1 1256 0
 2915 0064 0021     		movs	r1, #0
 2916 0066 201A     		subs	r0, r4, r0
 2917              	.LVL254:
 2918 0068 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 2919              	.LVL255:
 2920              	.L285:
 2921              	.LBE172:
1263:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2922              		.loc 1 1263 0
 2923 006c FFF7FEFF 		bl	xTaskResumeAll
 2924              	.LVL256:
1267:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 2925              		.loc 1 1267 0
 2926 0070 38B9     		cbnz	r0, .L276
1269:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 2927              		.loc 1 1269 0
 2928 0072 4FF08052 		mov	r2, #268435456
 2929 0076 0C4B     		ldr	r3, .L293+8
 2930 0078 1A60     		str	r2, [r3]
 2931              		.syntax unified
 2932              	@ 1269 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2933 007a BFF34F8F 		dsb
 2934              	@ 0 "" 2
 2935              	@ 1269 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 2936 007e BFF36F8F 		isb
 2937              	@ 0 "" 2
 2938              		.thumb
 2939              		.syntax unified
 2940              	.L276:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 149


 2941 0082 38BD     		pop	{r3, r4, r5, pc}
 2942              	.LVL257:
 2943              	.L283:
 2944              	.LBB173:
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2945              		.loc 1 1237 0
 2946 0084 A242     		cmp	r2, r4
 2947 0086 07D8     		bhi	.L289
1237:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 2948              		.loc 1 1237 0 is_stmt 0 discriminator 1
 2949 0088 A042     		cmp	r0, r4
 2950 008a 07D3     		bcc	.L290
 2951              	.LBE173:
1201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 2952              		.loc 1 1201 0 is_stmt 1
 2953 008c 0022     		movs	r2, #0
 2954 008e E7E7     		b	.L284
 2955              	.L287:
 2956 0090 0022     		movs	r2, #0
 2957 0092 E5E7     		b	.L284
 2958              	.L288:
 2959              	.LBB174:
1225:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2960              		.loc 1 1225 0
 2961 0094 0122     		movs	r2, #1
 2962 0096 E3E7     		b	.L284
 2963              	.L289:
1239:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 2964              		.loc 1 1239 0
 2965 0098 0122     		movs	r2, #1
 2966 009a E1E7     		b	.L284
 2967              	.L290:
 2968 009c 0122     		movs	r2, #1
 2969 009e DFE7     		b	.L284
 2970              	.L294:
 2971              		.align	2
 2972              	.L293:
 2973 00a0 00000000 		.word	.LANCHOR16
 2974 00a4 00000000 		.word	.LANCHOR15
 2975 00a8 04ED00E0 		.word	-536810236
 2976              	.LBE174:
 2977              		.cfi_endproc
 2978              	.LFE9:
 2980              		.section	.text.vTaskDelay,"ax",%progbits
 2981              		.align	1
 2982              		.global	vTaskDelay
 2983              		.syntax unified
 2984              		.thumb
 2985              		.thumb_func
 2986              		.fpu fpv4-sp-d16
 2988              	vTaskDelay:
 2989              	.LFB10:
1283:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xAlreadyYielded = pdFALSE;
 2990              		.loc 1 1283 0
 2991              		.cfi_startproc
 2992              		@ args = 0, pretend = 0, frame = 0
 2993              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 150


 2994              	.LVL258:
 2995 0000 10B5     		push	{r4, lr}
 2996              	.LCFI31:
 2997              		.cfi_def_cfa_offset 8
 2998              		.cfi_offset 4, -8
 2999              		.cfi_offset 14, -4
 3000              	.LVL259:
1287:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3001              		.loc 1 1287 0
 3002 0002 A8B1     		cbz	r0, .L300
 3003 0004 0446     		mov	r4, r0
1289:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskSuspendAll();
 3004              		.loc 1 1289 0
 3005 0006 104B     		ldr	r3, .L302
 3006 0008 1B68     		ldr	r3, [r3]
 3007 000a 43B1     		cbz	r3, .L297
 3008              	.LBB175:
 3009              	.LBB176:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3010              		.loc 2 195 0
 3011              		.syntax unified
 3012              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3013 000c 4FF05003 			mov r3, #80												
 3014 0010 83F31188 		msr basepri, r3											
 3015 0014 BFF36F8F 		isb														
 3016 0018 BFF34F8F 		dsb														
 3017              	
 3018              	@ 0 "" 2
 3019              	.LVL260:
 3020              		.thumb
 3021              		.syntax unified
 3022              	.L298:
 3023 001c FEE7     		b	.L298
 3024              	.L297:
 3025              	.LBE176:
 3026              	.LBE175:
1290:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3027              		.loc 1 1290 0
 3028 001e FFF7FEFF 		bl	vTaskSuspendAll
 3029              	.LVL261:
1301:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3030              		.loc 1 1301 0
 3031 0022 0021     		movs	r1, #0
 3032 0024 2046     		mov	r0, r4
 3033 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3034              	.LVL262:
1303:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3035              		.loc 1 1303 0
 3036 002a FFF7FEFF 		bl	xTaskResumeAll
 3037              	.LVL263:
 3038 002e 00E0     		b	.L296
 3039              	.LVL264:
 3040              	.L300:
1284:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3041              		.loc 1 1284 0
 3042 0030 0020     		movs	r0, #0
 3043              	.LVL265:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 151


 3044              	.L296:
1312:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3045              		.loc 1 1312 0
 3046 0032 38B9     		cbnz	r0, .L295
1314:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3047              		.loc 1 1314 0
 3048 0034 4FF08052 		mov	r2, #268435456
 3049 0038 044B     		ldr	r3, .L302+4
 3050 003a 1A60     		str	r2, [r3]
 3051              		.syntax unified
 3052              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3053 003c BFF34F8F 		dsb
 3054              	@ 0 "" 2
 3055              	@ 1314 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3056 0040 BFF36F8F 		isb
 3057              	@ 0 "" 2
 3058              		.thumb
 3059              		.syntax unified
 3060              	.L295:
 3061 0044 10BD     		pop	{r4, pc}
 3062              	.L303:
 3063 0046 00BF     		.align	2
 3064              	.L302:
 3065 0048 00000000 		.word	.LANCHOR16
 3066 004c 04ED00E0 		.word	-536810236
 3067              		.cfi_endproc
 3068              	.LFE10:
 3070              		.section	.text.vTaskSwitchContext,"ax",%progbits
 3071              		.align	1
 3072              		.global	vTaskSwitchContext
 3073              		.syntax unified
 3074              		.thumb
 3075              		.thumb_func
 3076              		.fpu fpv4-sp-d16
 3078              	vTaskSwitchContext:
 3079              	.LFB29:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3080              		.loc 1 2846 0
 3081              		.cfi_startproc
 3082              		@ args = 0, pretend = 0, frame = 0
 3083              		@ frame_needed = 0, uses_anonymous_args = 0
 3084              		@ link register save eliminated.
2847:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3085              		.loc 1 2847 0
 3086 0000 214B     		ldr	r3, .L320
 3087 0002 1B68     		ldr	r3, [r3]
 3088 0004 6BB9     		cbnz	r3, .L316
2855:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_OUT();
 3089              		.loc 1 2855 0
 3090 0006 0022     		movs	r2, #0
 3091 0008 204B     		ldr	r3, .L320+4
 3092 000a 1A60     		str	r2, [r3]
 3093              	.LBB177:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3094              		.loc 1 2890 0
 3095 000c 204B     		ldr	r3, .L320+8
 3096 000e 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 152


 3097              	.LVL266:
 3098              	.L307:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3099              		.loc 1 2890 0 is_stmt 0 discriminator 4
 3100 0010 03EB8301 		add	r1, r3, r3, lsl #2
 3101 0014 8A00     		lsls	r2, r1, #2
 3102 0016 1F49     		ldr	r1, .L320+12
 3103 0018 8A58     		ldr	r2, [r1, r2]
 3104 001a 7AB9     		cbnz	r2, .L317
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3105              		.loc 1 2890 0 discriminator 5
 3106 001c 2BB1     		cbz	r3, .L318
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3107              		.loc 1 2890 0 discriminator 3
 3108 001e 013B     		subs	r3, r3, #1
 3109              	.LVL267:
 3110 0020 F6E7     		b	.L307
 3111              	.LVL268:
 3112              	.L316:
 3113              	.LBE177:
2851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3114              		.loc 1 2851 0 is_stmt 1
 3115 0022 0122     		movs	r2, #1
 3116 0024 194B     		ldr	r3, .L320+4
 3117 0026 1A60     		str	r2, [r3]
 3118 0028 7047     		bx	lr
 3119              	.LVL269:
 3120              	.L318:
 3121              	.LBB182:
 3122              	.LBB178:
 3123              	.LBB179:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3124              		.loc 2 195 0
 3125              		.syntax unified
 3126              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3127 002a 4FF05003 			mov r3, #80												
 3128 002e 83F31188 		msr basepri, r3											
 3129 0032 BFF36F8F 		isb														
 3130 0036 BFF34F8F 		dsb														
 3131              	
 3132              	@ 0 "" 2
 3133              	.LVL270:
 3134              		.thumb
 3135              		.syntax unified
 3136              	.L309:
 3137 003a FEE7     		b	.L309
 3138              	.LVL271:
 3139              	.L317:
 3140              	.LBE179:
 3141              	.LBE178:
 3142              	.LBE182:
2846:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 3143              		.loc 1 2846 0 discriminator 6
 3144 003c 10B4     		push	{r4}
 3145              	.LCFI32:
 3146              		.cfi_def_cfa_offset 4
 3147              		.cfi_offset 4, -4
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 153


 3148              	.LVL272:
 3149              	.LBB183:
 3150              	.LBB180:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3151              		.loc 1 2890 0 discriminator 6
 3152 003e 0846     		mov	r0, r1
 3153 0040 9A00     		lsls	r2, r3, #2
 3154 0042 D418     		adds	r4, r2, r3
 3155 0044 A100     		lsls	r1, r4, #2
 3156 0046 0144     		add	r1, r1, r0
 3157 0048 4C68     		ldr	r4, [r1, #4]
 3158 004a 6468     		ldr	r4, [r4, #4]
 3159 004c 4C60     		str	r4, [r1, #4]
 3160 004e 1A44     		add	r2, r2, r3
 3161 0050 9100     		lsls	r1, r2, #2
 3162 0052 0831     		adds	r1, r1, #8
 3163 0054 0844     		add	r0, r0, r1
 3164 0056 8442     		cmp	r4, r0
 3165 0058 0DD0     		beq	.L319
 3166              	.L311:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3167              		.loc 1 2890 0 is_stmt 0 discriminator 9
 3168 005a 03EB8302 		add	r2, r3, r3, lsl #2
 3169 005e 9100     		lsls	r1, r2, #2
 3170 0060 0C4A     		ldr	r2, .L320+12
 3171 0062 0A44     		add	r2, r2, r1
 3172 0064 5268     		ldr	r2, [r2, #4]
 3173 0066 D168     		ldr	r1, [r2, #12]
 3174 0068 0B4A     		ldr	r2, .L320+16
 3175 006a 1160     		str	r1, [r2]
 3176              	.LBE180:
 3177 006c 084A     		ldr	r2, .L320+8
 3178 006e 1360     		str	r3, [r2]
 3179              	.LBE183:
2901:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3180              		.loc 1 2901 0 is_stmt 1 discriminator 9
 3181 0070 5DF8044B 		ldr	r4, [sp], #4
 3182              	.LCFI33:
 3183              		.cfi_remember_state
 3184              		.cfi_restore 4
 3185              		.cfi_def_cfa_offset 0
 3186 0074 7047     		bx	lr
 3187              	.L319:
 3188              	.LCFI34:
 3189              		.cfi_restore_state
 3190              	.LBB184:
 3191              	.LBB181:
2890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		traceTASK_SWITCHED_IN();
 3192              		.loc 1 2890 0 discriminator 7
 3193 0076 6068     		ldr	r0, [r4, #4]
 3194 0078 03EB8302 		add	r2, r3, r3, lsl #2
 3195 007c 9100     		lsls	r1, r2, #2
 3196 007e 054A     		ldr	r2, .L320+12
 3197 0080 0A44     		add	r2, r2, r1
 3198 0082 5060     		str	r0, [r2, #4]
 3199 0084 E9E7     		b	.L311
 3200              	.L321:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 154


 3201 0086 00BF     		.align	2
 3202              	.L320:
 3203 0088 00000000 		.word	.LANCHOR16
 3204 008c 00000000 		.word	.LANCHOR19
 3205 0090 00000000 		.word	.LANCHOR13
 3206 0094 00000000 		.word	.LANCHOR4
 3207 0098 00000000 		.word	.LANCHOR10
 3208              	.LBE181:
 3209              	.LBE184:
 3210              		.cfi_endproc
 3211              	.LFE29:
 3213              		.section	.text.vTaskSuspend,"ax",%progbits
 3214              		.align	1
 3215              		.global	vTaskSuspend
 3216              		.syntax unified
 3217              		.thumb
 3218              		.thumb_func
 3219              		.fpu fpv4-sp-d16
 3221              	vTaskSuspend:
 3222              	.LFB15:
1625:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 3223              		.loc 1 1625 0
 3224              		.cfi_startproc
 3225              		@ args = 0, pretend = 0, frame = 0
 3226              		@ frame_needed = 0, uses_anonymous_args = 0
 3227              	.LVL273:
 3228 0000 38B5     		push	{r3, r4, r5, lr}
 3229              	.LCFI35:
 3230              		.cfi_def_cfa_offset 16
 3231              		.cfi_offset 3, -16
 3232              		.cfi_offset 4, -12
 3233              		.cfi_offset 5, -8
 3234              		.cfi_offset 14, -4
 3235 0002 0446     		mov	r4, r0
1628:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3236              		.loc 1 1628 0
 3237 0004 FFF7FEFF 		bl	vPortEnterCritical
 3238              	.LVL274:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3239              		.loc 1 1632 0
 3240 0008 E4B1     		cbz	r4, .L334
 3241              	.LVL275:
 3242              	.L323:
1638:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3243              		.loc 1 1638 0 discriminator 4
 3244 000a 251D     		adds	r5, r4, #4
 3245 000c 2846     		mov	r0, r5
 3246 000e FFF7FEFF 		bl	uxListRemove
 3247              	.LVL276:
1648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3248              		.loc 1 1648 0 discriminator 4
 3249 0012 A36A     		ldr	r3, [r4, #40]
 3250 0014 1BB1     		cbz	r3, .L324
1650:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3251              		.loc 1 1650 0
 3252 0016 04F11800 		add	r0, r4, #24
 3253 001a FFF7FEFF 		bl	uxListRemove
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 155


 3254              	.LVL277:
 3255              	.L324:
1657:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3256              		.loc 1 1657 0
 3257 001e 2946     		mov	r1, r5
 3258 0020 2248     		ldr	r0, .L338
 3259 0022 FFF7FEFF 		bl	vListInsertEnd
 3260              	.LVL278:
1661:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3261              		.loc 1 1661 0
 3262 0026 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 3263 002a DBB2     		uxtb	r3, r3
 3264 002c 012B     		cmp	r3, #1
 3265 002e 0CD0     		beq	.L335
 3266              	.L325:
1670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3267              		.loc 1 1670 0
 3268 0030 FFF7FEFF 		bl	vPortExitCritical
 3269              	.LVL279:
1672:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3270              		.loc 1 1672 0
 3271 0034 1E4B     		ldr	r3, .L338+4
 3272 0036 1B68     		ldr	r3, [r3]
 3273 0038 5BB9     		cbnz	r3, .L336
 3274              	.L326:
1687:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3275              		.loc 1 1687 0
 3276 003a 1E4B     		ldr	r3, .L338+8
 3277 003c 1B68     		ldr	r3, [r3]
 3278 003e 9C42     		cmp	r4, r3
 3279 0040 0ED0     		beq	.L337
 3280              	.L322:
 3281 0042 38BD     		pop	{r3, r4, r5, pc}
 3282              	.LVL280:
 3283              	.L334:
1632:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3284              		.loc 1 1632 0 discriminator 1
 3285 0044 1B4B     		ldr	r3, .L338+8
 3286 0046 1C68     		ldr	r4, [r3]
 3287              	.LVL281:
 3288 0048 DFE7     		b	.L323
 3289              	.LVL282:
 3290              	.L335:
1665:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3291              		.loc 1 1665 0
 3292 004a 0023     		movs	r3, #0
 3293 004c 84F85830 		strb	r3, [r4, #88]
 3294 0050 EEE7     		b	.L325
 3295              	.L336:
1676:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3296              		.loc 1 1676 0
 3297 0052 FFF7FEFF 		bl	vPortEnterCritical
 3298              	.LVL283:
1678:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3299              		.loc 1 1678 0
 3300 0056 FFF7FEFF 		bl	prvResetNextTaskUnblockTime
 3301              	.LVL284:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 156


1680:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3302              		.loc 1 1680 0
 3303 005a FFF7FEFF 		bl	vPortExitCritical
 3304              	.LVL285:
 3305 005e ECE7     		b	.L326
 3306              	.L337:
1689:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 3307              		.loc 1 1689 0
 3308 0060 134B     		ldr	r3, .L338+4
 3309 0062 1B68     		ldr	r3, [r3]
 3310 0064 A3B1     		cbz	r3, .L328
1692:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				portYIELD_WITHIN_API();
 3311              		.loc 1 1692 0
 3312 0066 144B     		ldr	r3, .L338+12
 3313 0068 1B68     		ldr	r3, [r3]
 3314 006a 43B1     		cbz	r3, .L329
 3315              	.LBB185:
 3316              	.LBB186:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3317              		.loc 2 195 0
 3318              		.syntax unified
 3319              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3320 006c 4FF05003 			mov r3, #80												
 3321 0070 83F31188 		msr basepri, r3											
 3322 0074 BFF36F8F 		isb														
 3323 0078 BFF34F8F 		dsb														
 3324              	
 3325              	@ 0 "" 2
 3326              	.LVL286:
 3327              		.thumb
 3328              		.syntax unified
 3329              	.L330:
 3330 007c FEE7     		b	.L330
 3331              	.L329:
 3332              	.LBE186:
 3333              	.LBE185:
1693:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 3334              		.loc 1 1693 0
 3335 007e 4FF08052 		mov	r2, #268435456
 3336 0082 0E4B     		ldr	r3, .L338+16
 3337 0084 1A60     		str	r2, [r3]
 3338              		.syntax unified
 3339              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3340 0086 BFF34F8F 		dsb
 3341              	@ 0 "" 2
 3342              	@ 1693 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 3343 008a BFF36F8F 		isb
 3344              	@ 0 "" 2
 3345              		.thumb
 3346              		.syntax unified
 3347 008e 38BD     		pop	{r3, r4, r5, pc}
 3348              	.LVL287:
 3349              	.L328:
1700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 3350              		.loc 1 1700 0
 3351 0090 064B     		ldr	r3, .L338
 3352 0092 1A68     		ldr	r2, [r3]
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 157


 3353 0094 0A4B     		ldr	r3, .L338+20
 3354 0096 1B68     		ldr	r3, [r3]
 3355 0098 9A42     		cmp	r2, r3
 3356 009a 03D1     		bne	.L331
1706:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3357              		.loc 1 1706 0
 3358 009c 0022     		movs	r2, #0
 3359 009e 054B     		ldr	r3, .L338+8
 3360 00a0 1A60     		str	r2, [r3]
 3361 00a2 38BD     		pop	{r3, r4, r5, pc}
 3362              	.LVL288:
 3363              	.L331:
1710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 3364              		.loc 1 1710 0
 3365 00a4 FFF7FEFF 		bl	vTaskSwitchContext
 3366              	.LVL289:
1718:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3367              		.loc 1 1718 0
 3368 00a8 CBE7     		b	.L322
 3369              	.L339:
 3370 00aa 00BF     		.align	2
 3371              	.L338:
 3372 00ac 00000000 		.word	.LANCHOR0
 3373 00b0 00000000 		.word	.LANCHOR11
 3374 00b4 00000000 		.word	.LANCHOR10
 3375 00b8 00000000 		.word	.LANCHOR16
 3376 00bc 04ED00E0 		.word	-536810236
 3377 00c0 00000000 		.word	.LANCHOR9
 3378              		.cfi_endproc
 3379              	.LFE15:
 3381              		.section	.text.vTaskPlaceOnEventList,"ax",%progbits
 3382              		.align	1
 3383              		.global	vTaskPlaceOnEventList
 3384              		.syntax unified
 3385              		.thumb
 3386              		.thumb_func
 3387              		.fpu fpv4-sp-d16
 3389              	vTaskPlaceOnEventList:
 3390              	.LFB30:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3391              		.loc 1 2905 0
 3392              		.cfi_startproc
 3393              		@ args = 0, pretend = 0, frame = 0
 3394              		@ frame_needed = 0, uses_anonymous_args = 0
 3395              	.LVL290:
2906:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3396              		.loc 1 2906 0
 3397 0000 40B9     		cbnz	r0, .L341
 3398              	.LBB187:
 3399              	.LBB188:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3400              		.loc 2 195 0
 3401              		.syntax unified
 3402              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3403 0002 4FF05003 			mov r3, #80												
 3404 0006 83F31188 		msr basepri, r3											
 3405 000a BFF36F8F 		isb														
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 158


 3406 000e BFF34F8F 		dsb														
 3407              	
 3408              	@ 0 "" 2
 3409              	.LVL291:
 3410              		.thumb
 3411              		.syntax unified
 3412              	.L342:
 3413 0012 FEE7     		b	.L342
 3414              	.L341:
 3415              	.LBE188:
 3416              	.LBE187:
2905:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3417              		.loc 1 2905 0
 3418 0014 10B5     		push	{r4, lr}
 3419              	.LCFI36:
 3420              		.cfi_def_cfa_offset 8
 3421              		.cfi_offset 4, -8
 3422              		.cfi_offset 14, -4
 3423 0016 0C46     		mov	r4, r1
2915:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3424              		.loc 1 2915 0
 3425 0018 044B     		ldr	r3, .L345
 3426 001a 1968     		ldr	r1, [r3]
 3427              	.LVL292:
 3428 001c 1831     		adds	r1, r1, #24
 3429 001e FFF7FEFF 		bl	vListInsert
 3430              	.LVL293:
2917:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3431              		.loc 1 2917 0
 3432 0022 0121     		movs	r1, #1
 3433 0024 2046     		mov	r0, r4
 3434 0026 FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3435              	.LVL294:
 3436 002a 10BD     		pop	{r4, pc}
 3437              	.LVL295:
 3438              	.L346:
 3439              		.align	2
 3440              	.L345:
 3441 002c 00000000 		.word	.LANCHOR10
 3442              		.cfi_endproc
 3443              	.LFE30:
 3445              		.section	.text.vTaskPlaceOnUnorderedEventList,"ax",%progbits
 3446              		.align	1
 3447              		.global	vTaskPlaceOnUnorderedEventList
 3448              		.syntax unified
 3449              		.thumb
 3450              		.thumb_func
 3451              		.fpu fpv4-sp-d16
 3453              	vTaskPlaceOnUnorderedEventList:
 3454              	.LFB31:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3455              		.loc 1 2922 0
 3456              		.cfi_startproc
 3457              		@ args = 0, pretend = 0, frame = 0
 3458              		@ frame_needed = 0, uses_anonymous_args = 0
 3459              	.LVL296:
2923:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 159


 3460              		.loc 1 2923 0
 3461 0000 60B1     		cbz	r0, .L354
 3462 0002 0346     		mov	r3, r0
2927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3463              		.loc 1 2927 0
 3464 0004 1348     		ldr	r0, .L355
 3465              	.LVL297:
 3466 0006 0068     		ldr	r0, [r0]
 3467 0008 88B9     		cbnz	r0, .L350
 3468              	.LBB189:
 3469              	.LBB190:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3470              		.loc 2 195 0
 3471              		.syntax unified
 3472              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3473 000a 4FF05003 			mov r3, #80												
 3474 000e 83F31188 		msr basepri, r3											
 3475 0012 BFF36F8F 		isb														
 3476 0016 BFF34F8F 		dsb														
 3477              	
 3478              	@ 0 "" 2
 3479              	.LVL298:
 3480              		.thumb
 3481              		.syntax unified
 3482              	.L351:
 3483 001a FEE7     		b	.L351
 3484              	.LVL299:
 3485              	.L354:
 3486              	.LBE190:
 3487              	.LBE189:
 3488              	.LBB191:
 3489              	.LBB192:
 3490              		.syntax unified
 3491              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3492 001c 4FF05003 			mov r3, #80												
 3493 0020 83F31188 		msr basepri, r3											
 3494 0024 BFF36F8F 		isb														
 3495 0028 BFF34F8F 		dsb														
 3496              	
 3497              	@ 0 "" 2
 3498              	.LVL300:
 3499              		.thumb
 3500              		.syntax unified
 3501              	.L349:
 3502 002c FEE7     		b	.L349
 3503              	.LVL301:
 3504              	.L350:
 3505              	.LBE192:
 3506              	.LBE191:
2922:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxEventList );
 3507              		.loc 1 2922 0
 3508 002e 10B5     		push	{r4, lr}
 3509              	.LCFI37:
 3510              		.cfi_def_cfa_offset 8
 3511              		.cfi_offset 4, -8
 3512              		.cfi_offset 14, -4
 3513 0030 1846     		mov	r0, r3
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 160


 3514 0032 1446     		mov	r4, r2
 3515 0034 0B46     		mov	r3, r1
 3516              	.LVL302:
2932:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3517              		.loc 1 2932 0
 3518 0036 084A     		ldr	r2, .L355+4
 3519              	.LVL303:
 3520 0038 1168     		ldr	r1, [r2]
 3521              	.LVL304:
 3522 003a 43F00043 		orr	r3, r3, #-2147483648
 3523              	.LVL305:
 3524 003e 8B61     		str	r3, [r1, #24]
2939:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3525              		.loc 1 2939 0
 3526 0040 1168     		ldr	r1, [r2]
 3527 0042 1831     		adds	r1, r1, #24
 3528 0044 FFF7FEFF 		bl	vListInsertEnd
 3529              	.LVL306:
2941:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3530              		.loc 1 2941 0
 3531 0048 0121     		movs	r1, #1
 3532 004a 2046     		mov	r0, r4
 3533 004c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3534              	.LVL307:
 3535 0050 10BD     		pop	{r4, pc}
 3536              	.LVL308:
 3537              	.L356:
 3538 0052 00BF     		.align	2
 3539              	.L355:
 3540 0054 00000000 		.word	.LANCHOR16
 3541 0058 00000000 		.word	.LANCHOR10
 3542              		.cfi_endproc
 3543              	.LFE31:
 3545              		.section	.text.vTaskPlaceOnEventListRestricted,"ax",%progbits
 3546              		.align	1
 3547              		.global	vTaskPlaceOnEventListRestricted
 3548              		.syntax unified
 3549              		.thumb
 3550              		.thumb_func
 3551              		.fpu fpv4-sp-d16
 3553              	vTaskPlaceOnEventListRestricted:
 3554              	.LFB32:
2948:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		configASSERT( pxEventList );
 3555              		.loc 1 2948 0
 3556              		.cfi_startproc
 3557              		@ args = 0, pretend = 0, frame = 0
 3558              		@ frame_needed = 0, uses_anonymous_args = 0
 3559              	.LVL309:
 3560 0000 38B5     		push	{r3, r4, r5, lr}
 3561              	.LCFI38:
 3562              		.cfi_def_cfa_offset 16
 3563              		.cfi_offset 3, -16
 3564              		.cfi_offset 4, -12
 3565              		.cfi_offset 5, -8
 3566              		.cfi_offset 14, -4
2949:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3567              		.loc 1 2949 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 161


 3568 0002 70B1     		cbz	r0, .L363
 3569 0004 0C46     		mov	r4, r1
 3570 0006 1546     		mov	r5, r2
2961:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3571              		.loc 1 2961 0
 3572 0008 0A4A     		ldr	r2, .L364
 3573              	.LVL310:
 3574 000a 1168     		ldr	r1, [r2]
 3575              	.LVL311:
 3576 000c 1831     		adds	r1, r1, #24
 3577 000e FFF7FEFF 		bl	vListInsertEnd
 3578              	.LVL312:
2966:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 3579              		.loc 1 2966 0
 3580 0012 0DB1     		cbz	r5, .L360
2968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 3581              		.loc 1 2968 0
 3582 0014 4FF0FF34 		mov	r4, #-1
 3583              	.LVL313:
 3584              	.L360:
2972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3585              		.loc 1 2972 0
 3586 0018 2946     		mov	r1, r5
 3587 001a 2046     		mov	r0, r4
 3588 001c FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 3589              	.LVL314:
 3590 0020 38BD     		pop	{r3, r4, r5, pc}
 3591              	.LVL315:
 3592              	.L363:
 3593              	.LBB193:
 3594              	.LBB194:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3595              		.loc 2 195 0
 3596              		.syntax unified
 3597              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3598 0022 4FF05003 			mov r3, #80												
 3599 0026 83F31188 		msr basepri, r3											
 3600 002a BFF36F8F 		isb														
 3601 002e BFF34F8F 		dsb														
 3602              	
 3603              	@ 0 "" 2
 3604              	.LVL316:
 3605              		.thumb
 3606              		.syntax unified
 3607              	.L359:
 3608 0032 FEE7     		b	.L359
 3609              	.L365:
 3610              		.align	2
 3611              	.L364:
 3612 0034 00000000 		.word	.LANCHOR10
 3613              	.LBE194:
 3614              	.LBE193:
 3615              		.cfi_endproc
 3616              	.LFE32:
 3618              		.section	.text.xTaskRemoveFromEventList,"ax",%progbits
 3619              		.align	1
 3620              		.global	xTaskRemoveFromEventList
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 162


 3621              		.syntax unified
 3622              		.thumb
 3623              		.thumb_func
 3624              		.fpu fpv4-sp-d16
 3626              	xTaskRemoveFromEventList:
 3627              	.LFB33:
2979:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3628              		.loc 1 2979 0
 3629              		.cfi_startproc
 3630              		@ args = 0, pretend = 0, frame = 0
 3631              		@ frame_needed = 0, uses_anonymous_args = 0
 3632              	.LVL317:
 3633 0000 38B5     		push	{r3, r4, r5, lr}
 3634              	.LCFI39:
 3635              		.cfi_def_cfa_offset 16
 3636              		.cfi_offset 3, -16
 3637              		.cfi_offset 4, -12
 3638              		.cfi_offset 5, -8
 3639              		.cfi_offset 14, -4
2996:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3640              		.loc 1 2996 0
 3641 0002 C368     		ldr	r3, [r0, #12]
 3642 0004 DC68     		ldr	r4, [r3, #12]
 3643              	.LVL318:
2997:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 3644              		.loc 1 2997 0
 3645 0006 24B3     		cbz	r4, .L375
2998:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3646              		.loc 1 2998 0
 3647 0008 04F11805 		add	r5, r4, #24
 3648 000c 2846     		mov	r0, r5
 3649              	.LVL319:
 3650 000e FFF7FEFF 		bl	uxListRemove
 3651              	.LVL320:
3000:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3652              		.loc 1 3000 0
 3653 0012 184B     		ldr	r3, .L376
 3654 0014 1B68     		ldr	r3, [r3]
 3655 0016 2BBB     		cbnz	r3, .L369
3002:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		prvAddTaskToReadyList( pxUnblockedTCB );
 3656              		.loc 1 3002 0
 3657 0018 251D     		adds	r5, r4, #4
 3658 001a 2846     		mov	r0, r5
 3659 001c FFF7FEFF 		bl	uxListRemove
 3660              	.LVL321:
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3661              		.loc 1 3003 0
 3662 0020 E36A     		ldr	r3, [r4, #44]
 3663 0022 154A     		ldr	r2, .L376+4
 3664 0024 1268     		ldr	r2, [r2]
 3665 0026 9342     		cmp	r3, r2
 3666 0028 01D9     		bls	.L370
3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3667              		.loc 1 3003 0 is_stmt 0 discriminator 1
 3668 002a 134A     		ldr	r2, .L376+4
 3669 002c 1360     		str	r3, [r2]
 3670              	.L370:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 163


3003:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3671              		.loc 1 3003 0 discriminator 3
 3672 002e 03EB8303 		add	r3, r3, r3, lsl #2
 3673 0032 9A00     		lsls	r2, r3, #2
 3674 0034 2946     		mov	r1, r5
 3675 0036 1148     		ldr	r0, .L376+8
 3676 0038 1044     		add	r0, r0, r2
 3677 003a FFF7FEFF 		bl	vListInsertEnd
 3678              	.LVL322:
 3679              	.L371:
3012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3680              		.loc 1 3012 0 is_stmt 1
 3681 003e E26A     		ldr	r2, [r4, #44]
 3682 0040 0F4B     		ldr	r3, .L376+12
 3683 0042 1B68     		ldr	r3, [r3]
 3684 0044 DB6A     		ldr	r3, [r3, #44]
 3685 0046 9A42     		cmp	r2, r3
 3686 0048 11D9     		bls	.L373
 3687              	.LVL323:
3021:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3688              		.loc 1 3021 0
 3689 004a 0120     		movs	r0, #1
 3690 004c 0D4B     		ldr	r3, .L376+16
 3691 004e 1860     		str	r0, [r3]
 3692 0050 38BD     		pop	{r3, r4, r5, pc}
 3693              	.LVL324:
 3694              	.L375:
 3695              	.LBB195:
 3696              	.LBB196:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3697              		.loc 2 195 0
 3698              		.syntax unified
 3699              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3700 0052 4FF05003 			mov r3, #80												
 3701 0056 83F31188 		msr basepri, r3											
 3702 005a BFF36F8F 		isb														
 3703 005e BFF34F8F 		dsb														
 3704              	
 3705              	@ 0 "" 2
 3706              	.LVL325:
 3707              		.thumb
 3708              		.syntax unified
 3709              	.L368:
 3710 0062 FEE7     		b	.L368
 3711              	.LVL326:
 3712              	.L369:
 3713              	.LBE196:
 3714              	.LBE195:
3009:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3715              		.loc 1 3009 0
 3716 0064 2946     		mov	r1, r5
 3717 0066 0848     		ldr	r0, .L376+20
 3718 0068 FFF7FEFF 		bl	vListInsertEnd
 3719              	.LVL327:
 3720 006c E7E7     		b	.L371
 3721              	.L373:
3025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 164


 3722              		.loc 1 3025 0
 3723 006e 0020     		movs	r0, #0
 3724              	.LVL328:
3043:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 3725              		.loc 1 3043 0
 3726 0070 38BD     		pop	{r3, r4, r5, pc}
 3727              	.LVL329:
 3728              	.L377:
 3729 0072 00BF     		.align	2
 3730              	.L376:
 3731 0074 00000000 		.word	.LANCHOR16
 3732 0078 00000000 		.word	.LANCHOR13
 3733 007c 00000000 		.word	.LANCHOR4
 3734 0080 00000000 		.word	.LANCHOR10
 3735 0084 00000000 		.word	.LANCHOR19
 3736 0088 00000000 		.word	.LANCHOR1
 3737              		.cfi_endproc
 3738              	.LFE33:
 3740              		.section	.text.vTaskRemoveFromUnorderedEventList,"ax",%progbits
 3741              		.align	1
 3742              		.global	vTaskRemoveFromUnorderedEventList
 3743              		.syntax unified
 3744              		.thumb
 3745              		.thumb_func
 3746              		.fpu fpv4-sp-d16
 3748              	vTaskRemoveFromUnorderedEventList:
 3749              	.LFB34:
3047:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TCB_t *pxUnblockedTCB;
 3750              		.loc 1 3047 0
 3751              		.cfi_startproc
 3752              		@ args = 0, pretend = 0, frame = 0
 3753              		@ frame_needed = 0, uses_anonymous_args = 0
 3754              	.LVL330:
 3755 0000 38B5     		push	{r3, r4, r5, lr}
 3756              	.LCFI40:
 3757              		.cfi_def_cfa_offset 16
 3758              		.cfi_offset 3, -16
 3759              		.cfi_offset 4, -12
 3760              		.cfi_offset 5, -8
 3761              		.cfi_offset 14, -4
3052:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3762              		.loc 1 3052 0
 3763 0002 1C4B     		ldr	r3, .L387
 3764 0004 1B68     		ldr	r3, [r3]
 3765 0006 43B9     		cbnz	r3, .L379
 3766              	.LBB197:
 3767              	.LBB198:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3768              		.loc 2 195 0
 3769              		.syntax unified
 3770              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3771 0008 4FF05003 			mov r3, #80												
 3772 000c 83F31188 		msr basepri, r3											
 3773 0010 BFF36F8F 		isb														
 3774 0014 BFF34F8F 		dsb														
 3775              	
 3776              	@ 0 "" 2
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 165


 3777              	.LVL331:
 3778              		.thumb
 3779              		.syntax unified
 3780              	.L380:
 3781 0018 FEE7     		b	.L380
 3782              	.L379:
 3783              	.LBE198:
 3784              	.LBE197:
3055:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3785              		.loc 1 3055 0
 3786 001a 41F00041 		orr	r1, r1, #-2147483648
 3787              	.LVL332:
 3788 001e 0160     		str	r1, [r0]
3059:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxUnblockedTCB );
 3789              		.loc 1 3059 0
 3790 0020 C468     		ldr	r4, [r0, #12]
 3791              	.LVL333:
3060:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	( void ) uxListRemove( pxEventListItem );
 3792              		.loc 1 3060 0
 3793 0022 F4B1     		cbz	r4, .L386
3061:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3794              		.loc 1 3061 0
 3795 0024 FFF7FEFF 		bl	uxListRemove
 3796              	.LVL334:
3066:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	prvAddTaskToReadyList( pxUnblockedTCB );
 3797              		.loc 1 3066 0
 3798 0028 251D     		adds	r5, r4, #4
 3799 002a 2846     		mov	r0, r5
 3800 002c FFF7FEFF 		bl	uxListRemove
 3801              	.LVL335:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3802              		.loc 1 3067 0
 3803 0030 E36A     		ldr	r3, [r4, #44]
 3804 0032 114A     		ldr	r2, .L387+4
 3805 0034 1268     		ldr	r2, [r2]
 3806 0036 9342     		cmp	r3, r2
 3807 0038 01D9     		bls	.L383
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3808              		.loc 1 3067 0 is_stmt 0 discriminator 1
 3809 003a 0F4A     		ldr	r2, .L387+4
 3810 003c 1360     		str	r3, [r2]
 3811              	.L383:
3067:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3812              		.loc 1 3067 0 discriminator 3
 3813 003e 03EB8303 		add	r3, r3, r3, lsl #2
 3814 0042 9A00     		lsls	r2, r3, #2
 3815 0044 2946     		mov	r1, r5
 3816 0046 0D48     		ldr	r0, .L387+8
 3817 0048 1044     		add	r0, r0, r2
 3818 004a FFF7FEFF 		bl	vListInsertEnd
 3819              	.LVL336:
3069:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3820              		.loc 1 3069 0 is_stmt 1 discriminator 3
 3821 004e E26A     		ldr	r2, [r4, #44]
 3822 0050 0B4B     		ldr	r3, .L387+12
 3823 0052 1B68     		ldr	r3, [r3]
 3824 0054 DB6A     		ldr	r3, [r3, #44]
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 166


 3825 0056 9A42     		cmp	r2, r3
 3826 0058 02D9     		bls	.L378
3075:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3827              		.loc 1 3075 0
 3828 005a 0122     		movs	r2, #1
 3829 005c 094B     		ldr	r3, .L387+16
 3830 005e 1A60     		str	r2, [r3]
 3831              	.L378:
 3832 0060 38BD     		pop	{r3, r4, r5, pc}
 3833              	.LVL337:
 3834              	.L386:
 3835              	.LBB199:
 3836              	.LBB200:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3837              		.loc 2 195 0
 3838              		.syntax unified
 3839              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3840 0062 4FF05003 			mov r3, #80												
 3841 0066 83F31188 		msr basepri, r3											
 3842 006a BFF36F8F 		isb														
 3843 006e BFF34F8F 		dsb														
 3844              	
 3845              	@ 0 "" 2
 3846              	.LVL338:
 3847              		.thumb
 3848              		.syntax unified
 3849              	.L382:
 3850 0072 FEE7     		b	.L382
 3851              	.L388:
 3852              		.align	2
 3853              	.L387:
 3854 0074 00000000 		.word	.LANCHOR16
 3855 0078 00000000 		.word	.LANCHOR13
 3856 007c 00000000 		.word	.LANCHOR4
 3857 0080 00000000 		.word	.LANCHOR10
 3858 0084 00000000 		.word	.LANCHOR19
 3859              	.LBE200:
 3860              	.LBE199:
 3861              		.cfi_endproc
 3862              	.LFE34:
 3864              		.section	.text.vTaskSetTimeOutState,"ax",%progbits
 3865              		.align	1
 3866              		.global	vTaskSetTimeOutState
 3867              		.syntax unified
 3868              		.thumb
 3869              		.thumb_func
 3870              		.fpu fpv4-sp-d16
 3872              	vTaskSetTimeOutState:
 3873              	.LFB35:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3874              		.loc 1 3081 0
 3875              		.cfi_startproc
 3876              		@ args = 0, pretend = 0, frame = 0
 3877              		@ frame_needed = 0, uses_anonymous_args = 0
 3878              	.LVL339:
3082:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	taskENTER_CRITICAL();
 3879              		.loc 1 3082 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 167


 3880 0000 40B9     		cbnz	r0, .L390
 3881              	.LBB201:
 3882              	.LBB202:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 3883              		.loc 2 195 0
 3884              		.syntax unified
 3885              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 3886 0002 4FF05003 			mov r3, #80												
 3887 0006 83F31188 		msr basepri, r3											
 3888 000a BFF36F8F 		isb														
 3889 000e BFF34F8F 		dsb														
 3890              	
 3891              	@ 0 "" 2
 3892              	.LVL340:
 3893              		.thumb
 3894              		.syntax unified
 3895              	.L391:
 3896 0012 FEE7     		b	.L391
 3897              	.L390:
 3898              	.LBE202:
 3899              	.LBE201:
3081:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTimeOut );
 3900              		.loc 1 3081 0
 3901 0014 10B5     		push	{r4, lr}
 3902              	.LCFI41:
 3903              		.cfi_def_cfa_offset 8
 3904              		.cfi_offset 4, -8
 3905              		.cfi_offset 14, -4
 3906 0016 0446     		mov	r4, r0
3083:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3907              		.loc 1 3083 0
 3908 0018 FFF7FEFF 		bl	vPortEnterCritical
 3909              	.LVL341:
3085:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTimeOut->xTimeOnEntering = xTickCount;
 3910              		.loc 1 3085 0
 3911 001c 044B     		ldr	r3, .L394
 3912 001e 1B68     		ldr	r3, [r3]
 3913 0020 2360     		str	r3, [r4]
3086:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 3914              		.loc 1 3086 0
 3915 0022 044B     		ldr	r3, .L394+4
 3916 0024 1B68     		ldr	r3, [r3]
 3917 0026 6360     		str	r3, [r4, #4]
3088:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3918              		.loc 1 3088 0
 3919 0028 FFF7FEFF 		bl	vPortExitCritical
 3920              	.LVL342:
 3921 002c 10BD     		pop	{r4, pc}
 3922              	.LVL343:
 3923              	.L395:
 3924 002e 00BF     		.align	2
 3925              	.L394:
 3926 0030 00000000 		.word	.LANCHOR17
 3927 0034 00000000 		.word	.LANCHOR15
 3928              		.cfi_endproc
 3929              	.LFE35:
 3931              		.section	.text.vTaskInternalSetTimeOutState,"ax",%progbits
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 168


 3932              		.align	1
 3933              		.global	vTaskInternalSetTimeOutState
 3934              		.syntax unified
 3935              		.thumb
 3936              		.thumb_func
 3937              		.fpu fpv4-sp-d16
 3939              	vTaskInternalSetTimeOutState:
 3940              	.LFB36:
3093:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	/* For internal use only as it does not use a critical section. */
 3941              		.loc 1 3093 0
 3942              		.cfi_startproc
 3943              		@ args = 0, pretend = 0, frame = 0
 3944              		@ frame_needed = 0, uses_anonymous_args = 0
 3945              		@ link register save eliminated.
 3946              	.LVL344:
3095:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	pxTimeOut->xTimeOnEntering = xTickCount;
 3947              		.loc 1 3095 0
 3948 0000 034B     		ldr	r3, .L397
 3949 0002 1B68     		ldr	r3, [r3]
 3950 0004 0360     		str	r3, [r0]
3096:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 3951              		.loc 1 3096 0
 3952 0006 034B     		ldr	r3, .L397+4
 3953 0008 1B68     		ldr	r3, [r3]
 3954 000a 4360     		str	r3, [r0, #4]
 3955 000c 7047     		bx	lr
 3956              	.L398:
 3957 000e 00BF     		.align	2
 3958              	.L397:
 3959 0010 00000000 		.word	.LANCHOR17
 3960 0014 00000000 		.word	.LANCHOR15
 3961              		.cfi_endproc
 3962              	.LFE36:
 3964              		.section	.text.xTaskCheckForTimeOut,"ax",%progbits
 3965              		.align	1
 3966              		.global	xTaskCheckForTimeOut
 3967              		.syntax unified
 3968              		.thumb
 3969              		.thumb_func
 3970              		.fpu fpv4-sp-d16
 3972              	xTaskCheckForTimeOut:
 3973              	.LFB37:
3101:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** BaseType_t xReturn;
 3974              		.loc 1 3101 0
 3975              		.cfi_startproc
 3976              		@ args = 0, pretend = 0, frame = 0
 3977              		@ frame_needed = 0, uses_anonymous_args = 0
 3978              	.LVL345:
 3979 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3980              	.LCFI42:
 3981              		.cfi_def_cfa_offset 24
 3982              		.cfi_offset 3, -24
 3983              		.cfi_offset 4, -20
 3984              		.cfi_offset 5, -16
 3985              		.cfi_offset 6, -12
 3986              		.cfi_offset 7, -8
 3987              		.cfi_offset 14, -4
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 169


3104:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configASSERT( pxTicksToWait );
 3988              		.loc 1 3104 0
 3989 0002 E0B1     		cbz	r0, .L410
 3990 0004 0546     		mov	r5, r0
3105:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 3991              		.loc 1 3105 0
 3992 0006 19B3     		cbz	r1, .L411
 3993 0008 0C46     		mov	r4, r1
3107:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	{
 3994              		.loc 1 3107 0
 3995 000a FFF7FEFF 		bl	vPortEnterCritical
 3996              	.LVL346:
 3997              	.LBB203:
3110:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 3998              		.loc 1 3110 0
 3999 000e 1A4B     		ldr	r3, .L413
 4000 0010 1868     		ldr	r0, [r3]
 4001              	.LVL347:
3111:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4002              		.loc 1 3111 0
 4003 0012 6968     		ldr	r1, [r5, #4]
 4004 0014 421A     		subs	r2, r0, r1
 4005              	.LVL348:
3125:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4006              		.loc 1 3125 0
 4007 0016 2368     		ldr	r3, [r4]
 4008 0018 B3F1FF3F 		cmp	r3, #-1
 4009 001c 28D0     		beq	.L407
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4010              		.loc 1 3135 0
 4011 001e 2F68     		ldr	r7, [r5]
 4012 0020 164E     		ldr	r6, .L413+4
 4013 0022 3668     		ldr	r6, [r6]
 4014 0024 B742     		cmp	r7, r6
 4015 0026 01D0     		beq	.L405
3135:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4016              		.loc 1 3135 0 is_stmt 0 discriminator 1
 4017 0028 8842     		cmp	r0, r1
 4018 002a 23D2     		bcs	.L408
 4019              	.L405:
3144:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4020              		.loc 1 3144 0 is_stmt 1
 4021 002c 9A42     		cmp	r2, r3
 4022 002e 18D3     		bcc	.L412
3153:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdTRUE;
 4023              		.loc 1 3153 0
 4024 0030 0023     		movs	r3, #0
 4025 0032 2360     		str	r3, [r4]
 4026              	.LVL349:
3154:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4027              		.loc 1 3154 0
 4028 0034 0124     		movs	r4, #1
 4029              	.LVL350:
 4030              	.L404:
 4031              	.LBE203:
3157:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4032              		.loc 1 3157 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 170


 4033 0036 FFF7FEFF 		bl	vPortExitCritical
 4034              	.LVL351:
3160:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 4035              		.loc 1 3160 0
 4036 003a 2046     		mov	r0, r4
 4037 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4038              	.LVL352:
 4039              	.L410:
 4040              	.LBB204:
 4041              	.LBB205:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4042              		.loc 2 195 0
 4043              		.syntax unified
 4044              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4045 003e 4FF05003 			mov r3, #80												
 4046 0042 83F31188 		msr basepri, r3											
 4047 0046 BFF36F8F 		isb														
 4048 004a BFF34F8F 		dsb														
 4049              	
 4050              	@ 0 "" 2
 4051              	.LVL353:
 4052              		.thumb
 4053              		.syntax unified
 4054              	.L401:
 4055 004e FEE7     		b	.L401
 4056              	.L411:
 4057              	.LBE205:
 4058              	.LBE204:
 4059              	.LBB206:
 4060              	.LBB207:
 4061              		.syntax unified
 4062              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4063 0050 4FF05003 			mov r3, #80												
 4064 0054 83F31188 		msr basepri, r3											
 4065 0058 BFF36F8F 		isb														
 4066 005c BFF34F8F 		dsb														
 4067              	
 4068              	@ 0 "" 2
 4069              	.LVL354:
 4070              		.thumb
 4071              		.syntax unified
 4072              	.L403:
 4073 0060 FEE7     		b	.L403
 4074              	.LVL355:
 4075              	.L412:
 4076              	.LBE207:
 4077              	.LBE206:
 4078              	.LBB208:
3147:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			vTaskInternalSetTimeOutState( pxTimeOut );
 4079              		.loc 1 3147 0
 4080 0062 9B1A     		subs	r3, r3, r2
 4081 0064 2360     		str	r3, [r4]
3148:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			xReturn = pdFALSE;
 4082              		.loc 1 3148 0
 4083 0066 2846     		mov	r0, r5
 4084              	.LVL356:
 4085 0068 FFF7FEFF 		bl	vTaskInternalSetTimeOutState
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 171


 4086              	.LVL357:
3149:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4087              		.loc 1 3149 0
 4088 006c 0024     		movs	r4, #0
 4089              	.LVL358:
 4090 006e E2E7     		b	.L404
 4091              	.LVL359:
 4092              	.L407:
3130:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4093              		.loc 1 3130 0
 4094 0070 0024     		movs	r4, #0
 4095              	.LVL360:
 4096 0072 E0E7     		b	.L404
 4097              	.LVL361:
 4098              	.L408:
3142:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4099              		.loc 1 3142 0
 4100 0074 0124     		movs	r4, #1
 4101              	.LVL362:
 4102 0076 DEE7     		b	.L404
 4103              	.L414:
 4104              		.align	2
 4105              	.L413:
 4106 0078 00000000 		.word	.LANCHOR15
 4107 007c 00000000 		.word	.LANCHOR17
 4108              	.LBE208:
 4109              		.cfi_endproc
 4110              	.LFE37:
 4112              		.section	.text.vTaskMissedYield,"ax",%progbits
 4113              		.align	1
 4114              		.global	vTaskMissedYield
 4115              		.syntax unified
 4116              		.thumb
 4117              		.thumb_func
 4118              		.fpu fpv4-sp-d16
 4120              	vTaskMissedYield:
 4121              	.LFB38:
3164:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	xYieldPending = pdTRUE;
 4122              		.loc 1 3164 0
 4123              		.cfi_startproc
 4124              		@ args = 0, pretend = 0, frame = 0
 4125              		@ frame_needed = 0, uses_anonymous_args = 0
 4126              		@ link register save eliminated.
3165:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** }
 4127              		.loc 1 3165 0
 4128 0000 0122     		movs	r2, #1
 4129 0002 014B     		ldr	r3, .L416
 4130 0004 1A60     		str	r2, [r3]
 4131 0006 7047     		bx	lr
 4132              	.L417:
 4133              		.align	2
 4134              	.L416:
 4135 0008 00000000 		.word	.LANCHOR19
 4136              		.cfi_endproc
 4137              	.LFE38:
 4139              		.section	.text.uxTaskGetTaskNumber,"ax",%progbits
 4140              		.align	1
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 172


 4141              		.global	uxTaskGetTaskNumber
 4142              		.syntax unified
 4143              		.thumb
 4144              		.thumb_func
 4145              		.fpu fpv4-sp-d16
 4147              	uxTaskGetTaskNumber:
 4148              	.LFB39:
3172:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxReturn;
 4149              		.loc 1 3172 0
 4150              		.cfi_startproc
 4151              		@ args = 0, pretend = 0, frame = 0
 4152              		@ frame_needed = 0, uses_anonymous_args = 0
 4153              		@ link register save eliminated.
 4154              	.LVL363:
3176:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4155              		.loc 1 3176 0
 4156 0000 08B1     		cbz	r0, .L420
 4157              	.LVL364:
3179:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4158              		.loc 1 3179 0
 4159 0002 806C     		ldr	r0, [r0, #72]
 4160              	.LVL365:
 4161 0004 7047     		bx	lr
 4162              	.LVL366:
 4163              	.L420:
3183:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4164              		.loc 1 3183 0
 4165 0006 0020     		movs	r0, #0
 4166              	.LVL367:
3187:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4167              		.loc 1 3187 0
 4168 0008 7047     		bx	lr
 4169              		.cfi_endproc
 4170              	.LFE39:
 4172              		.section	.text.vTaskSetTaskNumber,"ax",%progbits
 4173              		.align	1
 4174              		.global	vTaskSetTaskNumber
 4175              		.syntax unified
 4176              		.thumb
 4177              		.thumb_func
 4178              		.fpu fpv4-sp-d16
 4180              	vTaskSetTaskNumber:
 4181              	.LFB40:
3195:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4182              		.loc 1 3195 0
 4183              		.cfi_startproc
 4184              		@ args = 0, pretend = 0, frame = 0
 4185              		@ frame_needed = 0, uses_anonymous_args = 0
 4186              		@ link register save eliminated.
 4187              	.LVL368:
3198:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4188              		.loc 1 3198 0
 4189 0000 00B1     		cbz	r0, .L421
 4190              	.LVL369:
3201:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4191              		.loc 1 3201 0
 4192 0002 8164     		str	r1, [r0, #72]
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 173


 4193              	.LVL370:
 4194              	.L421:
 4195 0004 7047     		bx	lr
 4196              		.cfi_endproc
 4197              	.LFE40:
 4199              		.section	.text.vTaskGetInfo,"ax",%progbits
 4200              		.align	1
 4201              		.global	vTaskGetInfo
 4202              		.syntax unified
 4203              		.thumb
 4204              		.thumb_func
 4205              		.fpu fpv4-sp-d16
 4207              	vTaskGetInfo:
 4208              	.LFB44:
3494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4209              		.loc 1 3494 0
 4210              		.cfi_startproc
 4211              		@ args = 0, pretend = 0, frame = 0
 4212              		@ frame_needed = 0, uses_anonymous_args = 0
 4213              	.LVL371:
 4214 0000 70B5     		push	{r4, r5, r6, lr}
 4215              	.LCFI43:
 4216              		.cfi_def_cfa_offset 16
 4217              		.cfi_offset 4, -16
 4218              		.cfi_offset 5, -12
 4219              		.cfi_offset 6, -8
 4220              		.cfi_offset 14, -4
 4221 0002 0D46     		mov	r5, r1
 4222 0004 1646     		mov	r6, r2
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4223              		.loc 1 3498 0
 4224 0006 0446     		mov	r4, r0
 4225 0008 D0B1     		cbz	r0, .L433
 4226              	.LVL372:
 4227              	.L424:
3500:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 4228              		.loc 1 3500 0 discriminator 4
 4229 000a 2C60     		str	r4, [r5]
3501:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 4230              		.loc 1 3501 0 discriminator 4
 4231 000c 04F13402 		add	r2, r4, #52
 4232 0010 6A60     		str	r2, [r5, #4]
3502:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 4233              		.loc 1 3502 0 discriminator 4
 4234 0012 E26A     		ldr	r2, [r4, #44]
 4235 0014 2A61     		str	r2, [r5, #16]
3503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 4236              		.loc 1 3503 0 discriminator 4
 4237 0016 226B     		ldr	r2, [r4, #48]
 4238 0018 EA61     		str	r2, [r5, #28]
3504:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4239              		.loc 1 3504 0 discriminator 4
 4240 001a 626C     		ldr	r2, [r4, #68]
 4241 001c AA60     		str	r2, [r5, #8]
3508:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4242              		.loc 1 3508 0 discriminator 4
 4243 001e E26C     		ldr	r2, [r4, #76]
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 174


 4244 0020 6A61     		str	r2, [r5, #20]
3522:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4245              		.loc 1 3522 0 discriminator 4
 4246 0022 0022     		movs	r2, #0
 4247 0024 AA61     		str	r2, [r5, #24]
3529:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4248              		.loc 1 3529 0 discriminator 4
 4249 0026 052B     		cmp	r3, #5
 4250 0028 19D0     		beq	.L425
3531:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4251              		.loc 1 3531 0
 4252 002a 124A     		ldr	r2, .L437
 4253 002c 1268     		ldr	r2, [r2]
 4254 002e 9442     		cmp	r4, r2
 4255 0030 09D0     		beq	.L434
3537:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4256              		.loc 1 3537 0
 4257 0032 2B73     		strb	r3, [r5, #12]
3544:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4258              		.loc 1 3544 0
 4259 0034 032B     		cmp	r3, #3
 4260 0036 09D0     		beq	.L435
 4261              	.LVL373:
 4262              	.L427:
3566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4263              		.loc 1 3566 0
 4264 0038 B6B9     		cbnz	r6, .L436
3580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4265              		.loc 1 3580 0
 4266 003a 0023     		movs	r3, #0
 4267 003c 2B84     		strh	r3, [r5, #32]	@ movhi
 4268 003e 70BD     		pop	{r4, r5, r6, pc}
 4269              	.LVL374:
 4270              	.L433:
3498:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4271              		.loc 1 3498 0 discriminator 1
 4272 0040 0C4A     		ldr	r2, .L437
 4273              	.LVL375:
 4274 0042 1468     		ldr	r4, [r2]
 4275 0044 E1E7     		b	.L424
 4276              	.LVL376:
 4277              	.L434:
3533:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4278              		.loc 1 3533 0
 4279 0046 0023     		movs	r3, #0
 4280              	.LVL377:
 4281 0048 2B73     		strb	r3, [r5, #12]
 4282 004a F5E7     		b	.L427
 4283              	.LVL378:
 4284              	.L435:
3546:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 4285              		.loc 1 3546 0
 4286 004c FFF7FEFF 		bl	vTaskSuspendAll
 4287              	.LVL379:
3548:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							{
 4288              		.loc 1 3548 0
 4289 0050 A36A     		ldr	r3, [r4, #40]
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 175


 4290 0052 0BB1     		cbz	r3, .L428
3550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 							}
 4291              		.loc 1 3550 0
 4292 0054 0223     		movs	r3, #2
 4293 0056 2B73     		strb	r3, [r5, #12]
 4294              	.L428:
3553:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4295              		.loc 1 3553 0
 4296 0058 FFF7FEFF 		bl	xTaskResumeAll
 4297              	.LVL380:
 4298 005c ECE7     		b	.L427
 4299              	.LVL381:
 4300              	.L425:
3561:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4301              		.loc 1 3561 0
 4302 005e 2046     		mov	r0, r4
 4303              	.LVL382:
 4304 0060 FFF7FEFF 		bl	eTaskGetState
 4305              	.LVL383:
 4306 0064 2873     		strb	r0, [r5, #12]
 4307 0066 E7E7     		b	.L427
 4308              	.L436:
3574:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4309              		.loc 1 3574 0
 4310 0068 206B     		ldr	r0, [r4, #48]
 4311 006a FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4312              	.LVL384:
 4313 006e 2884     		strh	r0, [r5, #32]	@ movhi
 4314 0070 70BD     		pop	{r4, r5, r6, pc}
 4315              	.LVL385:
 4316              	.L438:
 4317 0072 00BF     		.align	2
 4318              	.L437:
 4319 0074 00000000 		.word	.LANCHOR10
 4320              		.cfi_endproc
 4321              	.LFE44:
 4323              		.section	.text.prvListTasksWithinSingleList,"ax",%progbits
 4324              		.align	1
 4325              		.syntax unified
 4326              		.thumb
 4327              		.thumb_func
 4328              		.fpu fpv4-sp-d16
 4330              	prvListTasksWithinSingleList:
 4331              	.LFB45:
3590:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
 4332              		.loc 1 3590 0
 4333              		.cfi_startproc
 4334              		@ args = 0, pretend = 0, frame = 0
 4335              		@ frame_needed = 0, uses_anonymous_args = 0
 4336              	.LVL386:
 4337 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 4338              	.LCFI44:
 4339              		.cfi_def_cfa_offset 32
 4340              		.cfi_offset 4, -32
 4341              		.cfi_offset 5, -28
 4342              		.cfi_offset 6, -24
 4343              		.cfi_offset 7, -20
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 176


 4344              		.cfi_offset 8, -16
 4345              		.cfi_offset 9, -12
 4346              		.cfi_offset 10, -8
 4347              		.cfi_offset 14, -4
 4348              	.LVL387:
3594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4349              		.loc 1 3594 0
 4350 0004 0B68     		ldr	r3, [r1]
 4351 0006 3BB3     		cbz	r3, .L444
 4352              	.LVL388:
 4353              	.LBB209:
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4354              		.loc 1 3596 0
 4355 0008 4B68     		ldr	r3, [r1, #4]
 4356 000a 5B68     		ldr	r3, [r3, #4]
 4357 000c 4B60     		str	r3, [r1, #4]
 4358 000e 01F10809 		add	r9, r1, #8
 4359 0012 4B45     		cmp	r3, r9
 4360 0014 07D0     		beq	.L446
 4361              	.L441:
 4362 0016 9046     		mov	r8, r2
 4363 0018 0D46     		mov	r5, r1
 4364 001a 0746     		mov	r7, r0
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4365              		.loc 1 3596 0 is_stmt 0 discriminator 3
 4366 001c 4B68     		ldr	r3, [r1, #4]
 4367 001e D3F80CA0 		ldr	r10, [r3, #12]
 4368              	.LVL389:
 4369              	.LBE209:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4370              		.loc 1 3592 0 is_stmt 1 discriminator 3
 4371 0022 0024     		movs	r4, #0
 4372 0024 10E0     		b	.L443
 4373              	.LVL390:
 4374              	.L446:
 4375              	.LBB210:
3596:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4376              		.loc 1 3596 0 discriminator 1
 4377 0026 5B68     		ldr	r3, [r3, #4]
 4378 0028 4B60     		str	r3, [r1, #4]
 4379 002a F4E7     		b	.L441
 4380              	.LVL391:
 4381              	.L442:
 4382              	.LBE210:
 4383              	.LBB211:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4384              		.loc 1 3604 0 discriminator 3
 4385 002c 6B68     		ldr	r3, [r5, #4]
 4386 002e DE68     		ldr	r6, [r3, #12]
 4387              	.LVL392:
 4388              	.LBE211:
3605:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask++;
 4389              		.loc 1 3605 0 discriminator 3
 4390 0030 04EBC403 		add	r3, r4, r4, lsl #3
 4391 0034 9900     		lsls	r1, r3, #2
 4392 0036 4346     		mov	r3, r8
 4393 0038 0122     		movs	r2, #1
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 177


 4394 003a 3944     		add	r1, r1, r7
 4395 003c 3046     		mov	r0, r6
 4396 003e FFF7FEFF 		bl	vTaskGetInfo
 4397              	.LVL393:
3606:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			} while( pxNextTCB != pxFirstTCB );
 4398              		.loc 1 3606 0 discriminator 3
 4399 0042 0134     		adds	r4, r4, #1
 4400              	.LVL394:
3607:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4401              		.loc 1 3607 0 discriminator 3
 4402 0044 B245     		cmp	r10, r6
 4403 0046 08D0     		beq	.L439
 4404              	.LVL395:
 4405              	.L443:
 4406              	.LBB212:
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4407              		.loc 1 3604 0
 4408 0048 6B68     		ldr	r3, [r5, #4]
 4409 004a 5B68     		ldr	r3, [r3, #4]
 4410 004c 6B60     		str	r3, [r5, #4]
 4411 004e 9945     		cmp	r9, r3
 4412 0050 ECD1     		bne	.L442
3604:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 4413              		.loc 1 3604 0 is_stmt 0 discriminator 1
 4414 0052 5B68     		ldr	r3, [r3, #4]
 4415 0054 6B60     		str	r3, [r5, #4]
 4416 0056 E9E7     		b	.L442
 4417              	.LVL396:
 4418              	.L444:
 4419              	.LBE212:
3592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4420              		.loc 1 3592 0 is_stmt 1
 4421 0058 0024     		movs	r4, #0
 4422              	.LVL397:
 4423              	.L439:
3615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4424              		.loc 1 3615 0
 4425 005a 2046     		mov	r0, r4
 4426 005c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 4427              		.cfi_endproc
 4428              	.LFE45:
 4430              		.section	.text.uxTaskGetSystemState,"ax",%progbits
 4431              		.align	1
 4432              		.global	uxTaskGetSystemState
 4433              		.syntax unified
 4434              		.thumb
 4435              		.thumb_func
 4436              		.fpu fpv4-sp-d16
 4438              	uxTaskGetSystemState:
 4439              	.LFB27:
2404:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 4440              		.loc 1 2404 0
 4441              		.cfi_startproc
 4442              		@ args = 0, pretend = 0, frame = 0
 4443              		@ frame_needed = 0, uses_anonymous_args = 0
 4444              	.LVL398:
 4445 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 178


 4446              	.LCFI45:
 4447              		.cfi_def_cfa_offset 24
 4448              		.cfi_offset 3, -24
 4449              		.cfi_offset 4, -20
 4450              		.cfi_offset 5, -16
 4451              		.cfi_offset 6, -12
 4452              		.cfi_offset 7, -8
 4453              		.cfi_offset 14, -4
 4454 0002 0746     		mov	r7, r0
 4455 0004 0C46     		mov	r4, r1
 4456 0006 1646     		mov	r6, r2
 4457              	.LVL399:
2407:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4458              		.loc 1 2407 0
 4459 0008 FFF7FEFF 		bl	vTaskSuspendAll
 4460              	.LVL400:
2410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4461              		.loc 1 2410 0
 4462 000c 224B     		ldr	r3, .L452
 4463 000e 1B68     		ldr	r3, [r3]
 4464 0010 A342     		cmp	r3, r4
 4465 0012 3ED8     		bhi	.L450
 4466 0014 3824     		movs	r4, #56
 4467              	.LVL401:
 4468 0016 0025     		movs	r5, #0
 4469              	.LVL402:
 4470              	.L449:
2416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists
 4471              		.loc 1 2416 0 discriminator 1
 4472 0018 013C     		subs	r4, r4, #1
 4473              	.LVL403:
2417:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4474              		.loc 1 2417 0 discriminator 1
 4475 001a 05EBC503 		add	r3, r5, r5, lsl #3
 4476 001e 9800     		lsls	r0, r3, #2
 4477 0020 04EB8402 		add	r2, r4, r4, lsl #2
 4478 0024 9300     		lsls	r3, r2, #2
 4479 0026 0122     		movs	r2, #1
 4480 0028 1C49     		ldr	r1, .L452+4
 4481 002a 1944     		add	r1, r1, r3
 4482 002c 3844     		add	r0, r0, r7
 4483 002e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4484              	.LVL404:
 4485 0032 0544     		add	r5, r5, r0
 4486              	.LVL405:
2419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4487              		.loc 1 2419 0 discriminator 1
 4488 0034 002C     		cmp	r4, #0
 4489 0036 EFD1     		bne	.L449
2423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverfl
 4490              		.loc 1 2423 0
 4491 0038 05EBC503 		add	r3, r5, r5, lsl #3
 4492 003c 9800     		lsls	r0, r3, #2
 4493 003e 184B     		ldr	r3, .L452+8
 4494 0040 1968     		ldr	r1, [r3]
 4495 0042 0222     		movs	r2, #2
 4496 0044 3844     		add	r0, r0, r7
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 179


 4497 0046 FFF7FEFF 		bl	prvListTasksWithinSingleList
 4498              	.LVL406:
 4499 004a 2C18     		adds	r4, r5, r0
 4500              	.LVL407:
2424:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4501              		.loc 1 2424 0
 4502 004c 04EBC403 		add	r3, r4, r4, lsl #3
 4503 0050 9800     		lsls	r0, r3, #2
 4504 0052 144B     		ldr	r3, .L452+12
 4505 0054 1968     		ldr	r1, [r3]
 4506 0056 0222     		movs	r2, #2
 4507 0058 3844     		add	r0, r0, r7
 4508 005a FFF7FEFF 		bl	prvListTasksWithinSingleList
 4509              	.LVL408:
 4510 005e 0444     		add	r4, r4, r0
 4511              	.LVL409:
2430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4512              		.loc 1 2430 0
 4513 0060 04EBC403 		add	r3, r4, r4, lsl #3
 4514 0064 9800     		lsls	r0, r3, #2
 4515 0066 0422     		movs	r2, #4
 4516 0068 0F49     		ldr	r1, .L452+16
 4517 006a 3844     		add	r0, r0, r7
 4518 006c FFF7FEFF 		bl	prvListTasksWithinSingleList
 4519              	.LVL410:
 4520 0070 0444     		add	r4, r4, r0
 4521              	.LVL411:
2438:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4522              		.loc 1 2438 0
 4523 0072 04EBC403 		add	r3, r4, r4, lsl #3
 4524 0076 9800     		lsls	r0, r3, #2
 4525 0078 0322     		movs	r2, #3
 4526 007a 0C49     		ldr	r1, .L452+20
 4527 007c 3844     		add	r0, r0, r7
 4528 007e FFF7FEFF 		bl	prvListTasksWithinSingleList
 4529              	.LVL412:
 4530 0082 0444     		add	r4, r4, r0
 4531              	.LVL413:
2455:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4532              		.loc 1 2455 0
 4533 0084 0EB1     		cbz	r6, .L448
2457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 4534              		.loc 1 2457 0
 4535 0086 0023     		movs	r3, #0
 4536 0088 3360     		str	r3, [r6]
 4537              	.LVL414:
 4538              	.L448:
2467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4539              		.loc 1 2467 0
 4540 008a FFF7FEFF 		bl	xTaskResumeAll
 4541              	.LVL415:
2470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4542              		.loc 1 2470 0
 4543 008e 2046     		mov	r0, r4
 4544 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4545              	.LVL416:
 4546              	.L450:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 180


2405:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4547              		.loc 1 2405 0
 4548 0092 0024     		movs	r4, #0
 4549              	.LVL417:
 4550 0094 F9E7     		b	.L448
 4551              	.L453:
 4552 0096 00BF     		.align	2
 4553              	.L452:
 4554 0098 00000000 		.word	.LANCHOR9
 4555 009c 00000000 		.word	.LANCHOR4
 4556 00a0 00000000 		.word	.LANCHOR2
 4557 00a4 00000000 		.word	.LANCHOR8
 4558 00a8 00000000 		.word	.LANCHOR7
 4559 00ac 00000000 		.word	.LANCHOR0
 4560              		.cfi_endproc
 4561              	.LFE27:
 4563              		.section	.text.uxTaskGetStackHighWaterMark,"ax",%progbits
 4564              		.align	1
 4565              		.global	uxTaskGetStackHighWaterMark
 4566              		.syntax unified
 4567              		.thumb
 4568              		.thumb_func
 4569              		.fpu fpv4-sp-d16
 4571              	uxTaskGetStackHighWaterMark:
 4572              	.LFB47:
3643:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 4573              		.loc 1 3643 0
 4574              		.cfi_startproc
 4575              		@ args = 0, pretend = 0, frame = 0
 4576              		@ frame_needed = 0, uses_anonymous_args = 0
 4577              	.LVL418:
 4578 0000 08B5     		push	{r3, lr}
 4579              	.LCFI46:
 4580              		.cfi_def_cfa_offset 8
 4581              		.cfi_offset 3, -8
 4582              		.cfi_offset 14, -4
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4583              		.loc 1 3648 0
 4584 0002 0346     		mov	r3, r0
 4585 0004 18B1     		cbz	r0, .L458
 4586              	.L455:
 4587              	.LVL419:
3660:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4588              		.loc 1 3660 0 discriminator 4
 4589 0006 186B     		ldr	r0, [r3, #48]
 4590              	.LVL420:
 4591 0008 FFF7FEFF 		bl	prvTaskCheckFreeStackSpace
 4592              	.LVL421:
3663:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4593              		.loc 1 3663 0 discriminator 4
 4594 000c 08BD     		pop	{r3, pc}
 4595              	.LVL422:
 4596              	.L458:
3648:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4597              		.loc 1 3648 0 discriminator 1
 4598 000e 014B     		ldr	r3, .L459
 4599 0010 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 181


 4600 0012 F8E7     		b	.L455
 4601              	.L460:
 4602              		.align	2
 4603              	.L459:
 4604 0014 00000000 		.word	.LANCHOR10
 4605              		.cfi_endproc
 4606              	.LFE47:
 4608              		.section	.text.xTaskGetCurrentTaskHandle,"ax",%progbits
 4609              		.align	1
 4610              		.global	xTaskGetCurrentTaskHandle
 4611              		.syntax unified
 4612              		.thumb
 4613              		.thumb_func
 4614              		.fpu fpv4-sp-d16
 4616              	xTaskGetCurrentTaskHandle:
 4617              	.LFB50:
3751:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TaskHandle_t xReturn;
 4618              		.loc 1 3751 0
 4619              		.cfi_startproc
 4620              		@ args = 0, pretend = 0, frame = 0
 4621              		@ frame_needed = 0, uses_anonymous_args = 0
 4622              		@ link register save eliminated.
3757:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4623              		.loc 1 3757 0
 4624 0000 014B     		ldr	r3, .L462
 4625 0002 1868     		ldr	r0, [r3]
 4626              	.LVL423:
3760:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4627              		.loc 1 3760 0
 4628 0004 7047     		bx	lr
 4629              	.L463:
 4630 0006 00BF     		.align	2
 4631              	.L462:
 4632 0008 00000000 		.word	.LANCHOR10
 4633              		.cfi_endproc
 4634              	.LFE50:
 4636              		.section	.text.xTaskGetSchedulerState,"ax",%progbits
 4637              		.align	1
 4638              		.global	xTaskGetSchedulerState
 4639              		.syntax unified
 4640              		.thumb
 4641              		.thumb_func
 4642              		.fpu fpv4-sp-d16
 4644              	xTaskGetSchedulerState:
 4645              	.LFB51:
3768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 4646              		.loc 1 3768 0
 4647              		.cfi_startproc
 4648              		@ args = 0, pretend = 0, frame = 0
 4649              		@ frame_needed = 0, uses_anonymous_args = 0
 4650              		@ link register save eliminated.
3771:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4651              		.loc 1 3771 0
 4652 0000 054B     		ldr	r3, .L468
 4653 0002 1B68     		ldr	r3, [r3]
 4654 0004 23B1     		cbz	r3, .L466
3777:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 182


 4655              		.loc 1 3777 0
 4656 0006 054B     		ldr	r3, .L468+4
 4657 0008 1B68     		ldr	r3, [r3]
 4658 000a 1BB9     		cbnz	r3, .L467
3779:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4659              		.loc 1 3779 0
 4660 000c 0220     		movs	r0, #2
 4661 000e 7047     		bx	lr
 4662              	.L466:
3773:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 4663              		.loc 1 3773 0
 4664 0010 0120     		movs	r0, #1
 4665 0012 7047     		bx	lr
 4666              	.L467:
3783:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4667              		.loc 1 3783 0
 4668 0014 0020     		movs	r0, #0
 4669              	.LVL424:
3788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4670              		.loc 1 3788 0
 4671 0016 7047     		bx	lr
 4672              	.L469:
 4673              		.align	2
 4674              	.L468:
 4675 0018 00000000 		.word	.LANCHOR11
 4676 001c 00000000 		.word	.LANCHOR16
 4677              		.cfi_endproc
 4678              	.LFE51:
 4680              		.section	.text.xTaskPriorityInherit,"ax",%progbits
 4681              		.align	1
 4682              		.global	xTaskPriorityInherit
 4683              		.syntax unified
 4684              		.thumb
 4685              		.thumb_func
 4686              		.fpu fpv4-sp-d16
 4688              	xTaskPriorityInherit:
 4689              	.LFB52:
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 4690              		.loc 1 3796 0
 4691              		.cfi_startproc
 4692              		@ args = 0, pretend = 0, frame = 0
 4693              		@ frame_needed = 0, uses_anonymous_args = 0
 4694              	.LVL425:
3803:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4695              		.loc 1 3803 0
 4696 0000 0028     		cmp	r0, #0
 4697 0002 44D0     		beq	.L477
3796:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 4698              		.loc 1 3796 0
 4699 0004 38B5     		push	{r3, r4, r5, lr}
 4700              	.LCFI47:
 4701              		.cfi_def_cfa_offset 16
 4702              		.cfi_offset 3, -16
 4703              		.cfi_offset 4, -12
 4704              		.cfi_offset 5, -8
 4705              		.cfi_offset 14, -4
 4706 0006 0546     		mov	r5, r0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 183


3808:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4707              		.loc 1 3808 0
 4708 0008 C26A     		ldr	r2, [r0, #44]
 4709 000a 2249     		ldr	r1, .L487
 4710 000c 0968     		ldr	r1, [r1]
 4711 000e C96A     		ldr	r1, [r1, #44]
 4712 0010 8A42     		cmp	r2, r1
 4713 0012 32D2     		bcs	.L472
3813:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4714              		.loc 1 3813 0
 4715 0014 8169     		ldr	r1, [r0, #24]
 4716 0016 0029     		cmp	r1, #0
 4717 0018 05DB     		blt	.L473
3815:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4718              		.loc 1 3815 0
 4719 001a 1E49     		ldr	r1, .L487
 4720 001c 0968     		ldr	r1, [r1]
 4721 001e C96A     		ldr	r1, [r1, #44]
 4722 0020 C1F13801 		rsb	r1, r1, #56
 4723 0024 8161     		str	r1, [r0, #24]
 4724              	.L473:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4725              		.loc 1 3824 0
 4726 0026 6869     		ldr	r0, [r5, #20]
 4727              	.LVL426:
 4728 0028 02EB8202 		add	r2, r2, r2, lsl #2
 4729 002c 9100     		lsls	r1, r2, #2
 4730 002e 1A4A     		ldr	r2, .L487+4
 4731 0030 0A44     		add	r2, r2, r1
 4732 0032 9042     		cmp	r0, r2
 4733 0034 07D0     		beq	.L484
 4734 0036 0022     		movs	r2, #0
 4735              	.L474:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4736              		.loc 1 3824 0 is_stmt 0 discriminator 4
 4737 0038 3AB9     		cbnz	r2, .L485
3842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4738              		.loc 1 3842 0 is_stmt 1
 4739 003a 164A     		ldr	r2, .L487
 4740 003c 1268     		ldr	r2, [r2]
 4741 003e D26A     		ldr	r2, [r2, #44]
 4742 0040 EA62     		str	r2, [r5, #44]
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4743              		.loc 1 3848 0
 4744 0042 0120     		movs	r0, #1
 4745 0044 38BD     		pop	{r3, r4, r5, pc}
 4746              	.LVL427:
 4747              	.L484:
3824:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4748              		.loc 1 3824 0
 4749 0046 0122     		movs	r2, #1
 4750 0048 F6E7     		b	.L474
 4751              	.L485:
3826:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4752              		.loc 1 3826 0
 4753 004a 2C1D     		adds	r4, r5, #4
 4754 004c 2046     		mov	r0, r4
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 184


 4755 004e FFF7FEFF 		bl	uxListRemove
 4756              	.LVL428:
3836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxMutexHolderTCB );
 4757              		.loc 1 3836 0
 4758 0052 104B     		ldr	r3, .L487
 4759 0054 1B68     		ldr	r3, [r3]
 4760 0056 DB6A     		ldr	r3, [r3, #44]
 4761 0058 EB62     		str	r3, [r5, #44]
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4762              		.loc 1 3837 0
 4763 005a 104A     		ldr	r2, .L487+8
 4764 005c 1268     		ldr	r2, [r2]
 4765 005e 9342     		cmp	r3, r2
 4766 0060 01D9     		bls	.L476
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4767              		.loc 1 3837 0 is_stmt 0 discriminator 1
 4768 0062 0E4A     		ldr	r2, .L487+8
 4769 0064 1360     		str	r3, [r2]
 4770              	.L476:
3837:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4771              		.loc 1 3837 0 discriminator 3
 4772 0066 03EB8303 		add	r3, r3, r3, lsl #2
 4773 006a 9A00     		lsls	r2, r3, #2
 4774 006c 2146     		mov	r1, r4
 4775 006e 0A48     		ldr	r0, .L487+4
 4776 0070 1044     		add	r0, r0, r2
 4777 0072 FFF7FEFF 		bl	vListInsertEnd
 4778              	.LVL429:
3848:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 4779              		.loc 1 3848 0 is_stmt 1 discriminator 3
 4780 0076 0120     		movs	r0, #1
 4781 0078 38BD     		pop	{r3, r4, r5, pc}
 4782              	.LVL430:
 4783              	.L472:
3852:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4784              		.loc 1 3852 0
 4785 007a C26C     		ldr	r2, [r0, #76]
 4786 007c 054B     		ldr	r3, .L487
 4787 007e 1B68     		ldr	r3, [r3]
 4788 0080 DB6A     		ldr	r3, [r3, #44]
 4789 0082 9A42     		cmp	r2, r3
 4790 0084 01D2     		bcs	.L486
3861:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4791              		.loc 1 3861 0
 4792 0086 0120     		movs	r0, #1
 4793              	.LVL431:
3875:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4794              		.loc 1 3875 0
 4795 0088 38BD     		pop	{r3, r4, r5, pc}
 4796              	.LVL432:
 4797              	.L486:
3798:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4798              		.loc 1 3798 0
 4799 008a 0020     		movs	r0, #0
 4800              	.LVL433:
 4801 008c 38BD     		pop	{r3, r4, r5, pc}
 4802              	.LVL434:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 185


 4803              	.L477:
 4804              	.LCFI48:
 4805              		.cfi_def_cfa_offset 0
 4806              		.cfi_restore 3
 4807              		.cfi_restore 4
 4808              		.cfi_restore 5
 4809              		.cfi_restore 14
 4810 008e 0020     		movs	r0, #0
 4811              	.LVL435:
 4812 0090 7047     		bx	lr
 4813              	.L488:
 4814 0092 00BF     		.align	2
 4815              	.L487:
 4816 0094 00000000 		.word	.LANCHOR10
 4817 0098 00000000 		.word	.LANCHOR4
 4818 009c 00000000 		.word	.LANCHOR13
 4819              		.cfi_endproc
 4820              	.LFE52:
 4822              		.section	.text.xTaskPriorityDisinherit,"ax",%progbits
 4823              		.align	1
 4824              		.global	xTaskPriorityDisinherit
 4825              		.syntax unified
 4826              		.thumb
 4827              		.thumb_func
 4828              		.fpu fpv4-sp-d16
 4830              	xTaskPriorityDisinherit:
 4831              	.LFB53:
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4832              		.loc 1 3883 0
 4833              		.cfi_startproc
 4834              		@ args = 0, pretend = 0, frame = 0
 4835              		@ frame_needed = 0, uses_anonymous_args = 0
 4836              	.LVL436:
3887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4837              		.loc 1 3887 0
 4838 0000 0028     		cmp	r0, #0
 4839 0002 39D0     		beq	.L496
3883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4840              		.loc 1 3883 0
 4841 0004 38B5     		push	{r3, r4, r5, lr}
 4842              	.LCFI49:
 4843              		.cfi_def_cfa_offset 16
 4844              		.cfi_offset 3, -16
 4845              		.cfi_offset 4, -12
 4846              		.cfi_offset 5, -8
 4847              		.cfi_offset 14, -4
 4848 0006 0446     		mov	r4, r0
3893:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			configASSERT( pxTCB->uxMutexesHeld );
 4849              		.loc 1 3893 0
 4850 0008 1E4A     		ldr	r2, .L503
 4851 000a 1268     		ldr	r2, [r2]
 4852 000c 9042     		cmp	r0, r2
 4853 000e 08D0     		beq	.L491
 4854              	.LBB213:
 4855              	.LBB214:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4856              		.loc 2 195 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 186


 4857              		.syntax unified
 4858              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4859 0010 4FF05003 			mov r3, #80												
 4860 0014 83F31188 		msr basepri, r3											
 4861 0018 BFF36F8F 		isb														
 4862 001c BFF34F8F 		dsb														
 4863              	
 4864              	@ 0 "" 2
 4865              	.LVL437:
 4866              		.thumb
 4867              		.syntax unified
 4868              	.L492:
 4869 0020 FEE7     		b	.L492
 4870              	.L491:
 4871              	.LBE214:
 4872              	.LBE213:
3894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			( pxTCB->uxMutexesHeld )--;
 4873              		.loc 1 3894 0
 4874 0022 026D     		ldr	r2, [r0, #80]
 4875 0024 42B9     		cbnz	r2, .L493
 4876              	.LBB215:
 4877              	.LBB216:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 4878              		.loc 2 195 0
 4879              		.syntax unified
 4880              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 4881 0026 4FF05003 			mov r3, #80												
 4882 002a 83F31188 		msr basepri, r3											
 4883 002e BFF36F8F 		isb														
 4884 0032 BFF34F8F 		dsb														
 4885              	
 4886              	@ 0 "" 2
 4887              	.LVL438:
 4888              		.thumb
 4889              		.syntax unified
 4890              	.L494:
 4891 0036 FEE7     		b	.L494
 4892              	.L493:
 4893              	.LBE216:
 4894              	.LBE215:
3895:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4895              		.loc 1 3895 0
 4896 0038 013A     		subs	r2, r2, #1
 4897 003a 0265     		str	r2, [r0, #80]
3899:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 4898              		.loc 1 3899 0
 4899 003c C06A     		ldr	r0, [r0, #44]
 4900              	.LVL439:
 4901 003e E16C     		ldr	r1, [r4, #76]
 4902 0040 8842     		cmp	r0, r1
 4903 0042 1BD0     		beq	.L497
3902:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 4904              		.loc 1 3902 0
 4905 0044 E2B9     		cbnz	r2, .L498
3909:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 4906              		.loc 1 3909 0
 4907 0046 251D     		adds	r5, r4, #4
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 187


 4908 0048 2846     		mov	r0, r5
 4909 004a FFF7FEFF 		bl	uxListRemove
 4910              	.LVL440:
3921:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4911              		.loc 1 3921 0
 4912 004e E36C     		ldr	r3, [r4, #76]
 4913 0050 E362     		str	r3, [r4, #44]
3926:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 4914              		.loc 1 3926 0
 4915 0052 C3F13802 		rsb	r2, r3, #56
 4916 0056 A261     		str	r2, [r4, #24]
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4917              		.loc 1 3927 0
 4918 0058 0B4A     		ldr	r2, .L503+4
 4919 005a 1268     		ldr	r2, [r2]
 4920 005c 9342     		cmp	r3, r2
 4921 005e 01D9     		bls	.L495
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4922              		.loc 1 3927 0 is_stmt 0 discriminator 1
 4923 0060 094A     		ldr	r2, .L503+4
 4924 0062 1360     		str	r3, [r2]
 4925              	.L495:
3927:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4926              		.loc 1 3927 0 discriminator 3
 4927 0064 03EB8303 		add	r3, r3, r3, lsl #2
 4928 0068 9A00     		lsls	r2, r3, #2
 4929 006a 2946     		mov	r1, r5
 4930 006c 0748     		ldr	r0, .L503+8
 4931 006e 1044     		add	r0, r0, r2
 4932 0070 FFF7FEFF 		bl	vListInsertEnd
 4933              	.LVL441:
3937:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 4934              		.loc 1 3937 0 is_stmt 1 discriminator 3
 4935 0074 0120     		movs	r0, #1
 4936 0076 38BD     		pop	{r3, r4, r5, pc}
 4937              	.LVL442:
 4938              	.L496:
 4939              	.LCFI50:
 4940              		.cfi_def_cfa_offset 0
 4941              		.cfi_restore 3
 4942              		.cfi_restore 4
 4943              		.cfi_restore 5
 4944              		.cfi_restore 14
3885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4945              		.loc 1 3885 0
 4946 0078 0020     		movs	r0, #0
 4947              	.LVL443:
 4948 007a 7047     		bx	lr
 4949              	.LVL444:
 4950              	.L497:
 4951              	.LCFI51:
 4952              		.cfi_def_cfa_offset 16
 4953              		.cfi_offset 3, -16
 4954              		.cfi_offset 4, -12
 4955              		.cfi_offset 5, -8
 4956              		.cfi_offset 14, -4
 4957 007c 0020     		movs	r0, #0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 188


 4958 007e 38BD     		pop	{r3, r4, r5, pc}
 4959              	.LVL445:
 4960              	.L498:
 4961 0080 0020     		movs	r0, #0
3955:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 4962              		.loc 1 3955 0
 4963 0082 38BD     		pop	{r3, r4, r5, pc}
 4964              	.LVL446:
 4965              	.L504:
 4966              		.align	2
 4967              	.L503:
 4968 0084 00000000 		.word	.LANCHOR10
 4969 0088 00000000 		.word	.LANCHOR13
 4970 008c 00000000 		.word	.LANCHOR4
 4971              		.cfi_endproc
 4972              	.LFE53:
 4974              		.section	.text.vTaskPriorityDisinheritAfterTimeout,"ax",%progbits
 4975              		.align	1
 4976              		.global	vTaskPriorityDisinheritAfterTimeout
 4977              		.syntax unified
 4978              		.thumb
 4979              		.thumb_func
 4980              		.fpu fpv4-sp-d16
 4982              	vTaskPriorityDisinheritAfterTimeout:
 4983              	.LFB54:
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4984              		.loc 1 3963 0
 4985              		.cfi_startproc
 4986              		@ args = 0, pretend = 0, frame = 0
 4987              		@ frame_needed = 0, uses_anonymous_args = 0
 4988              	.LVL447:
3968:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 4989              		.loc 1 3968 0
 4990 0000 0028     		cmp	r0, #0
 4991 0002 4BD0     		beq	.L517
3963:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 4992              		.loc 1 3963 0
 4993 0004 38B5     		push	{r3, r4, r5, lr}
 4994              	.LCFI52:
 4995              		.cfi_def_cfa_offset 16
 4996              		.cfi_offset 3, -16
 4997              		.cfi_offset 4, -12
 4998              		.cfi_offset 5, -8
 4999              		.cfi_offset 14, -4
 5000 0006 0446     		mov	r4, r0
3972:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5001              		.loc 1 3972 0
 5002 0008 006D     		ldr	r0, [r0, #80]
 5003              	.LVL448:
 5004 000a 40B9     		cbnz	r0, .L507
 5005              	.LBB217:
 5006              	.LBB218:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5007              		.loc 2 195 0
 5008              		.syntax unified
 5009              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5010 000c 4FF05003 			mov r3, #80												
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 189


 5011 0010 83F31188 		msr basepri, r3											
 5012 0014 BFF36F8F 		isb														
 5013 0018 BFF34F8F 		dsb														
 5014              	
 5015              	@ 0 "" 2
 5016              	.LVL449:
 5017              		.thumb
 5018              		.syntax unified
 5019              	.L508:
 5020 001c FEE7     		b	.L508
 5021              	.L507:
 5022              	.LBE218:
 5023              	.LBE217:
3978:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5024              		.loc 1 3978 0
 5025 001e E26C     		ldr	r2, [r4, #76]
 5026 0020 8A42     		cmp	r2, r1
 5027 0022 00D2     		bcs	.L509
3980:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5028              		.loc 1 3980 0
 5029 0024 0A46     		mov	r2, r1
 5030              	.L509:
 5031              	.LVL450:
3988:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5032              		.loc 1 3988 0
 5033 0026 E16A     		ldr	r1, [r4, #44]
 5034              	.LVL451:
 5035 0028 8A42     		cmp	r2, r1
 5036 002a 01D0     		beq	.L505
3994:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5037              		.loc 1 3994 0
 5038 002c 0128     		cmp	r0, #1
 5039 002e 00D0     		beq	.L520
 5040              	.LVL452:
 5041              	.L505:
 5042 0030 38BD     		pop	{r3, r4, r5, pc}
 5043              	.LVL453:
 5044              	.L520:
3999:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5045              		.loc 1 3999 0
 5046 0032 1B48     		ldr	r0, .L521
 5047 0034 0068     		ldr	r0, [r0]
 5048 0036 8442     		cmp	r4, r0
 5049 0038 08D1     		bne	.L510
 5050              	.LBB219:
 5051              	.LBB220:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5052              		.loc 2 195 0
 5053              		.syntax unified
 5054              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5055 003a 4FF05003 			mov r3, #80												
 5056 003e 83F31188 		msr basepri, r3											
 5057 0042 BFF36F8F 		isb														
 5058 0046 BFF34F8F 		dsb														
 5059              	
 5060              	@ 0 "" 2
 5061              	.LVL454:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 190


 5062              		.thumb
 5063              		.syntax unified
 5064              	.L511:
 5065 004a FEE7     		b	.L511
 5066              	.L510:
 5067              	.LVL455:
 5068              	.LBE220:
 5069              	.LBE219:
4006:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5070              		.loc 1 4006 0
 5071 004c E262     		str	r2, [r4, #44]
4010:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5072              		.loc 1 4010 0
 5073 004e A069     		ldr	r0, [r4, #24]
 5074 0050 0028     		cmp	r0, #0
 5075 0052 02DB     		blt	.L512
4012:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5076              		.loc 1 4012 0
 5077 0054 C2F13802 		rsb	r2, r2, #56
 5078              	.LVL456:
 5079 0058 A261     		str	r2, [r4, #24]
 5080              	.L512:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5081              		.loc 1 4025 0
 5082 005a 6369     		ldr	r3, [r4, #20]
 5083 005c 01EB8101 		add	r1, r1, r1, lsl #2
 5084              	.LVL457:
 5085 0060 8800     		lsls	r0, r1, #2
 5086 0062 104A     		ldr	r2, .L521+4
 5087 0064 0244     		add	r2, r2, r0
 5088 0066 9342     		cmp	r3, r2
 5089 0068 16D1     		bne	.L515
 5090 006a 0122     		movs	r2, #1
 5091              	.L513:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5092              		.loc 1 4025 0 is_stmt 0 discriminator 4
 5093 006c 002A     		cmp	r2, #0
 5094 006e DFD0     		beq	.L505
4027:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 						{
 5095              		.loc 1 4027 0 is_stmt 1
 5096 0070 251D     		adds	r5, r4, #4
 5097 0072 2846     		mov	r0, r5
 5098 0074 FFF7FEFF 		bl	uxListRemove
 5099              	.LVL458:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5100              		.loc 1 4036 0
 5101 0078 E36A     		ldr	r3, [r4, #44]
 5102 007a 0B4A     		ldr	r2, .L521+8
 5103 007c 1268     		ldr	r2, [r2]
 5104 007e 9342     		cmp	r3, r2
 5105 0080 01D9     		bls	.L514
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5106              		.loc 1 4036 0 is_stmt 0 discriminator 1
 5107 0082 094A     		ldr	r2, .L521+8
 5108 0084 1360     		str	r3, [r2]
 5109              	.L514:
4036:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 191


 5110              		.loc 1 4036 0 discriminator 3
 5111 0086 03EB8303 		add	r3, r3, r3, lsl #2
 5112 008a 9A00     		lsls	r2, r3, #2
 5113 008c 2946     		mov	r1, r5
 5114 008e 0548     		ldr	r0, .L521+4
 5115 0090 1044     		add	r0, r0, r2
 5116 0092 FFF7FEFF 		bl	vListInsertEnd
 5117              	.LVL459:
4057:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5118              		.loc 1 4057 0 is_stmt 1 discriminator 3
 5119 0096 CBE7     		b	.L505
 5120              	.LVL460:
 5121              	.L515:
4025:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5122              		.loc 1 4025 0
 5123 0098 0022     		movs	r2, #0
 5124 009a E7E7     		b	.L513
 5125              	.LVL461:
 5126              	.L517:
 5127              	.LCFI53:
 5128              		.cfi_def_cfa_offset 0
 5129              		.cfi_restore 3
 5130              		.cfi_restore 4
 5131              		.cfi_restore 5
 5132              		.cfi_restore 14
 5133 009c 7047     		bx	lr
 5134              	.L522:
 5135 009e 00BF     		.align	2
 5136              	.L521:
 5137 00a0 00000000 		.word	.LANCHOR10
 5138 00a4 00000000 		.word	.LANCHOR4
 5139 00a8 00000000 		.word	.LANCHOR13
 5140              		.cfi_endproc
 5141              	.LFE54:
 5143              		.section	.text.uxTaskResetEventItemValue,"ax",%progbits
 5144              		.align	1
 5145              		.global	uxTaskResetEventItemValue
 5146              		.syntax unified
 5147              		.thumb
 5148              		.thumb_func
 5149              		.fpu fpv4-sp-d16
 5151              	uxTaskResetEventItemValue:
 5152              	.LFB55:
4377:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** TickType_t uxReturn;
 5153              		.loc 1 4377 0
 5154              		.cfi_startproc
 5155              		@ args = 0, pretend = 0, frame = 0
 5156              		@ frame_needed = 0, uses_anonymous_args = 0
 5157              		@ link register save eliminated.
4380:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5158              		.loc 1 4380 0
 5159 0000 044B     		ldr	r3, .L524
 5160 0002 1A68     		ldr	r2, [r3]
 5161 0004 9069     		ldr	r0, [r2, #24]
 5162              	.LVL462:
4384:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5163              		.loc 1 4384 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 192


 5164 0006 1A68     		ldr	r2, [r3]
 5165 0008 1B68     		ldr	r3, [r3]
 5166 000a DB6A     		ldr	r3, [r3, #44]
 5167 000c C3F13803 		rsb	r3, r3, #56
 5168 0010 9361     		str	r3, [r2, #24]
4387:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** /*-----------------------------------------------------------*/
 5169              		.loc 1 4387 0
 5170 0012 7047     		bx	lr
 5171              	.L525:
 5172              		.align	2
 5173              	.L524:
 5174 0014 00000000 		.word	.LANCHOR10
 5175              		.cfi_endproc
 5176              	.LFE55:
 5178              		.section	.text.pvTaskIncrementMutexHeldCount,"ax",%progbits
 5179              		.align	1
 5180              		.global	pvTaskIncrementMutexHeldCount
 5181              		.syntax unified
 5182              		.thumb
 5183              		.thumb_func
 5184              		.fpu fpv4-sp-d16
 5186              	pvTaskIncrementMutexHeldCount:
 5187              	.LFB56:
4393:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		/* If xSemaphoreCreateMutex() is called before any tasks have been created
 5188              		.loc 1 4393 0
 5189              		.cfi_startproc
 5190              		@ args = 0, pretend = 0, frame = 0
 5191              		@ frame_needed = 0, uses_anonymous_args = 0
 5192              		@ link register save eliminated.
4396:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5193              		.loc 1 4396 0
 5194 0000 054B     		ldr	r3, .L528
 5195 0002 1B68     		ldr	r3, [r3]
 5196 0004 23B1     		cbz	r3, .L527
4398:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5197              		.loc 1 4398 0
 5198 0006 044B     		ldr	r3, .L528
 5199 0008 1A68     		ldr	r2, [r3]
 5200 000a 136D     		ldr	r3, [r2, #80]
 5201 000c 0133     		adds	r3, r3, #1
 5202 000e 1365     		str	r3, [r2, #80]
 5203              	.L527:
4401:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	}
 5204              		.loc 1 4401 0
 5205 0010 014B     		ldr	r3, .L528
 5206 0012 1868     		ldr	r0, [r3]
4402:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5207              		.loc 1 4402 0
 5208 0014 7047     		bx	lr
 5209              	.L529:
 5210 0016 00BF     		.align	2
 5211              	.L528:
 5212 0018 00000000 		.word	.LANCHOR10
 5213              		.cfi_endproc
 5214              	.LFE56:
 5216              		.section	.text.ulTaskNotifyTake,"ax",%progbits
 5217              		.align	1
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 193


 5218              		.global	ulTaskNotifyTake
 5219              		.syntax unified
 5220              		.thumb
 5221              		.thumb_func
 5222              		.fpu fpv4-sp-d16
 5224              	ulTaskNotifyTake:
 5225              	.LFB57:
4410:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint32_t ulReturn;
 5226              		.loc 1 4410 0
 5227              		.cfi_startproc
 5228              		@ args = 0, pretend = 0, frame = 0
 5229              		@ frame_needed = 0, uses_anonymous_args = 0
 5230              	.LVL463:
 5231 0000 38B5     		push	{r3, r4, r5, lr}
 5232              	.LCFI54:
 5233              		.cfi_def_cfa_offset 16
 5234              		.cfi_offset 3, -16
 5235              		.cfi_offset 4, -12
 5236              		.cfi_offset 5, -8
 5237              		.cfi_offset 14, -4
 5238 0002 0546     		mov	r5, r0
 5239 0004 0C46     		mov	r4, r1
4413:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5240              		.loc 1 4413 0
 5241 0006 FFF7FEFF 		bl	vPortEnterCritical
 5242              	.LVL464:
4416:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5243              		.loc 1 4416 0
 5244 000a 194B     		ldr	r3, .L537
 5245 000c 1B68     		ldr	r3, [r3]
 5246 000e 5B6D     		ldr	r3, [r3, #84]
 5247 0010 2BB9     		cbnz	r3, .L531
4419:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5248              		.loc 1 4419 0
 5249 0012 174B     		ldr	r3, .L537
 5250 0014 1B68     		ldr	r3, [r3]
 5251 0016 0122     		movs	r2, #1
 5252 0018 83F85820 		strb	r2, [r3, #88]
4421:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5253              		.loc 1 4421 0
 5254 001c ACB9     		cbnz	r4, .L535
 5255              	.L531:
4442:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5256              		.loc 1 4442 0
 5257 001e FFF7FEFF 		bl	vPortExitCritical
 5258              	.LVL465:
4444:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5259              		.loc 1 4444 0
 5260 0022 FFF7FEFF 		bl	vPortEnterCritical
 5261              	.LVL466:
4447:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5262              		.loc 1 4447 0
 5263 0026 124B     		ldr	r3, .L537
 5264 0028 1B68     		ldr	r3, [r3]
 5265 002a 5C6D     		ldr	r4, [r3, #84]
 5266              	.LVL467:
4449:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 194


 5267              		.loc 1 4449 0
 5268 002c 24B1     		cbz	r4, .L532
4451:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5269              		.loc 1 4451 0
 5270 002e CDB9     		cbnz	r5, .L536
4457:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5271              		.loc 1 4457 0
 5272 0030 0F4B     		ldr	r3, .L537
 5273 0032 1B68     		ldr	r3, [r3]
 5274 0034 621E     		subs	r2, r4, #1
 5275 0036 5A65     		str	r2, [r3, #84]
 5276              	.L532:
4465:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5277              		.loc 1 4465 0
 5278 0038 0D4B     		ldr	r3, .L537
 5279 003a 1B68     		ldr	r3, [r3]
 5280 003c 0022     		movs	r2, #0
 5281 003e 83F85820 		strb	r2, [r3, #88]
4467:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5282              		.loc 1 4467 0
 5283 0042 FFF7FEFF 		bl	vPortExitCritical
 5284              	.LVL468:
4470:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5285              		.loc 1 4470 0
 5286 0046 2046     		mov	r0, r4
 5287 0048 38BD     		pop	{r3, r4, r5, pc}
 5288              	.LVL469:
 5289              	.L535:
4423:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_TAKE_BLOCK();
 5290              		.loc 1 4423 0
 5291 004a 1146     		mov	r1, r2
 5292 004c 2046     		mov	r0, r4
 5293 004e FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5294              	.LVL470:
4430:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5295              		.loc 1 4430 0
 5296 0052 4FF08052 		mov	r2, #268435456
 5297 0056 074B     		ldr	r3, .L537+4
 5298 0058 1A60     		str	r2, [r3]
 5299              		.syntax unified
 5300              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5301 005a BFF34F8F 		dsb
 5302              	@ 0 "" 2
 5303              	@ 4430 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5304 005e BFF36F8F 		isb
 5305              	@ 0 "" 2
 5306              		.thumb
 5307              		.syntax unified
 5308 0062 DCE7     		b	.L531
 5309              	.LVL471:
 5310              	.L536:
4453:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5311              		.loc 1 4453 0
 5312 0064 024B     		ldr	r3, .L537
 5313 0066 1B68     		ldr	r3, [r3]
 5314 0068 0022     		movs	r2, #0
 5315 006a 5A65     		str	r2, [r3, #84]
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 195


 5316 006c E4E7     		b	.L532
 5317              	.L538:
 5318 006e 00BF     		.align	2
 5319              	.L537:
 5320 0070 00000000 		.word	.LANCHOR10
 5321 0074 04ED00E0 		.word	-536810236
 5322              		.cfi_endproc
 5323              	.LFE57:
 5325              		.section	.text.xTaskNotifyWait,"ax",%progbits
 5326              		.align	1
 5327              		.global	xTaskNotifyWait
 5328              		.syntax unified
 5329              		.thumb
 5330              		.thumb_func
 5331              		.fpu fpv4-sp-d16
 5333              	xTaskNotifyWait:
 5334              	.LFB58:
4478:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	BaseType_t xReturn;
 5335              		.loc 1 4478 0
 5336              		.cfi_startproc
 5337              		@ args = 0, pretend = 0, frame = 0
 5338              		@ frame_needed = 0, uses_anonymous_args = 0
 5339              	.LVL472:
 5340 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5341              	.LCFI55:
 5342              		.cfi_def_cfa_offset 24
 5343              		.cfi_offset 3, -24
 5344              		.cfi_offset 4, -20
 5345              		.cfi_offset 5, -16
 5346              		.cfi_offset 6, -12
 5347              		.cfi_offset 7, -8
 5348              		.cfi_offset 14, -4
 5349 0002 0746     		mov	r7, r0
 5350 0004 0D46     		mov	r5, r1
 5351 0006 1446     		mov	r4, r2
 5352 0008 1E46     		mov	r6, r3
4481:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5353              		.loc 1 4481 0
 5354 000a FFF7FEFF 		bl	vPortEnterCritical
 5355              	.LVL473:
4484:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5356              		.loc 1 4484 0
 5357 000e 204B     		ldr	r3, .L547
 5358 0010 1B68     		ldr	r3, [r3]
 5359 0012 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5360 0016 DBB2     		uxtb	r3, r3
 5361 0018 022B     		cmp	r3, #2
 5362 001a 0AD0     		beq	.L540
4489:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5363              		.loc 1 4489 0
 5364 001c 1C4B     		ldr	r3, .L547
 5365 001e 1A68     		ldr	r2, [r3]
 5366 0020 506D     		ldr	r0, [r2, #84]
 5367 0022 20EA0700 		bic	r0, r0, r7
 5368 0026 5065     		str	r0, [r2, #84]
4492:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5369              		.loc 1 4492 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 196


 5370 0028 1B68     		ldr	r3, [r3]
 5371 002a 0122     		movs	r2, #1
 5372 002c 83F85820 		strb	r2, [r3, #88]
4494:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5373              		.loc 1 4494 0
 5374 0030 CEB9     		cbnz	r6, .L545
 5375              	.L540:
4515:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5376              		.loc 1 4515 0
 5377 0032 FFF7FEFF 		bl	vPortExitCritical
 5378              	.LVL474:
4517:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5379              		.loc 1 4517 0
 5380 0036 FFF7FEFF 		bl	vPortEnterCritical
 5381              	.LVL475:
4521:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5382              		.loc 1 4521 0
 5383 003a 1CB1     		cbz	r4, .L541
4525:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5384              		.loc 1 4525 0
 5385 003c 144B     		ldr	r3, .L547
 5386 003e 1B68     		ldr	r3, [r3]
 5387 0040 5B6D     		ldr	r3, [r3, #84]
 5388 0042 2360     		str	r3, [r4]
 5389              	.L541:
4532:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5390              		.loc 1 4532 0
 5391 0044 124B     		ldr	r3, .L547
 5392 0046 1B68     		ldr	r3, [r3]
 5393 0048 93F85830 		ldrb	r3, [r3, #88]	@ zero_extendqisi2
 5394 004c DBB2     		uxtb	r3, r3
 5395 004e 022B     		cmp	r3, #2
 5396 0050 16D0     		beq	.L546
4535:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5397              		.loc 1 4535 0
 5398 0052 0024     		movs	r4, #0
 5399              	.LVL476:
 5400              	.L542:
4545:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		}
 5401              		.loc 1 4545 0
 5402 0054 0E4B     		ldr	r3, .L547
 5403 0056 1B68     		ldr	r3, [r3]
 5404 0058 0022     		movs	r2, #0
 5405 005a 83F85820 		strb	r2, [r3, #88]
4547:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5406              		.loc 1 4547 0
 5407 005e FFF7FEFF 		bl	vPortExitCritical
 5408              	.LVL477:
4550:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5409              		.loc 1 4550 0
 5410 0062 2046     		mov	r0, r4
 5411 0064 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5412              	.LVL478:
 5413              	.L545:
4496:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					traceTASK_NOTIFY_WAIT_BLOCK();
 5414              		.loc 1 4496 0
 5415 0066 1146     		mov	r1, r2
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 197


 5416 0068 3046     		mov	r0, r6
 5417 006a FFF7FEFF 		bl	prvAddCurrentTaskToDelayedList
 5418              	.LVL479:
4503:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5419              		.loc 1 4503 0
 5420 006e 4FF08052 		mov	r2, #268435456
 5421 0072 084B     		ldr	r3, .L547+4
 5422 0074 1A60     		str	r2, [r3]
 5423              		.syntax unified
 5424              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5425 0076 BFF34F8F 		dsb
 5426              	@ 0 "" 2
 5427              	@ 4503 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5428 007a BFF36F8F 		isb
 5429              	@ 0 "" 2
 5430              		.thumb
 5431              		.syntax unified
 5432 007e D8E7     		b	.L540
 5433              	.L546:
4541:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdTRUE;
 5434              		.loc 1 4541 0
 5435 0080 034B     		ldr	r3, .L547
 5436 0082 1A68     		ldr	r2, [r3]
 5437 0084 536D     		ldr	r3, [r2, #84]
 5438 0086 23EA0505 		bic	r5, r3, r5
 5439              	.LVL480:
 5440 008a 5565     		str	r5, [r2, #84]
 5441              	.LVL481:
4542:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5442              		.loc 1 4542 0
 5443 008c 0124     		movs	r4, #1
 5444              	.LVL482:
 5445 008e E1E7     		b	.L542
 5446              	.L548:
 5447              		.align	2
 5448              	.L547:
 5449 0090 00000000 		.word	.LANCHOR10
 5450 0094 04ED00E0 		.word	-536810236
 5451              		.cfi_endproc
 5452              	.LFE58:
 5454              		.section	.text.xTaskGenericNotify,"ax",%progbits
 5455              		.align	1
 5456              		.global	xTaskGenericNotify
 5457              		.syntax unified
 5458              		.thumb
 5459              		.thumb_func
 5460              		.fpu fpv4-sp-d16
 5462              	xTaskGenericNotify:
 5463              	.LFB59:
4558:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5464              		.loc 1 4558 0
 5465              		.cfi_startproc
 5466              		@ args = 0, pretend = 0, frame = 0
 5467              		@ frame_needed = 0, uses_anonymous_args = 0
 5468              	.LVL483:
 5469 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5470              	.LCFI56:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 198


 5471              		.cfi_def_cfa_offset 24
 5472              		.cfi_offset 3, -24
 5473              		.cfi_offset 4, -20
 5474              		.cfi_offset 5, -16
 5475              		.cfi_offset 6, -12
 5476              		.cfi_offset 7, -8
 5477              		.cfi_offset 14, -4
 5478              	.LVL484:
4563:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		pxTCB = ( TCB_t * ) xTaskToNotify;
 5479              		.loc 1 4563 0
 5480 0002 A8B1     		cbz	r0, .L566
 5481 0004 0446     		mov	r4, r0
 5482 0006 1F46     		mov	r7, r3
 5483 0008 1546     		mov	r5, r2
 5484 000a 0E46     		mov	r6, r1
 5485              	.LVL485:
4566:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 5486              		.loc 1 4566 0
 5487 000c FFF7FEFF 		bl	vPortEnterCritical
 5488              	.LVL486:
4568:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5489              		.loc 1 4568 0
 5490 0010 0FB1     		cbz	r7, .L552
4570:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5491              		.loc 1 4570 0
 5492 0012 636D     		ldr	r3, [r4, #84]
 5493 0014 3B60     		str	r3, [r7]
 5494              	.L552:
4573:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5495              		.loc 1 4573 0
 5496 0016 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5497 001a DBB2     		uxtb	r3, r3
 5498              	.LVL487:
4575:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5499              		.loc 1 4575 0
 5500 001c 0222     		movs	r2, #2
 5501 001e 84F85820 		strb	r2, [r4, #88]
4577:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5502              		.loc 1 4577 0
 5503 0022 6A1E     		subs	r2, r5, #1
 5504 0024 032A     		cmp	r2, #3
 5505 0026 3DD8     		bhi	.L563
 5506 0028 DFE802F0 		tbb	[pc, r2]
 5507              	.L555:
 5508 002c 0B       		.byte	(.L554-.L555)/2
 5509 002d 2F       		.byte	(.L556-.L555)/2
 5510 002e 34       		.byte	(.L557-.L555)/2
 5511 002f 37       		.byte	(.L558-.L555)/2
 5512              	.LVL488:
 5513              		.p2align 1
 5514              	.L566:
 5515              	.LBB221:
 5516              	.LBB222:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5517              		.loc 2 195 0
 5518              		.syntax unified
 5519              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 199


 5520 0030 4FF05003 			mov r3, #80												
 5521 0034 83F31188 		msr basepri, r3											
 5522 0038 BFF36F8F 		isb														
 5523 003c BFF34F8F 		dsb														
 5524              	
 5525              	@ 0 "" 2
 5526              	.LVL489:
 5527              		.thumb
 5528              		.syntax unified
 5529              	.L551:
 5530 0040 FEE7     		b	.L551
 5531              	.LVL490:
 5532              	.L554:
 5533              	.LBE222:
 5534              	.LBE221:
4580:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5535              		.loc 1 4580 0
 5536 0042 626D     		ldr	r2, [r4, #84]
 5537 0044 1643     		orrs	r6, r6, r2
 5538              	.LVL491:
 5539 0046 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5540              		.loc 1 4560 0
 5541 0048 0125     		movs	r5, #1
 5542              	.L553:
 5543              	.LVL492:
4613:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5544              		.loc 1 4613 0
 5545 004a 012B     		cmp	r3, #1
 5546 004c 3CD1     		bne	.L559
4615:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				prvAddTaskToReadyList( pxTCB );
 5547              		.loc 1 4615 0
 5548 004e 261D     		adds	r6, r4, #4
 5549 0050 3046     		mov	r0, r6
 5550 0052 FFF7FEFF 		bl	uxListRemove
 5551              	.LVL493:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5552              		.loc 1 4616 0
 5553 0056 E36A     		ldr	r3, [r4, #44]
 5554 0058 1D4A     		ldr	r2, .L567
 5555 005a 1268     		ldr	r2, [r2]
 5556 005c 9342     		cmp	r3, r2
 5557 005e 01D9     		bls	.L560
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5558              		.loc 1 4616 0 is_stmt 0 discriminator 1
 5559 0060 1B4A     		ldr	r2, .L567
 5560 0062 1360     		str	r3, [r2]
 5561              	.L560:
4616:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5562              		.loc 1 4616 0 discriminator 3
 5563 0064 03EB8303 		add	r3, r3, r3, lsl #2
 5564 0068 9A00     		lsls	r2, r3, #2
 5565 006a 3146     		mov	r1, r6
 5566 006c 1948     		ldr	r0, .L567+4
 5567 006e 1044     		add	r0, r0, r2
 5568 0070 FFF7FEFF 		bl	vListInsertEnd
 5569              	.LVL494:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 200


4619:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5570              		.loc 1 4619 0 is_stmt 1 discriminator 3
 5571 0074 A36A     		ldr	r3, [r4, #40]
 5572 0076 CBB1     		cbz	r3, .L561
 5573              	.LBB223:
 5574              	.LBB224:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5575              		.loc 2 195 0
 5576              		.syntax unified
 5577              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5578 0078 4FF05003 			mov r3, #80												
 5579 007c 83F31188 		msr basepri, r3											
 5580 0080 BFF36F8F 		isb														
 5581 0084 BFF34F8F 		dsb														
 5582              	
 5583              	@ 0 "" 2
 5584              	.LVL495:
 5585              		.thumb
 5586              		.syntax unified
 5587              	.L562:
 5588 0088 FEE7     		b	.L562
 5589              	.LVL496:
 5590              	.L556:
 5591              	.LBE224:
 5592              	.LBE223:
4584:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5593              		.loc 1 4584 0
 5594 008a 626D     		ldr	r2, [r4, #84]
 5595 008c 0132     		adds	r2, r2, #1
 5596 008e 6265     		str	r2, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5597              		.loc 1 4560 0
 5598 0090 0125     		movs	r5, #1
4585:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5599              		.loc 1 4585 0
 5600 0092 DAE7     		b	.L553
 5601              	.L557:
4588:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5602              		.loc 1 4588 0
 5603 0094 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5604              		.loc 1 4560 0
 5605 0096 0125     		movs	r5, #1
4589:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5606              		.loc 1 4589 0
 5607 0098 D7E7     		b	.L553
 5608              	.L558:
4592:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5609              		.loc 1 4592 0
 5610 009a 022B     		cmp	r3, #2
 5611 009c 04D0     		beq	.L564
4594:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5612              		.loc 1 4594 0
 5613 009e 6665     		str	r6, [r4, #84]
4560:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	uint8_t ucOriginalNotifyState;
 5614              		.loc 1 4560 0
 5615 00a0 0125     		movs	r5, #1
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 201


 5616 00a2 D2E7     		b	.L553
 5617              	.L563:
 5618 00a4 0125     		movs	r5, #1
 5619 00a6 D0E7     		b	.L553
 5620              	.L564:
4599:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5621              		.loc 1 4599 0
 5622 00a8 0025     		movs	r5, #0
 5623 00aa CEE7     		b	.L553
 5624              	.LVL497:
 5625              	.L561:
4637:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5626              		.loc 1 4637 0
 5627 00ac E26A     		ldr	r2, [r4, #44]
 5628 00ae 0A4B     		ldr	r3, .L567+8
 5629 00b0 1B68     		ldr	r3, [r3]
 5630 00b2 DB6A     		ldr	r3, [r3, #44]
 5631 00b4 9A42     		cmp	r2, r3
 5632 00b6 07D9     		bls	.L559
4641:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5633              		.loc 1 4641 0
 5634 00b8 4FF08052 		mov	r2, #268435456
 5635 00bc 074B     		ldr	r3, .L567+12
 5636 00be 1A60     		str	r2, [r3]
 5637              		.syntax unified
 5638              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5639 00c0 BFF34F8F 		dsb
 5640              	@ 0 "" 2
 5641              	@ 4641 "Middlewares/Third_Party/FreeRTOS/Source/tasks.c" 1
 5642 00c4 BFF36F8F 		isb
 5643              	@ 0 "" 2
 5644              		.thumb
 5645              		.syntax unified
 5646              	.L559:
4653:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5647              		.loc 1 4653 0
 5648 00c8 FFF7FEFF 		bl	vPortExitCritical
 5649              	.LVL498:
4656:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5650              		.loc 1 4656 0
 5651 00cc 2846     		mov	r0, r5
 5652 00ce F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5653              	.LVL499:
 5654              	.L568:
 5655              		.align	2
 5656              	.L567:
 5657 00d0 00000000 		.word	.LANCHOR13
 5658 00d4 00000000 		.word	.LANCHOR4
 5659 00d8 00000000 		.word	.LANCHOR10
 5660 00dc 04ED00E0 		.word	-536810236
 5661              		.cfi_endproc
 5662              	.LFE59:
 5664              		.section	.text.xTaskGenericNotifyFromISR,"ax",%progbits
 5665              		.align	1
 5666              		.global	xTaskGenericNotifyFromISR
 5667              		.syntax unified
 5668              		.thumb
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 202


 5669              		.thumb_func
 5670              		.fpu fpv4-sp-d16
 5672              	xTaskGenericNotifyFromISR:
 5673              	.LFB60:
4664:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5674              		.loc 1 4664 0
 5675              		.cfi_startproc
 5676              		@ args = 4, pretend = 0, frame = 0
 5677              		@ frame_needed = 0, uses_anonymous_args = 0
 5678              	.LVL500:
 5679 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5680              	.LCFI57:
 5681              		.cfi_def_cfa_offset 32
 5682              		.cfi_offset 3, -32
 5683              		.cfi_offset 4, -28
 5684              		.cfi_offset 5, -24
 5685              		.cfi_offset 6, -20
 5686              		.cfi_offset 7, -16
 5687              		.cfi_offset 8, -12
 5688              		.cfi_offset 9, -8
 5689              		.cfi_offset 14, -4
 5690 0004 089E     		ldr	r6, [sp, #32]
 5691              	.LVL501:
4670:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5692              		.loc 1 4670 0
 5693 0006 10B3     		cbz	r0, .L589
 5694 0008 0446     		mov	r4, r0
 5695 000a 9946     		mov	r9, r3
 5696 000c 1546     		mov	r5, r2
 5697 000e 8846     		mov	r8, r1
4688:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5698              		.loc 1 4688 0
 5699 0010 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5700              	.LVL502:
 5701              	.LBB225:
 5702              	.LBB226:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5703              		.loc 2 211 0
 5704              		.syntax unified
 5705              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5706 0014 EFF31187 			mrs r7, basepri											
 5707 0018 4FF05003 		mov r3, #80												
 5708 001c 83F31188 		msr basepri, r3											
 5709 0020 BFF36F8F 		isb														
 5710 0024 BFF34F8F 		dsb														
 5711              	
 5712              	@ 0 "" 2
 5713              		.thumb
 5714              		.syntax unified
 5715              	.LBE226:
 5716              	.LBE225:
4694:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5717              		.loc 1 4694 0
 5718 0028 B9F1000F 		cmp	r9, #0
 5719 002c 02D0     		beq	.L572
4696:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 5720              		.loc 1 4696 0
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 203


 5721 002e 636D     		ldr	r3, [r4, #84]
 5722 0030 C9F80030 		str	r3, [r9]
 5723              	.L572:
4699:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5724              		.loc 1 4699 0
 5725 0034 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5726 0038 DBB2     		uxtb	r3, r3
 5727              	.LVL503:
4700:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5728              		.loc 1 4700 0
 5729 003a 0222     		movs	r2, #2
 5730 003c 84F85820 		strb	r2, [r4, #88]
4702:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5731              		.loc 1 4702 0
 5732 0040 6A1E     		subs	r2, r5, #1
 5733 0042 032A     		cmp	r2, #3
 5734 0044 2DD8     		bhi	.L586
 5735 0046 DFE802F0 		tbb	[pc, r2]
 5736              	.L575:
 5737 004a 0B       		.byte	(.L574-.L575)/2
 5738 004b 1D       		.byte	(.L576-.L575)/2
 5739 004c 22       		.byte	(.L577-.L575)/2
 5740 004d 26       		.byte	(.L578-.L575)/2
 5741              	.LVL504:
 5742              		.p2align 1
 5743              	.L589:
 5744              	.LBB227:
 5745              	.LBB228:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5746              		.loc 2 195 0
 5747              		.syntax unified
 5748              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5749 004e 4FF05003 			mov r3, #80												
 5750 0052 83F31188 		msr basepri, r3											
 5751 0056 BFF36F8F 		isb														
 5752 005a BFF34F8F 		dsb														
 5753              	
 5754              	@ 0 "" 2
 5755              	.LVL505:
 5756              		.thumb
 5757              		.syntax unified
 5758              	.L571:
 5759 005e FEE7     		b	.L571
 5760              	.LVL506:
 5761              	.L574:
 5762              	.LBE228:
 5763              	.LBE227:
4705:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5764              		.loc 1 4705 0
 5765 0060 626D     		ldr	r2, [r4, #84]
 5766 0062 42EA0802 		orr	r2, r2, r8
 5767 0066 6265     		str	r2, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5768              		.loc 1 4667 0
 5769 0068 0125     		movs	r5, #1
 5770              	.L573:
 5771              	.LVL507:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 204


4738:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5772              		.loc 1 4738 0
 5773 006a 012B     		cmp	r3, #1
 5774 006c 3DD1     		bne	.L579
4741:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5775              		.loc 1 4741 0
 5776 006e A36A     		ldr	r3, [r4, #40]
 5777              	.LVL508:
 5778 0070 DBB1     		cbz	r3, .L580
 5779              	.LBB229:
 5780              	.LBB230:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5781              		.loc 2 195 0
 5782              		.syntax unified
 5783              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5784 0072 4FF05003 			mov r3, #80												
 5785 0076 83F31188 		msr basepri, r3											
 5786 007a BFF36F8F 		isb														
 5787 007e BFF34F8F 		dsb														
 5788              	
 5789              	@ 0 "" 2
 5790              	.LVL509:
 5791              		.thumb
 5792              		.syntax unified
 5793              	.L581:
 5794 0082 FEE7     		b	.L581
 5795              	.LVL510:
 5796              	.L576:
 5797              	.LBE230:
 5798              	.LBE229:
4709:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5799              		.loc 1 4709 0
 5800 0084 626D     		ldr	r2, [r4, #84]
 5801 0086 0132     		adds	r2, r2, #1
 5802 0088 6265     		str	r2, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5803              		.loc 1 4667 0
 5804 008a 0125     		movs	r5, #1
4710:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5805              		.loc 1 4710 0
 5806 008c EDE7     		b	.L573
 5807              	.L577:
4713:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					break;
 5808              		.loc 1 4713 0
 5809 008e C4F85480 		str	r8, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5810              		.loc 1 4667 0
 5811 0092 0125     		movs	r5, #1
4714:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5812              		.loc 1 4714 0
 5813 0094 E9E7     		b	.L573
 5814              	.L578:
4717:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5815              		.loc 1 4717 0
 5816 0096 022B     		cmp	r3, #2
 5817 0098 05D0     		beq	.L587
4719:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 205


 5818              		.loc 1 4719 0
 5819 009a C4F85480 		str	r8, [r4, #84]
4667:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	UBaseType_t uxSavedInterruptStatus;
 5820              		.loc 1 4667 0
 5821 009e 0125     		movs	r5, #1
 5822 00a0 E3E7     		b	.L573
 5823              	.L586:
 5824 00a2 0125     		movs	r5, #1
 5825 00a4 E1E7     		b	.L573
 5826              	.L587:
4724:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5827              		.loc 1 4724 0
 5828 00a6 0025     		movs	r5, #0
 5829 00a8 DFE7     		b	.L573
 5830              	.LVL511:
 5831              	.L580:
4743:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5832              		.loc 1 4743 0
 5833 00aa 174B     		ldr	r3, .L590
 5834 00ac 1B68     		ldr	r3, [r3]
 5835 00ae 0BBB     		cbnz	r3, .L582
4745:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 5836              		.loc 1 4745 0
 5837 00b0 04F10408 		add	r8, r4, #4
 5838              	.LVL512:
 5839 00b4 4046     		mov	r0, r8
 5840 00b6 FFF7FEFF 		bl	uxListRemove
 5841              	.LVL513:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5842              		.loc 1 4746 0
 5843 00ba E36A     		ldr	r3, [r4, #44]
 5844 00bc 134A     		ldr	r2, .L590+4
 5845 00be 1268     		ldr	r2, [r2]
 5846 00c0 9342     		cmp	r3, r2
 5847 00c2 01D9     		bls	.L583
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5848              		.loc 1 4746 0 is_stmt 0 discriminator 1
 5849 00c4 114A     		ldr	r2, .L590+4
 5850 00c6 1360     		str	r3, [r2]
 5851              	.L583:
4746:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5852              		.loc 1 4746 0 discriminator 3
 5853 00c8 03EB8303 		add	r3, r3, r3, lsl #2
 5854 00cc 9A00     		lsls	r2, r3, #2
 5855 00ce 4146     		mov	r1, r8
 5856 00d0 0F48     		ldr	r0, .L590+8
 5857 00d2 1044     		add	r0, r0, r2
 5858 00d4 FFF7FEFF 		bl	vListInsertEnd
 5859              	.LVL514:
 5860              	.L584:
4755:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 5861              		.loc 1 4755 0 is_stmt 1
 5862 00d8 E26A     		ldr	r2, [r4, #44]
 5863 00da 0E4B     		ldr	r3, .L590+12
 5864 00dc 1B68     		ldr	r3, [r3]
 5865 00de DB6A     		ldr	r3, [r3, #44]
 5866 00e0 9A42     		cmp	r2, r3
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 206


 5867 00e2 02D9     		bls	.L579
4759:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 5868              		.loc 1 4759 0
 5869 00e4 66B1     		cbz	r6, .L585
4761:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5870              		.loc 1 4761 0
 5871 00e6 0123     		movs	r3, #1
 5872 00e8 3360     		str	r3, [r6]
 5873              	.L579:
 5874              	.LVL515:
 5875              	.LBB231:
 5876              	.LBB232:
 5877              		.loc 2 229 0
 5878              		.syntax unified
 5879              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5880 00ea 87F31188 			msr basepri, r7	
 5881              	@ 0 "" 2
 5882              	.LVL516:
 5883              		.thumb
 5884              		.syntax unified
 5885              	.LBE232:
 5886              	.LBE231:
4780:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5887              		.loc 1 4780 0
 5888 00ee 2846     		mov	r0, r5
 5889 00f0 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 5890              	.LVL517:
 5891              	.L582:
4752:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 5892              		.loc 1 4752 0
 5893 00f4 04F11801 		add	r1, r4, #24
 5894 00f8 0748     		ldr	r0, .L590+16
 5895 00fa FFF7FEFF 		bl	vListInsertEnd
 5896              	.LVL518:
 5897 00fe EBE7     		b	.L584
 5898              	.LVL519:
 5899              	.L585:
4768:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 5900              		.loc 1 4768 0
 5901 0100 0122     		movs	r2, #1
 5902 0102 064B     		ldr	r3, .L590+20
 5903 0104 1A60     		str	r2, [r3]
 5904 0106 F0E7     		b	.L579
 5905              	.L591:
 5906              		.align	2
 5907              	.L590:
 5908 0108 00000000 		.word	.LANCHOR16
 5909 010c 00000000 		.word	.LANCHOR13
 5910 0110 00000000 		.word	.LANCHOR4
 5911 0114 00000000 		.word	.LANCHOR10
 5912 0118 00000000 		.word	.LANCHOR1
 5913 011c 00000000 		.word	.LANCHOR19
 5914              		.cfi_endproc
 5915              	.LFE60:
 5917              		.section	.text.vTaskNotifyGiveFromISR,"ax",%progbits
 5918              		.align	1
 5919              		.global	vTaskNotifyGiveFromISR
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 207


 5920              		.syntax unified
 5921              		.thumb
 5922              		.thumb_func
 5923              		.fpu fpv4-sp-d16
 5925              	vTaskNotifyGiveFromISR:
 5926              	.LFB61:
4788:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t * pxTCB;
 5927              		.loc 1 4788 0
 5928              		.cfi_startproc
 5929              		@ args = 0, pretend = 0, frame = 0
 5930              		@ frame_needed = 0, uses_anonymous_args = 0
 5931              	.LVL520:
 5932 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5933              	.LCFI58:
 5934              		.cfi_def_cfa_offset 24
 5935              		.cfi_offset 3, -24
 5936              		.cfi_offset 4, -20
 5937              		.cfi_offset 5, -16
 5938              		.cfi_offset 6, -12
 5939              		.cfi_offset 7, -8
 5940              		.cfi_offset 14, -4
4793:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5941              		.loc 1 4793 0
 5942 0002 18B3     		cbz	r0, .L603
 5943 0004 0446     		mov	r4, r0
 5944 0006 0D46     		mov	r5, r1
4811:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5945              		.loc 1 4811 0
 5946 0008 FFF7FEFF 		bl	vPortValidateInterruptPriority
 5947              	.LVL521:
 5948              	.LBB233:
 5949              	.LBB234:
 211:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5950              		.loc 2 211 0
 5951              		.syntax unified
 5952              	@ 211 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5953 000c EFF31186 			mrs r6, basepri											
 5954 0010 4FF05003 		mov r3, #80												
 5955 0014 83F31188 		msr basepri, r3											
 5956 0018 BFF36F8F 		isb														
 5957 001c BFF34F8F 		dsb														
 5958              	
 5959              	@ 0 "" 2
 5960              		.thumb
 5961              		.syntax unified
 5962              	.LBE234:
 5963              	.LBE233:
4817:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 5964              		.loc 1 4817 0
 5965 0020 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 5966 0024 DBB2     		uxtb	r3, r3
 5967              	.LVL522:
4818:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5968              		.loc 1 4818 0
 5969 0026 0222     		movs	r2, #2
 5970 0028 84F85820 		strb	r2, [r4, #88]
4822:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 208


 5971              		.loc 1 4822 0
 5972 002c 626D     		ldr	r2, [r4, #84]
 5973 002e 0132     		adds	r2, r2, #1
 5974 0030 6265     		str	r2, [r4, #84]
4828:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 5975              		.loc 1 4828 0
 5976 0032 012B     		cmp	r3, #1
 5977 0034 32D1     		bne	.L595
4831:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 5978              		.loc 1 4831 0
 5979 0036 A36A     		ldr	r3, [r4, #40]
 5980              	.LVL523:
 5981 0038 8BB1     		cbz	r3, .L596
 5982              	.LBB235:
 5983              	.LBB236:
 195:Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h **** 	(
 5984              		.loc 2 195 0
 5985              		.syntax unified
 5986              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 5987 003a 4FF05003 			mov r3, #80												
 5988 003e 83F31188 		msr basepri, r3											
 5989 0042 BFF36F8F 		isb														
 5990 0046 BFF34F8F 		dsb														
 5991              	
 5992              	@ 0 "" 2
 5993              	.LVL524:
 5994              		.thumb
 5995              		.syntax unified
 5996              	.L597:
 5997 004a FEE7     		b	.L597
 5998              	.LVL525:
 5999              	.L603:
 6000              	.LBE236:
 6001              	.LBE235:
 6002              	.LBB237:
 6003              	.LBB238:
 6004              		.syntax unified
 6005              	@ 195 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6006 004c 4FF05003 			mov r3, #80												
 6007 0050 83F31188 		msr basepri, r3											
 6008 0054 BFF36F8F 		isb														
 6009 0058 BFF34F8F 		dsb														
 6010              	
 6011              	@ 0 "" 2
 6012              	.LVL526:
 6013              		.thumb
 6014              		.syntax unified
 6015              	.L594:
 6016 005c FEE7     		b	.L594
 6017              	.LVL527:
 6018              	.L596:
 6019              	.LBE238:
 6020              	.LBE237:
4833:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6021              		.loc 1 4833 0
 6022 005e 164B     		ldr	r3, .L604
 6023 0060 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 209


 6024 0062 F3B9     		cbnz	r3, .L598
4835:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					prvAddTaskToReadyList( pxTCB );
 6025              		.loc 1 4835 0
 6026 0064 271D     		adds	r7, r4, #4
 6027 0066 3846     		mov	r0, r7
 6028 0068 FFF7FEFF 		bl	uxListRemove
 6029              	.LVL528:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6030              		.loc 1 4836 0
 6031 006c E36A     		ldr	r3, [r4, #44]
 6032 006e 134A     		ldr	r2, .L604+4
 6033 0070 1268     		ldr	r2, [r2]
 6034 0072 9342     		cmp	r3, r2
 6035 0074 01D9     		bls	.L599
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6036              		.loc 1 4836 0 is_stmt 0 discriminator 1
 6037 0076 114A     		ldr	r2, .L604+4
 6038 0078 1360     		str	r3, [r2]
 6039              	.L599:
4836:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6040              		.loc 1 4836 0 discriminator 3
 6041 007a 03EB8303 		add	r3, r3, r3, lsl #2
 6042 007e 9A00     		lsls	r2, r3, #2
 6043 0080 3946     		mov	r1, r7
 6044 0082 0F48     		ldr	r0, .L604+8
 6045 0084 1044     		add	r0, r0, r2
 6046 0086 FFF7FEFF 		bl	vListInsertEnd
 6047              	.LVL529:
 6048              	.L600:
4845:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				{
 6049              		.loc 1 4845 0 is_stmt 1
 6050 008a E26A     		ldr	r2, [r4, #44]
 6051 008c 0D4B     		ldr	r3, .L604+12
 6052 008e 1B68     		ldr	r3, [r3]
 6053 0090 DB6A     		ldr	r3, [r3, #44]
 6054 0092 9A42     		cmp	r2, r3
 6055 0094 02D9     		bls	.L595
4849:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					{
 6056              		.loc 1 4849 0
 6057 0096 55B1     		cbz	r5, .L601
4851:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6058              		.loc 1 4851 0
 6059 0098 0123     		movs	r3, #1
 6060 009a 2B60     		str	r3, [r5]
 6061              	.L595:
 6062              	.LVL530:
 6063              	.LBB239:
 6064              	.LBB240:
 6065              		.loc 2 229 0
 6066              		.syntax unified
 6067              	@ 229 "Middlewares/Third_Party/FreeRTOS/Source/portable/GCC/ARM_CM4F/portmacro.h" 1
 6068 009c 86F31188 			msr basepri, r6	
 6069              	@ 0 "" 2
 6070              	.LVL531:
 6071              		.thumb
 6072              		.syntax unified
 6073 00a0 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 210


 6074              	.LVL532:
 6075              	.L598:
 6076              	.LBE240:
 6077              	.LBE239:
4842:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				}
 6078              		.loc 1 4842 0
 6079 00a2 04F11801 		add	r1, r4, #24
 6080 00a6 0848     		ldr	r0, .L604+16
 6081 00a8 FFF7FEFF 		bl	vListInsertEnd
 6082              	.LVL533:
 6083 00ac EDE7     		b	.L600
 6084              	.L601:
4858:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 					}
 6085              		.loc 1 4858 0
 6086 00ae 0122     		movs	r2, #1
 6087 00b0 064B     		ldr	r3, .L604+20
 6088 00b2 1A60     		str	r2, [r3]
 6089 00b4 F2E7     		b	.L595
 6090              	.L605:
 6091 00b6 00BF     		.align	2
 6092              	.L604:
 6093 00b8 00000000 		.word	.LANCHOR16
 6094 00bc 00000000 		.word	.LANCHOR13
 6095 00c0 00000000 		.word	.LANCHOR4
 6096 00c4 00000000 		.word	.LANCHOR10
 6097 00c8 00000000 		.word	.LANCHOR1
 6098 00cc 00000000 		.word	.LANCHOR19
 6099              		.cfi_endproc
 6100              	.LFE61:
 6102              		.section	.text.xTaskNotifyStateClear,"ax",%progbits
 6103              		.align	1
 6104              		.global	xTaskNotifyStateClear
 6105              		.syntax unified
 6106              		.thumb
 6107              		.thumb_func
 6108              		.fpu fpv4-sp-d16
 6110              	xTaskNotifyStateClear:
 6111              	.LFB62:
4877:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 	TCB_t *pxTCB;
 6112              		.loc 1 4877 0
 6113              		.cfi_startproc
 6114              		@ args = 0, pretend = 0, frame = 0
 6115              		@ frame_needed = 0, uses_anonymous_args = 0
 6116              	.LVL534:
 6117 0000 10B5     		push	{r4, lr}
 6118              	.LCFI59:
 6119              		.cfi_def_cfa_offset 8
 6120              		.cfi_offset 4, -8
 6121              		.cfi_offset 14, -4
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6122              		.loc 1 4883 0
 6123 0002 0446     		mov	r4, r0
 6124 0004 58B1     		cbz	r0, .L612
 6125              	.L607:
 6126              	.LVL535:
4885:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 		{
 6127              		.loc 1 4885 0 discriminator 4
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 211


 6128 0006 FFF7FEFF 		bl	vPortEnterCritical
 6129              	.LVL536:
4887:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			{
 6130              		.loc 1 4887 0 discriminator 4
 6131 000a 94F85830 		ldrb	r3, [r4, #88]	@ zero_extendqisi2
 6132 000e DBB2     		uxtb	r3, r3
 6133 0010 022B     		cmp	r3, #2
 6134 0012 07D0     		beq	.L613
4894:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6135              		.loc 1 4894 0
 6136 0014 0024     		movs	r4, #0
 6137              	.LVL537:
 6138              	.L608:
4897:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6139              		.loc 1 4897 0
 6140 0016 FFF7FEFF 		bl	vPortExitCritical
 6141              	.LVL538:
4900:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6142              		.loc 1 4900 0
 6143 001a 2046     		mov	r0, r4
 6144 001c 10BD     		pop	{r4, pc}
 6145              	.LVL539:
 6146              	.L612:
4883:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 
 6147              		.loc 1 4883 0 discriminator 1
 6148 001e 044B     		ldr	r3, .L614
 6149 0020 1C68     		ldr	r4, [r3]
 6150 0022 F0E7     		b	.L607
 6151              	.LVL540:
 6152              	.L613:
4889:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 				xReturn = pdPASS;
 6153              		.loc 1 4889 0
 6154 0024 0023     		movs	r3, #0
 6155 0026 84F85830 		strb	r3, [r4, #88]
 6156              	.LVL541:
4890:Middlewares/Third_Party/FreeRTOS/Source/tasks.c **** 			}
 6157              		.loc 1 4890 0
 6158 002a 0124     		movs	r4, #1
 6159              	.LVL542:
 6160 002c F3E7     		b	.L608
 6161              	.L615:
 6162 002e 00BF     		.align	2
 6163              	.L614:
 6164 0030 00000000 		.word	.LANCHOR10
 6165              		.cfi_endproc
 6166              	.LFE62:
 6168              		.global	pxCurrentTCB
 6169              		.section	.bss.pxCurrentTCB,"aw",%nobits
 6170              		.align	2
 6171              		.set	.LANCHOR10,. + 0
 6174              	pxCurrentTCB:
 6175 0000 00000000 		.space	4
 6176              		.section	.bss.pxDelayedTaskList,"aw",%nobits
 6177              		.align	2
 6178              		.set	.LANCHOR2,. + 0
 6181              	pxDelayedTaskList:
 6182 0000 00000000 		.space	4
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 212


 6183              		.section	.bss.pxOverflowDelayedTaskList,"aw",%nobits
 6184              		.align	2
 6185              		.set	.LANCHOR8,. + 0
 6188              	pxOverflowDelayedTaskList:
 6189 0000 00000000 		.space	4
 6190              		.section	.bss.pxReadyTasksLists,"aw",%nobits
 6191              		.align	2
 6192              		.set	.LANCHOR4,. + 0
 6195              	pxReadyTasksLists:
 6196 0000 00000000 		.space	1120
 6196      00000000 
 6196      00000000 
 6196      00000000 
 6196      00000000 
 6197              		.section	.bss.uxCurrentNumberOfTasks,"aw",%nobits
 6198              		.align	2
 6199              		.set	.LANCHOR9,. + 0
 6202              	uxCurrentNumberOfTasks:
 6203 0000 00000000 		.space	4
 6204              		.section	.bss.uxDeletedTasksWaitingCleanUp,"aw",%nobits
 6205              		.align	2
 6206              		.set	.LANCHOR14,. + 0
 6209              	uxDeletedTasksWaitingCleanUp:
 6210 0000 00000000 		.space	4
 6211              		.section	.bss.uxPendedTicks,"aw",%nobits
 6212              		.align	2
 6213              		.set	.LANCHOR18,. + 0
 6216              	uxPendedTicks:
 6217 0000 00000000 		.space	4
 6218              		.section	.bss.uxSchedulerSuspended,"aw",%nobits
 6219              		.align	2
 6220              		.set	.LANCHOR16,. + 0
 6223              	uxSchedulerSuspended:
 6224 0000 00000000 		.space	4
 6225              		.section	.bss.uxTaskNumber,"aw",%nobits
 6226              		.align	2
 6227              		.set	.LANCHOR12,. + 0
 6230              	uxTaskNumber:
 6231 0000 00000000 		.space	4
 6232              		.section	.bss.uxTopReadyPriority,"aw",%nobits
 6233              		.align	2
 6234              		.set	.LANCHOR13,. + 0
 6237              	uxTopReadyPriority:
 6238 0000 00000000 		.space	4
 6239              		.section	.bss.xDelayedTaskList1,"aw",%nobits
 6240              		.align	2
 6241              		.set	.LANCHOR5,. + 0
 6244              	xDelayedTaskList1:
 6245 0000 00000000 		.space	20
 6245      00000000 
 6245      00000000 
 6245      00000000 
 6245      00000000 
 6246              		.section	.bss.xDelayedTaskList2,"aw",%nobits
 6247              		.align	2
 6248              		.set	.LANCHOR6,. + 0
 6251              	xDelayedTaskList2:
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 213


 6252 0000 00000000 		.space	20
 6252      00000000 
 6252      00000000 
 6252      00000000 
 6252      00000000 
 6253              		.section	.bss.xNextTaskUnblockTime,"aw",%nobits
 6254              		.align	2
 6255              		.set	.LANCHOR3,. + 0
 6258              	xNextTaskUnblockTime:
 6259 0000 00000000 		.space	4
 6260              		.section	.bss.xNumOfOverflows,"aw",%nobits
 6261              		.align	2
 6262              		.set	.LANCHOR17,. + 0
 6265              	xNumOfOverflows:
 6266 0000 00000000 		.space	4
 6267              		.section	.bss.xPendingReadyList,"aw",%nobits
 6268              		.align	2
 6269              		.set	.LANCHOR1,. + 0
 6272              	xPendingReadyList:
 6273 0000 00000000 		.space	20
 6273      00000000 
 6273      00000000 
 6273      00000000 
 6273      00000000 
 6274              		.section	.bss.xSchedulerRunning,"aw",%nobits
 6275              		.align	2
 6276              		.set	.LANCHOR11,. + 0
 6279              	xSchedulerRunning:
 6280 0000 00000000 		.space	4
 6281              		.section	.bss.xSuspendedTaskList,"aw",%nobits
 6282              		.align	2
 6283              		.set	.LANCHOR0,. + 0
 6286              	xSuspendedTaskList:
 6287 0000 00000000 		.space	20
 6287      00000000 
 6287      00000000 
 6287      00000000 
 6287      00000000 
 6288              		.section	.bss.xTasksWaitingTermination,"aw",%nobits
 6289              		.align	2
 6290              		.set	.LANCHOR7,. + 0
 6293              	xTasksWaitingTermination:
 6294 0000 00000000 		.space	20
 6294      00000000 
 6294      00000000 
 6294      00000000 
 6294      00000000 
 6295              		.section	.bss.xTickCount,"aw",%nobits
 6296              		.align	2
 6297              		.set	.LANCHOR15,. + 0
 6300              	xTickCount:
 6301 0000 00000000 		.space	4
 6302              		.section	.bss.xYieldPending,"aw",%nobits
 6303              		.align	2
 6304              		.set	.LANCHOR19,. + 0
 6307              	xYieldPending:
 6308 0000 00000000 		.space	4
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 214


 6309              		.section	.rodata.vTaskStartScheduler.str1.4,"aMS",%progbits,1
 6310              		.align	2
 6311              	.LC0:
 6312 0000 49444C45 		.ascii	"IDLE\000"
 6312      00
 6313              		.text
 6314              	.Letext0:
 6315              		.file 3 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\lib\\gcc\\arm-none-eab
 6316              		.file 4 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 6317              		.file 5 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 6318              		.file 6 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 6319              		.file 7 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 6320              		.file 8 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 6321              		.file 9 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\include
 6322              		.file 10 "Inc/FreeRTOSConfig.h"
 6323              		.file 11 "Middlewares/Third_Party/FreeRTOS/Source/include/projdefs.h"
 6324              		.file 12 "Middlewares/Third_Party/FreeRTOS/Source/include/FreeRTOS.h"
 6325              		.file 13 "Middlewares/Third_Party/FreeRTOS/Source/include/list.h"
 6326              		.file 14 "Middlewares/Third_Party/FreeRTOS/Source/include/task.h"
 6327              		.file 15 "Middlewares/Third_Party/FreeRTOS/Source/include/portable.h"
 6328              		.file 16 "Middlewares/Third_Party/FreeRTOS/Source/include/timers.h"
 6329              		.file 17 "c:\\program files (x86)\\gnu tools arm embedded\\6 2017-q2-update\\arm-none-eabi\\includ
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 215


DEFINED SYMBOLS
                            *ABS*:00000000 tasks.c
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:18     .text.prvTaskIsTaskSuspended:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:24     .text.prvTaskIsTaskSuspended:00000000 prvTaskIsTaskSuspended
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:104    .text.prvTaskIsTaskSuspended:00000044 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:110    .text.prvTaskCheckFreeStackSpace:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:116    .text.prvTaskCheckFreeStackSpace:00000000 prvTaskCheckFreeStackSpace
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:150    .text.prvResetNextTaskUnblockTime:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:156    .text.prvResetNextTaskUnblockTime:00000000 prvResetNextTaskUnblockTime
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:197    .text.prvResetNextTaskUnblockTime:0000002c $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:203    .text.prvInitialiseNewTask:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:209    .text.prvInitialiseNewTask:00000000 prvInitialiseNewTask
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:328    .text.prvInitialiseTaskLists:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:334    .text.prvInitialiseTaskLists:00000000 prvInitialiseTaskLists
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:400    .text.prvInitialiseTaskLists:00000048 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:412    .text.prvAddNewTaskToReadyList:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:418    .text.prvAddNewTaskToReadyList:00000000 prvAddNewTaskToReadyList
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:529    .text.prvAddNewTaskToReadyList:00000090 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:540    .text.prvDeleteTCB:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:546    .text.prvDeleteTCB:00000000 prvDeleteTCB
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:610    .text.prvCheckTasksWaitingTermination:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:616    .text.prvCheckTasksWaitingTermination:00000000 prvCheckTasksWaitingTermination
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:683    .text.prvCheckTasksWaitingTermination:00000040 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:690    .text.prvIdleTask:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:696    .text.prvIdleTask:00000000 prvIdleTask
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:736    .text.prvIdleTask:00000020 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:742    .text.prvAddCurrentTaskToDelayedList:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:748    .text.prvAddCurrentTaskToDelayedList:00000000 prvAddCurrentTaskToDelayedList
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:835    .text.prvAddCurrentTaskToDelayedList:00000064 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:845    .text.xTaskCreateStatic:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:852    .text.xTaskCreateStatic:00000000 xTaskCreateStatic
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:972    .text.xTaskCreate:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:979    .text.xTaskCreate:00000000 xTaskCreate
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1086   .text.vTaskDelete:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1093   .text.vTaskDelete:00000000 vTaskDelete
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1227   .text.vTaskDelete:00000098 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1239   .text.eTaskGetState:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1246   .text.eTaskGetState:00000000 eTaskGetState
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1365   .text.eTaskGetState:0000006c $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1374   .text.uxTaskPriorityGet:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1381   .text.uxTaskPriorityGet:00000000 uxTaskPriorityGet
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1420   .text.uxTaskPriorityGet:0000001c $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1425   .text.uxTaskPriorityGetFromISR:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1432   .text.uxTaskPriorityGetFromISR:00000000 uxTaskPriorityGetFromISR
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1495   .text.uxTaskPriorityGetFromISR:0000002c $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1500   .text.vTaskPrioritySet:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1507   .text.vTaskPrioritySet:00000000 vTaskPrioritySet
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1688   .text.vTaskPrioritySet:000000c8 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1696   .text.vTaskResume:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1703   .text.vTaskResume:00000000 vTaskResume
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1809   .text.vTaskResume:00000078 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1817   .text.xTaskResumeFromISR:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1824   .text.xTaskResumeFromISR:00000000 xTaskResumeFromISR
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1964   .text.xTaskResumeFromISR:00000094 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1973   .text.vTaskStartScheduler:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:1980   .text.vTaskStartScheduler:00000000 vTaskStartScheduler
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2111   .text.vTaskStartScheduler:00000088 $d
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 216


C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2122   .text.vTaskEndScheduler:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2129   .text.vTaskEndScheduler:00000000 vTaskEndScheduler
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2166   .text.vTaskEndScheduler:00000020 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2171   .text.vTaskSuspendAll:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2178   .text.vTaskSuspendAll:00000000 vTaskSuspendAll
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2194   .text.vTaskSuspendAll:0000000c $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2199   .text.xTaskGetTickCount:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2206   .text.xTaskGetTickCount:00000000 xTaskGetTickCount
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2222   .text.xTaskGetTickCount:00000008 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2227   .text.xTaskGetTickCountFromISR:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2234   .text.xTaskGetTickCountFromISR:00000000 xTaskGetTickCountFromISR
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2257   .text.xTaskGetTickCountFromISR:0000000c $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2262   .text.uxTaskGetNumberOfTasks:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2269   .text.uxTaskGetNumberOfTasks:00000000 uxTaskGetNumberOfTasks
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2284   .text.uxTaskGetNumberOfTasks:00000008 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2289   .text.pcTaskGetName:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2296   .text.pcTaskGetName:00000000 pcTaskGetName
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2342   .text.pcTaskGetName:00000020 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2349   .text.xTaskIncrementTick:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2356   .text.xTaskIncrementTick:00000000 xTaskIncrementTick
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2568   .text.xTaskIncrementTick:000000f4 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2583   .text.xTaskResumeAll:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2590   .text.xTaskResumeAll:00000000 xTaskResumeAll
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2782   .text.xTaskResumeAll:000000d8 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2795   .text.vTaskDelayUntil:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2802   .text.vTaskDelayUntil:00000000 vTaskDelayUntil
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2973   .text.vTaskDelayUntil:000000a0 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2981   .text.vTaskDelay:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:2988   .text.vTaskDelay:00000000 vTaskDelay
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3065   .text.vTaskDelay:00000048 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3071   .text.vTaskSwitchContext:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3078   .text.vTaskSwitchContext:00000000 vTaskSwitchContext
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3203   .text.vTaskSwitchContext:00000088 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3214   .text.vTaskSuspend:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3221   .text.vTaskSuspend:00000000 vTaskSuspend
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3372   .text.vTaskSuspend:000000ac $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3382   .text.vTaskPlaceOnEventList:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3389   .text.vTaskPlaceOnEventList:00000000 vTaskPlaceOnEventList
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3441   .text.vTaskPlaceOnEventList:0000002c $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3446   .text.vTaskPlaceOnUnorderedEventList:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3453   .text.vTaskPlaceOnUnorderedEventList:00000000 vTaskPlaceOnUnorderedEventList
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3540   .text.vTaskPlaceOnUnorderedEventList:00000054 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3546   .text.vTaskPlaceOnEventListRestricted:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3553   .text.vTaskPlaceOnEventListRestricted:00000000 vTaskPlaceOnEventListRestricted
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3612   .text.vTaskPlaceOnEventListRestricted:00000034 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3619   .text.xTaskRemoveFromEventList:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3626   .text.xTaskRemoveFromEventList:00000000 xTaskRemoveFromEventList
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3731   .text.xTaskRemoveFromEventList:00000074 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3741   .text.vTaskRemoveFromUnorderedEventList:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3748   .text.vTaskRemoveFromUnorderedEventList:00000000 vTaskRemoveFromUnorderedEventList
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3854   .text.vTaskRemoveFromUnorderedEventList:00000074 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3865   .text.vTaskSetTimeOutState:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3872   .text.vTaskSetTimeOutState:00000000 vTaskSetTimeOutState
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3926   .text.vTaskSetTimeOutState:00000030 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3932   .text.vTaskInternalSetTimeOutState:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3939   .text.vTaskInternalSetTimeOutState:00000000 vTaskInternalSetTimeOutState
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3959   .text.vTaskInternalSetTimeOutState:00000010 $d
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 217


C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3965   .text.xTaskCheckForTimeOut:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:3972   .text.xTaskCheckForTimeOut:00000000 xTaskCheckForTimeOut
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4106   .text.xTaskCheckForTimeOut:00000078 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4113   .text.vTaskMissedYield:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4120   .text.vTaskMissedYield:00000000 vTaskMissedYield
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4135   .text.vTaskMissedYield:00000008 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4140   .text.uxTaskGetTaskNumber:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4147   .text.uxTaskGetTaskNumber:00000000 uxTaskGetTaskNumber
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4173   .text.vTaskSetTaskNumber:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4180   .text.vTaskSetTaskNumber:00000000 vTaskSetTaskNumber
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4200   .text.vTaskGetInfo:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4207   .text.vTaskGetInfo:00000000 vTaskGetInfo
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4319   .text.vTaskGetInfo:00000074 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4324   .text.prvListTasksWithinSingleList:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4330   .text.prvListTasksWithinSingleList:00000000 prvListTasksWithinSingleList
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4431   .text.uxTaskGetSystemState:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4438   .text.uxTaskGetSystemState:00000000 uxTaskGetSystemState
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4554   .text.uxTaskGetSystemState:00000098 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4564   .text.uxTaskGetStackHighWaterMark:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4571   .text.uxTaskGetStackHighWaterMark:00000000 uxTaskGetStackHighWaterMark
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4604   .text.uxTaskGetStackHighWaterMark:00000014 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4609   .text.xTaskGetCurrentTaskHandle:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4616   .text.xTaskGetCurrentTaskHandle:00000000 xTaskGetCurrentTaskHandle
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4632   .text.xTaskGetCurrentTaskHandle:00000008 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4637   .text.xTaskGetSchedulerState:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4644   .text.xTaskGetSchedulerState:00000000 xTaskGetSchedulerState
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4675   .text.xTaskGetSchedulerState:00000018 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4681   .text.xTaskPriorityInherit:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4688   .text.xTaskPriorityInherit:00000000 xTaskPriorityInherit
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4816   .text.xTaskPriorityInherit:00000094 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4823   .text.xTaskPriorityDisinherit:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4830   .text.xTaskPriorityDisinherit:00000000 xTaskPriorityDisinherit
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4968   .text.xTaskPriorityDisinherit:00000084 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4975   .text.vTaskPriorityDisinheritAfterTimeout:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:4982   .text.vTaskPriorityDisinheritAfterTimeout:00000000 vTaskPriorityDisinheritAfterTimeout
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5137   .text.vTaskPriorityDisinheritAfterTimeout:000000a0 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5144   .text.uxTaskResetEventItemValue:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5151   .text.uxTaskResetEventItemValue:00000000 uxTaskResetEventItemValue
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5174   .text.uxTaskResetEventItemValue:00000014 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5179   .text.pvTaskIncrementMutexHeldCount:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5186   .text.pvTaskIncrementMutexHeldCount:00000000 pvTaskIncrementMutexHeldCount
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5212   .text.pvTaskIncrementMutexHeldCount:00000018 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5217   .text.ulTaskNotifyTake:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5224   .text.ulTaskNotifyTake:00000000 ulTaskNotifyTake
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5320   .text.ulTaskNotifyTake:00000070 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5326   .text.xTaskNotifyWait:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5333   .text.xTaskNotifyWait:00000000 xTaskNotifyWait
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5449   .text.xTaskNotifyWait:00000090 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5455   .text.xTaskGenericNotify:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5462   .text.xTaskGenericNotify:00000000 xTaskGenericNotify
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5508   .text.xTaskGenericNotify:0000002c $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5513   .text.xTaskGenericNotify:00000030 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5657   .text.xTaskGenericNotify:000000d0 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5665   .text.xTaskGenericNotifyFromISR:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5672   .text.xTaskGenericNotifyFromISR:00000000 xTaskGenericNotifyFromISR
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5737   .text.xTaskGenericNotifyFromISR:0000004a $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5742   .text.xTaskGenericNotifyFromISR:0000004e $t
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 218


C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5908   .text.xTaskGenericNotifyFromISR:00000108 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5918   .text.vTaskNotifyGiveFromISR:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:5925   .text.vTaskNotifyGiveFromISR:00000000 vTaskNotifyGiveFromISR
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6093   .text.vTaskNotifyGiveFromISR:000000b8 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6103   .text.xTaskNotifyStateClear:00000000 $t
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6110   .text.xTaskNotifyStateClear:00000000 xTaskNotifyStateClear
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6164   .text.xTaskNotifyStateClear:00000030 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6174   .bss.pxCurrentTCB:00000000 pxCurrentTCB
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6170   .bss.pxCurrentTCB:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6177   .bss.pxDelayedTaskList:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6181   .bss.pxDelayedTaskList:00000000 pxDelayedTaskList
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6184   .bss.pxOverflowDelayedTaskList:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6188   .bss.pxOverflowDelayedTaskList:00000000 pxOverflowDelayedTaskList
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6191   .bss.pxReadyTasksLists:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6195   .bss.pxReadyTasksLists:00000000 pxReadyTasksLists
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6198   .bss.uxCurrentNumberOfTasks:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6202   .bss.uxCurrentNumberOfTasks:00000000 uxCurrentNumberOfTasks
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6205   .bss.uxDeletedTasksWaitingCleanUp:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6209   .bss.uxDeletedTasksWaitingCleanUp:00000000 uxDeletedTasksWaitingCleanUp
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6212   .bss.uxPendedTicks:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6216   .bss.uxPendedTicks:00000000 uxPendedTicks
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6219   .bss.uxSchedulerSuspended:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6223   .bss.uxSchedulerSuspended:00000000 uxSchedulerSuspended
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6226   .bss.uxTaskNumber:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6230   .bss.uxTaskNumber:00000000 uxTaskNumber
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6233   .bss.uxTopReadyPriority:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6237   .bss.uxTopReadyPriority:00000000 uxTopReadyPriority
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6240   .bss.xDelayedTaskList1:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6244   .bss.xDelayedTaskList1:00000000 xDelayedTaskList1
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6247   .bss.xDelayedTaskList2:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6251   .bss.xDelayedTaskList2:00000000 xDelayedTaskList2
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6254   .bss.xNextTaskUnblockTime:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6258   .bss.xNextTaskUnblockTime:00000000 xNextTaskUnblockTime
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6261   .bss.xNumOfOverflows:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6265   .bss.xNumOfOverflows:00000000 xNumOfOverflows
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6268   .bss.xPendingReadyList:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6272   .bss.xPendingReadyList:00000000 xPendingReadyList
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6275   .bss.xSchedulerRunning:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6279   .bss.xSchedulerRunning:00000000 xSchedulerRunning
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6282   .bss.xSuspendedTaskList:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6286   .bss.xSuspendedTaskList:00000000 xSuspendedTaskList
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6289   .bss.xTasksWaitingTermination:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6293   .bss.xTasksWaitingTermination:00000000 xTasksWaitingTermination
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6296   .bss.xTickCount:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6300   .bss.xTickCount:00000000 xTickCount
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6303   .bss.xYieldPending:00000000 $d
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6307   .bss.xYieldPending:00000000 xYieldPending
C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s:6310   .rodata.vTaskStartScheduler.str1.4:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memset
vListInitialiseItem
pxPortInitialiseStack
vListInitialise
vPortEnterCritical
vListInsertEnd
ARM GAS  C:\Users\choee\AppData\Local\Temp\ccJyQrgc.s 			page 219


vPortExitCritical
vPortFree
uxListRemove
vListInsert
pvPortMalloc
vPortValidateInterruptPriority
vApplicationGetIdleTaskMemory
xTimerCreateTimerTask
xPortStartScheduler
vPortEndScheduler
